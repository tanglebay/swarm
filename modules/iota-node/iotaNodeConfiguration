#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigsPath/iota-node.cfg
    if [ "$iotaNodeUpdateCheck" = "true" ]; then
        menuIotaNodeUpdateCheck="Disable"
    else
        menuIotaNodeUpdateCheck="Enable"
    fi
    CHOICE=$(
        whiptail --title "Node [IOTA] Configuration" --menu "\nChoose an option" 24 70 0 \
        "" "" \
        "1)" "JWT-Auth" \
        "2)" "INX-Interface" \
        "3)" "Autopeering" \
        "4)" "Snapshots" \
        "5)" "Database Pruning" \
        "6)" "Proof Of Work" \
        "7)" "P2P Identity" \
        "8)" "Gossip (Peering)" \
        "9)" "Node Alias" \
        "10)" "[$menuIotaNodeUpdateCheck] Update Check" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartIotaNode" = "true" ] && [ -d "$iotaNodePath" ]; then
            if (whiptail --title "Node [IOTA] Configuration" --yesno "Would you like to apply the changes and restart [IOTA] Node? (INX apps start delayed)" 8 70); then
                if [ ! -f "/tmp/iota-node.lock" ]; then
                    touch /tmp/iota-node.lock > /dev/null 2>&1
                fi
                {
                    echo 0
                    echo 20
                    source $iotaNodeModule/iotaNodeParser
                    echo 40
                    cp -rf $swarmConfigsPath/docker-env.cfg > $swarmDockerPath/.env > /dev/null 2>&1
                    echo 60
                    ( cd $swarmDockerPath ; docker compose -f docker-iota.yml down > /dev/null 2>&1)
                    echo 80
                    ( cd $swarmDockerPath ; docker compose -f docker-iota.yml up -d > /dev/null 2>&1)
                    echo 100
                } | whiptail --gauge "Please wait while the changes are applied and [IOTA] Node is restarted..." 8 70 0
                unset restartIotaNode
                if [ -f "/tmp/iota-node.lock" ]; then
                    rm -rf /tmp/iota-node.lock > /dev/null 2>&1
                fi
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg
                # Node JWT
                CHOICE=$(
                    whiptail --title "Node [IOTA] JWT" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Generate New JWT Token" \
                    "2)" "Show All JWT Token" \
                    "3)" "Revoke All JWT Token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -d $iotaNodePath ]; then
                            if (whiptail --title "Node [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to generate a new [IOTA] Node JWT token?" 8 70); then
                                iotaNodeApiJwtToken=$( cd $swarmDockerPath ; docker compose run $iotaNodeDockerService tools jwt-api --salt $iotaNodeApiJwtSalt --databasePath data/p2pstore | awk '{ print $5 }')
                                if [ ! -z "$iotaNodeApiJwtToken" ]; then
                                    sed -i 's~^iotaNodeApiJwtToken=.*~iotaNodeApiJwtToken="'$iotaNodeApiJwtToken'"~' $swarmConfigsPath/iota-node.cfg
                                    echo $iotaNodeApiJwtToken >> $swarmLogs/iotaNodeJwtToken.log
                                    clear
                                    echo ""
                                    echo $iotaNodeApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Node [IOTA] API & JWT" --msgbox "Error generating [IOTA] Node JWT token, please try again later." 8 70
                                fi
                            fi
                        else
                            whiptail --title "Node [IOTA] API & JWT" --msgbox "Please install [IOTA] Node first." 8 70
                        fi
                    ;;
                    "2)")
                        if [ -f "$swarmLogs/iotaNodeJwtToken.log" ]; then
                            $swarmCLEditor $swarmLogs/iotaNodeJwtToken.log
                        else
                            whiptail --title "Node [IOTA] API & JWT" --msgbox "No [IOTA] Node JWT token log found, please generate one first." 8 70
                        fi
                    ;;
                    "3)")
                        if [ -d $iotaNodePath ]; then
                            if (whiptail --title "Node [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to revoke all [IOTA] Node JWT tokens?" 8 70); then
                                iotaNodeApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sed -i 's~^iotaNodeApiJwtSalt=.*~iotaNodeApiJwtSalt="'$iotaNodeApiJwtSalt'"~' $swarmConfigsPath/iota-node.cfg
                                {
                                    echo 0
                                    echo 15
                                    source $iotaNodeConfigParsers/iotaNodeApiJwtSalt
                                    echo 30
                                    rm -rf $swarmLogs/iotaNodeJwt.log
                                    echo 45
                                    source $iotaNodeConfigParsers/iotaNodeIdentity
                                    echo 60
                                    ( cd $swarmDockerPath ; docker compose -f docker-iota.yml down > /dev/null 2>&1 && docker compose -f docker-iota.yml up -d > /dev/null 2>&1 )
                                    echo 75
                                    iotaNodeApiJwtToken=$( cd $swarmDockerPath ; docker compose run $iotaNodeDockerService tools jwt-api --salt $iotaNodeApiJwtSalt --databasePath data/p2pstore | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$iotaNodeApiJwtToken" ]; then
                                        sed -i 's~^iotaNodeApiJwtToken=.*~iotaNodeApiJwtToken="'$iotaNodeApiJwtToken'"~' $swarmConfigsPath/iota-node.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all [IOTA] Node JWT tokens will be revoked..." 8 70 0
                                if [ -f "/tmp/iota-node.lock" ]; then
                                    rm -rf /tmp/iota-node.lock > /dev/null 2>&1
                                fi
                            fi
                        else
                            whiptail --title "Node [IOTA] JWT" --msgbox "Please install [IOTA] Node first." 8 70
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg
                if [ "$iotaNodeInxEnabled" = "true" ]; then
                    menuIotaNodeInxEnabled="Disable"
                else
                    menuIotaNodeInxEnabled="Enable"
                fi
                # Node JWT
                CHOICE=$(
                    whiptail --title "Node [IOTA] INX" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Set INX POW Worker Count" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigsPath/iota-node.cfg
                        currentIotaNodeInxPowWorkerCount=$iotaNodeInxPowWorkerCount
                        iotaNodeInxPowWorkerCount=$(whiptail --inputbox "\nSet the numbers of cores for [IOTA] INX pow." 10 65 "$iotaNodeInxPowWorkerCount" --title "Node [IOTA] INX" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaNodeInxPowWorkerCount" ] && [ "$currentIotaNodeInxPowWorkerCount" != "$iotaNodeInxPowWorkerCount" ] && [ $iotaNodeInxPowWorkerCount -eq $iotaNodeInxPowWorkerCount ] 2>/dev/null; then
                                sed -i 's/^iotaNodeInxPowWorkerCount=.*/iotaNodeInxPowWorkerCount='$iotaNodeInxPowWorkerCount'/' $swarmConfigsPath/iota-node.cfg
                                restartIotaNode=true
                            fi
                        fi
                        whiptail --title "Node [IOTA] INX" --msgbox "[IOTA] INX pow worker counter set to $iotaNodeInxPowWorkerCount." 8 70
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg

                if [ "$iotaNodeAutopeeringEnabled" = "true" ]; then
                    menuIotaNodeAutopeeringEnabled="disable"
                else
                    menuIotaNodeAutopeeringEnabled="enable"
                fi
                # Node JWT
                CHOICE=$(
                    whiptail --title "Node [IOTA] Autopeering" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${menuIotaNodeAutopeeringEnabled^}] Autopeering" \
                    "2)" "Set Autopeering Port (UDP)" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Node [IOTA] Autopeering" --yesno --defaultno "Are you sure you want to ${menuIotaNodeAutopeeringEnabled} [IOTA] Node autopeering?" 8 70); then
                            source $swarmConfigsPath/iota-node.cfg
                            if [ "$iotaNodeAutopeeringEnabled" = "true" ]; then
                                iotaNodeAutopeeringEnabled=false
                                menuIotaNodeAutopeeringEnabled="disabled"
                                sed -i 's/^iotaNodeAutopeeringEnabled=.*/iotaNodeAutopeeringEnabled='$iotaNodeAutopeeringEnabled'/' $swarmConfigsPath/iota-node.cfg
                                sed -i 's/^IOTA_AUTOPEERING_ENABLED=.*/IOTA_AUTOPEERING_ENABLED='$iotaNodeAutopeeringEnabled'/' $swarmConfigsPath/docker-env.cfg
                                sed -i 's/^IOTA_AUTOPEERING_PORT=.*/IOTA_AUTOPEERING_PORT=""/' $swarmConfigsPath/docker-env.cfg
                            else
                                iotaNodeAutopeeringEnabled=true
                                menuIotaNodeAutopeeringEnabled="enabled"
                                sed -i 's/^iotaNodeAutopeeringEnabled=.*/iotaNodeAutopeeringEnabled='$iotaNodeAutopeeringEnabled'/' $swarmConfigsPath/iota-node.cfg
                                sed -i 's/^IOTA_AUTOPEERING_ENABLED=.*/IOTA_AUTOPEERING_ENABLED='$iotaNodeAutopeeringEnabled'/' $swarmConfigsPath/docker-env.cfg
                                sed -i 's~^IOTA_AUTOPEERING_PORT=.*~IOTA_AUTOPEERING_PORT="- \"'$iotaNodeAutopeeringPort':'$iotaNodeAutopeeringPort'/udp\""~g' $swarmConfigsPath/docker-env.cfg
                            fi
                            restartIotaNode=true
                            whiptail --title "Node [IOTA] Autopeering" --msgbox "[IOTA] Node autopeering $menuIotaNodeAutopeeringEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigsPath/iota-node.cfg
                        if [ "$iotaNodeAutopeeringEnabled" = "true" ]; then
                            currentIotaNodeAutopeeringPort=$iotaNodeAutopeeringPort
                            iotaNodeAutopeeringPort=$(whiptail --inputbox "\nSet the [IOTA] Node autopeering port for the automatic neighbors detection." 10 65 "$iotaNodeAutopeeringPort" --title "Node [IOTA] Autopeering" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ $exitStatus != 1 ]; then
                                if [ ! -z "$iotaNodeAutopeeringPort" ] && [ "$currentIotaNodeAutopeeringPort" != "$iotaNodeAutopeeringPort" ] && [ $iotaNodeAutopeeringPort -eq $iotaNodeAutopeeringPort ] 2>/dev/null; then
                                    sed -i 's/^iotaNodeAutopeeringPort=.*/iotaNodeAutopeeringPort='$iotaNodeAutopeeringPort'/' $swarmConfigsPath/iota-node.cfg
                                    sed -i 's~^IOTA_AUTOPEERING_PORT=.*~IOTA_AUTOPEERING_PORT="- \"'$iotaNodeAutopeeringPort':'$iotaNodeAutopeeringPort'/udp\""~g' $swarmConfigsPath/docker-env.cfg
                                    restartIotaNode=true
                                    whiptail --title "Node [IOTA] Autopeering" --msgbox "[IOTA] Node autopeering port set to \"$iotaNodeAutopeeringPort/udp\"." 8 70
                                fi
                            fi
                            unset currentIotaNodeAutopeeringPort
                        else
                            whiptail --title "Node [IOTA] Autopeering" --msgbox "[IOTA] Node autopeering not enabled, please enable first." 8 70
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg

                if [ "$iotaNodeSnapshotsEnabled" = "true" ]; then
                    menuIotaNodeSnapshotsEnabled="disable"
                else
                    menuIotaNodeSnapshotsEnabled="enable"
                fi
                # Node JWT
                CHOICE=$(
                    whiptail --title "Node [IOTA] Snapshots" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${menuIotaNodeSnapshotsEnabled^}] Snapshots" \
                    "2)" "Set Snapshot Interval" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Node [IOTA] Snapshots" --yesno --defaultno "Are you sure you want to $menuIotaNodeSnapshotsEnabled [IOTA] Node snapshots?" 8 70); then
                            source $swarmConfigsPath/iota-node.cfg
                            if [ "$iotaNodeSnapshotsEnabled" = "true" ]; then
                                iotaNodeSnapshotsEnabled=false
                                menuIotaNodeSnapshotsEnabled="disabled"
                                sed -i 's/^iotaNodeSnapshotsEnabled=.*/iotaNodeSnapshotsEnabled='$iotaNodeSnapshotsEnabled'/' $swarmConfigsPath/iota-node.cfg
                            else
                                iotaNodeSnapshotsEnabled=true
                                menuIotaNodeSnapshotsEnabled="enabled"
                                sed -i 's/^iotaNodeSnapshotsEnabled=.*/iotaNodeSnapshotsEnabled='$iotaNodeSnapshotsEnabled'/' $swarmConfigsPath/iota-node.cfg
                            fi
                            restartIotaNode=true
                            whiptail --title "Node [IOTA] Snapshots" --msgbox "[IOTA] Node snapshots $menuIotaNodeSnapshotsEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigsPath/iota-node.cfg
                        currentIotaNodeSnapshotsInterval=$iotaNodeSnapshotsInterval
                        iotaNodeSnapshotsInterval=$(whiptail --inputbox "\nSet the snapshot interval for [IOTA] Node." 10 65 "$iotaNodeSnapshotsInterval" --title "Node [IOTA] Snapshots" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaNodeSnapshotsInterval" ] && [ "$currentIotaNodeSnapshotsInterval" != "$iotaNodeSnapshotsInterval" ] && [ $iotaNodeSnapshotsInterval -eq $iotaNodeSnapshotsInterval ] 2>/dev/null; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodeSnapshotsInterval
                                fi
                                sed -i 's/^iotaNodeSnapshotsInterval=.*/iotaNodeSnapshotsInterval='$iotaNodeSnapshotsInterval'/' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Snapshots" --msgbox "[IOTA] Node snapshot interval set to \"$iotaNodeSnapshotsInterval\"." 8 70
                            fi
                        fi
                        unset currentIotaNodeSnapshotsInterval
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg
                # Node Pruning
                if [ "$iotaNodePruningEnabled" = "true" ]; then
                    iotaNodePruningEnabledStatus="disable"
                else
                    iotaNodePruningEnabledStatus="enable"
                fi
                CHOICE=$(
                    whiptail --title "Node [IOTA] Pruning" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${iotaNodePruningEnabledStatus^}] Pruning" \
                    "2)" "Set Database Size" \
                    "3)" "Set Pruning Cooldown" \
                    "4)" "Set Pruning Percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Node [IOTA] Pruning" --yesno --defaultno "Are you sure you want to $iotaNodePruningEnabledStatus [IOTA] Node pruning?" 8 70); then
                            if [ "$iotaNodePruningEnabled" = "true" ]; then
                                iotaNodePruningEnabled=false
                                iotaNodePruningEnabledStatus="disabled"
                            else
                                iotaNodePruningEnabled=true
                                iotaNodePruningEnabledStatus="enabled"
                            fi
                            restartIotaNode=true
                            sed -i 's/^iotaNodePruningEnabled=.*/iotaNodePruningEnabled='$iotaNodePruningEnabled'/' $swarmConfigsPath/iota-node.cfg
                            whiptail --title "Node [IOTA] Pruning" --msgbox "Pruning of the [IOTA] Node database $iotaNodePruningEnabledStatus." 8 70
                        fi
                    ;;
                    "2)")
                        if [[ $iotaNodePruningDatabaseSize = *-* ]]; then
                            unset iotaNodePruningDatabaseSize
                        fi
                        currentIotaNodePruningDatabaseSize=$iotaNodePruningDatabaseSize
                        iotaNodePruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the [IOTA] Node database in gigabytes." 10 65 "$currentIotaNodePruningDatabaseSize" --title "Node [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaNodePruningDatabaseSize=${iotaNodePruningDatabaseSize//[!0-9]/}
                            if [ $iotaNodePruningDatabaseSize -gt 0 ] && [ $currentIotaNodePruningDatabaseSize -ne $iotaNodePruningDatabaseSize ] 2>/dev/null; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodePruningDatabaseSize
                                fi
                                sed -i 's/^iotaNodePruningDatabaseSize=.*/iotaNodePruningDatabaseSize='$iotaNodePruningDatabaseSize'/' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Pruning" --msgbox "The [IOTA] Node database size has been limited to ${iotaNodePruningDatabaseSize} GB." 8 70
                            else
                                whiptail --title "Node [IOTA] Pruning" --msgbox "Aborted - No change was made to the [IOTA] Node database size." 8 70
                            fi
                        fi
                    ;;
                    "3)")
                        currentIotaNodePruningCooldownTime=$iotaNodePruningCooldownTime
                        iotaNodePruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum [IOTA] Node DB size is reached." 10 65 $iotaNodePruningCooldownTime --title "Node [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaNodePruningCooldownTime=${iotaNodePruningCooldownTime//[!0-9]/}
                            if [ $iotaNodePruningCooldownTime -gt 0 ] && [ $iotaNodePruningCooldownTime -lt 60 ] 2>/dev/null; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodePruningCooldownTime
                                fi
                                sed -i 's/^iotaNodePruningCooldownTime=.*/iotaNodePruningCooldownTime='$iotaNodePruningCooldownTime'/' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Pruning" --msgbox "[IOTA] Node pruning cooldown time set to ${iotaNodePruningCooldownTime} minutes." 8 70
                            fi
                        fi
                    ;;
                    "4)")
                        iotaNodePruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the [IOTA] Node database" 10 65 "$iotaNodePruningPercentage" --title "Node [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaNodePruningPercentage" ] && [ $iotaNodePruningPercentage -eq $iotaNodePruningPercentage ] 2>/dev/null; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodePruningPercentage
                                fi
                                sed -i 's/^iotaNodePruningPercentage=.*/iotaNodePruningPercentage='$iotaNodePruningPercentage'/' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Pruning" --msgbox "[IOTA] Node pruning percentage set to ${iotaNodePruningPercentage}%." 8 70
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            source $swarmConfigsPath/iota-node.cfg
            if [ "$iotaNodePowEnabled" = "true" ]; then
                iotaNodePowEnabledStatus="disable"
            else
                iotaNodePowEnabledStatus="enable"
            fi
            if (whiptail --title "Node [IOTA] Proof of Work" --yesno --defaultno "Do you really want to $iotaNodePowEnabledStatus [IOTA] Node proof of work?" 8 70); then
                if [ "$iotaNodePowEnabled" = "true" ]; then
                    iotaNodePowEnabled=false
                    if [ -d $iotaNodePath ]; then
                        source $iotaNodeConfigParsers/iotaNodePowEnabled
                        source $iotaNodeConfigParsers/iotaNodePowWorkerCount
                        sed -i 's/^iotaNodePowWorkerCount=.*/iotaNodePowWorkerCount='$iotaNodePowWorkerCount'/' $swarmConfigsPath/iota-node.cfg
                    fi
                    sed -i 's/^iotaNodePowEnabled=.*/iotaNodePowEnabled='$iotaNodePowEnabled'/' $swarmConfigsPath/iota-node.cfg
                    whiptail --title "Node [IOTA] PoW" --msgbox "[IOTA] Node PoW has been disabled." 8 70
                else
                    iotaNodePowEnabled=true
                    if [ -d $iotaNodePath ]; then
                        source $iotaNodeConfigParsers/iotaNodePowEnabled
                        source $iotaNodeConfigParsers/iotaNodePowWorkerCount
                        sed -i 's/^iotaNodePowWorkerCount=.*/iotaNodePowWorkerCount='$iotaNodePowWorkerCount'/' $swarmConfigsPath/iota-node.cfg
                    fi
                    sed -i 's/^iotaNodePowEnabled=.*/iotaNodePowEnabled='$iotaNodePowEnabled'/' $swarmConfigsPath/iota-node.cfg
                    whiptail --title "Node [IOTA] PoW" --msgbox "[IOTA] Node PoW has been enabled." 8 70
                fi
            fi
        ;;
        "7)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg
                # Node Dashboard
                CHOICE=$(
                    whiptail --title "Node [IOTA] Identity" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Set Identity" \
                    "2)" "Generate New Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigsPath/iota-node.cfg
                        currentIotaNodeIdentity=$iotaNodeIdentity
                        iotaNodeIdentity=$(whiptail --inputbox "\nSet your own private key for the [IOTA] Node Identity" 10 65 --title "Node [IOTA] Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$iotaNodeIdentity" != "$currentIotaNodeIdentity" ] && [ ! -z "$iotaNodeIdentity" ]; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodeIdentity
                                fi
                                sed -i 's~^iotaNodeIdentity=.*~iotaNodeIdentity="'$iotaNodeIdentity'"~' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Identity" --msgbox "The following [IOTA] Node Identity key was set: \n$iotaNodeIdentity." 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -d $iotaNodePath ]; then
                            if (whiptail --title "Node [IOTA] Identity" --yesno --defaultno "Are you sure you want to generate a new [IOTA] Node Identity (the existing one will be deleted)?" 8 70); then
                                unset iotaNodeIdentity
                                if [ -f "$iotaNodePath/p2pstore/identity.key" ]; then
                                    rm -rf $iotaNodePath/p2pstore/identity.key 2>/dev/null
                                fi
                                source $iotaNodeConfigParsers/iotaNodeIdentity
                                whiptail --title "Node [IOTA] Identity" --msgbox "The following [IOTA] Node Identity key was set: \n$iotaNodeIdentity" 12 65
                                source $swarmConfigsPath/iota-node.cfg
                            fi
                        else
                            whiptail --title "Node [IOTA] Identity" --msgbox "Please install [IOTA] Node first." 12 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigsPath/iota-node.cfg
                CHOICE=$(
                    whiptail --title "Node [IOTA] Gossip" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Set Gossip Port" \
                    "2)" "Set Unknown Peers Limit" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigsPath/iota-node.cfg
                        currentIotaNodeGossipPort=$iotaNodeGossipPort
                        iotaNodeGossipPort=$(whiptail --inputbox "\nSet the [IOTA] Node gossip port for the neighbors communication." 10 65 "$iotaNodeGossipPort" --title "Node [IOTA] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaNodeGossipPort" ] && [ "$currentIotaNodeGossipPort" != "$iotaNodeGossipPort" ] && [ $iotaNodeGossipPort -eq $iotaNodeGossipPort ] 2>/dev/null; then
                                sed -i 's/^iotaNodeGossipPort=.*/iotaNodeGossipPort='$iotaNodeGossipPort'/' $swarmConfigsPath/iota-node.cfg
                                sed -i 's/^IOTA_GOSSIP_PORT=.*/IOTA_GOSSIP_PORT='$iotaNodeGossipPort'/' $swarmConfigsPath/docker-env.cfg
                                whiptail --title "Node [IOTA] Gossip" --msgbox "[IOTA] Node gossip port set to \"$iotaNodeGossipPort/tcp\"." 8 70
                                restartIotaNode=true
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigsPath/iota-node.cfg
                        currentIotaNodeUnknownPeersLimit=$iotaNodeUnknownPeersLimit
                        iotaNodeUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown [IOTA] Node neighbors." 10 65 "$currentIotaNodeUnknownPeersLimit" --title "Node [IOTA] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$currentIotaNodeUnknownPeersLimit" != "$iotaNodeUnknownPeersLimit" ] && [ $iotaNodeUnknownPeersLimit -eq $iotaNodeUnknownPeersLimit ] && [ ! -z "$iotaNodeUnknownPeersLimit" ] 2>/dev/null; then
                                if [ -d $iotaNodePath ]; then
                                    source $iotaNodeConfigParsers/iotaNodeGossipUnknownPeersLimit
                                fi
                                sed -i 's/^iotaNodeUnknownPeersLimit=.*/iotaNodeUnknownPeersLimit='$iotaNodeUnknownPeersLimit'/' $swarmConfigsPath/iota-node.cfg
                                whiptail --title "Node [IOTA] Gossip" --msgbox "Maximum of unknown [IOTA] Node neighbors set to \"$iotaNodeUnknownPeersLimit\"." 8 70
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            source $swarmConfigsPath/iota-node.cfg
            iotaNodeCurrentAlias=$iotaNodeAlias
            iotaNodeAlias=$(whiptail --inputbox "\nDefine an alias of your [IOTA] Node node" 10 65 "$iotaNodeAlias" --title "Node [IOTA] Alias" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ "$iotaNodeCurrentAlias" != "$iotaNodeAlias" ]; then
                    sed -i 's~^iotaNodeAlias=.*~'iotaNodeAlias="\"$iotaNodeAlias\""'~g' $swarmConfigsPath/iota-node.cfg
                    if [ -d $iotaNodePath ]; then
                        source $iotaNodeConfigParsers/iotaNodeAlias
                        if [ "$newIotaNodeAlias" = "true" ]; then
                            whiptail --title "Node [IOTA] Alias" --msgbox "New [IOTA] Node alias \"$iotaNodeAlias\" applied." 8 70
                            unset newIotaNodeAlias
                        else
                            whiptail --title "Node [IOTA] Alias" --msgbox "No [IOTA] Node alias change detected." 8 70
                        fi
                    else
                        whiptail --title "Node [IOTA] Alias" --msgbox "[IOTA] Node alias \"$iotaNodeAlias\" applied." 8 70
                    fi
                fi
            fi
            unset iotaNodeCurrentAlias
        ;;
        "10)")
            menuIotaNodeUpdateCheck=$(echo $menuIotaNodeUpdateCheck | awk '{print tolower($0)}')
            if (whiptail --title "Node [IOTA] Update Check" --yesno --defaultno "Are you sure you want to $menuIotaNodeUpdateCheck the [IOTA] Node update check?" 8 70); then
                source $swarmConfigsPath/iota-node.cfg
                if [ "$iotaNodeUpdateCheck" = "true" ]; then
                    iotaNodeUpdateCheck=false
                    menuIotaNodeUpdateCheck="disabled"
                    sed -i 's/^iotaNodeUpdateCheck=.*/iotaNodeUpdateCheck='$iotaNodeUpdateCheck'/' $swarmConfigsPath/iota-node.cfg
                else
                    iotaNodeUpdateCheck=true
                    menuIotaNodeUpdateCheck="enabled"
                    sed -i 's/^iotaNodeUpdateCheck=.*/iotaNodeUpdateCheck='$iotaNodeUpdateCheck'/' $swarmConfigsPath/iota-node.cfg
                fi
                restartIotaNode=true
                whiptail --title "Node [IOTA] Update Check" --msgbox "[IOTA] Node update check $menuIotaNodeUpdateCheck." 8 70
            fi
        ;;
    esac
done
chown -R node:node $iotaNodePath/*.json