#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $hornetShimmerModules/hornetShimmerConfigs
    CHOICE=$(
        whiptail --title "Hornet Shimmer - Configurations" --menu "\nChoose an option" 28 65 0 \
        "1)" "Dashboard" \
        "2)" "API & JWT" \
        "3)" "Node Alias" \
        "4)" "DB Pruning" \
        "5)" "Proof of Work" \
        "6)" "Local Snapshots" \
        "7)" "Enable Plugins" \
        "8)" "Disable Plugins" \
        "9)" "P2P Identity" \
        "10)" "Database Revalidation" \
        "11)" "Gossip Port" \
        "12)" "Autopeering Port" \
        "13)" "Unknown Peers Limit" \
        "14)" "IOTA Network" \
        "15)" "Hornet release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartHornetShimmer" = "true" ]; then
            if (whiptail --title "Hornet Shimmer Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $hornetShimmerModules/hornetShimmerParser
                    echo 50
                    sudo systemctl restart hornet-shimmer
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartHornetShimmer
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet-shimmer.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet Shimmer - Dashboard" --menu "\nChoose an option" 16 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        hornetShimmerUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $hornetShimmerUsername --title "Hornet Shimmer - Dashboard" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$hornetShimmerUsername" ]; then
                                source $hornetShimmerConfigParsers/hornetShimmerDashboardUsername
                                if [ "$newHornetShimmerUsername" = "true" ]; then
                                    sudo sed -i 's/^hornetShimmerUsername=.*/hornetShimmerUsername="'$hornetShimmerUsername'"/' $swarmConfigs/hornet-shimmer.cfg
                                    whiptail --title "Hornet Shimmer - Dashboard" --msgbox "New username \"$hornetShimmerUsername\" applied!" 8 65
                                    unset newHornetUsername
                                else
                                    whiptail --title "Hornet Shimmer - Dashboard" --msgbox "No username change detected!" 8 65
                                fi
                            else
                                whiptail --title "Hornet Shimmer - Dashboardn" --msgbox "No valid username, please try again!" 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        source $hornetShimmerModules/hornetShimmerDashboardPwdGen
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet-shimmer.cfg
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet Shimmer - API & JWT" --menu "\nChoose an option" 20 65 0 \
                    "1)" "API Routes" \
                    "2)" "Generate new JWT token" \
                    "3)" "Show all JWT token" \
                    "4)" "Revoke all JWT token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/hornet-shimmer.cfg
                        hornetShimmerApiRoutes="$hornetShimmerApiProtectedRoutes"
                        source $hornetShimmerModules/hornetShimmerApiRoutes
                        hornetShimmerApiRoutes=$(whiptail --title "Hornet Shimmer - API routes" --checklist "\nSelect (using the spacebar) the Hornet API routes that you want to protect. All routes not selected will be public:" 28 65 11 \
                            "/health" "" $hornetShimmerApiRoutesHealth \
                            "/api/v2/info" "" $hornetShimmerApiRoutesInfo \
                            "/api/v2/tips" "" $hornetShimmerApiRoutesTips \
                            "/api/v2/messages*" "" $hornetShimmerApiRoutesMessages \
                            "/api/v2/transactions*" "" $hornetShimmerApiRoutesTransactions \
                            "/api/v2/milestones*" "" $hornetShimmerApiRoutesMilestones \
                            "/api/v2/outputs*" "" $hornetShimmerApiRoutesOutputs \
                            "/api/v2/addresses*" "" $hornetShimmerApiRoutesAddresses \
                            "/api/v2/treasury" "" $hornetShimmerApiRoutesTreasury \
                            "/api/v2/receipts*" "" $hornetShimmerApiRoutesReceipts \
                            "/api/plugins/debug/v1/*" "" $hornetShimmerApiRoutesDebug \
                            "/api/plugins/indexer/v1/*" "" $hornetShimmerApiRoutesIndexer \
                            "/api/plugins/mqtt/v1" "" $hornetShimmerApiRoutesMqtt \
                            "/api/plugins/participation/v1/events*" "" $hornetShimmerApiRoutesParticipationEvents \
                            "/api/plugins/participation/v1/outputs*" "" $hornetShimmerApiRoutesParticipationOutputs \
                            "/api/plugins/participation/v1/addresses*" "" $hornetShimmerApiRoutesParticipationAddresses 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        hornetShimmerApiRoutes=$(echo $hornetShimmerApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            hornetShimmerUpdateApiRoutes=true
                            source $hornetShimmerModules/hornetShimmerApiRoutes
                            source $hornetShimmerConfigParsers/hornetShimmerApiPublicRoutes
                            unset hornetShimmerUpdateApiRoutes
                        fi
                        unset hornetShimmerApiRoutes
                    ;;
                    "2)")
                        if (whiptail --title "Hornet Shimmer - API & JWT" --yesno --defaultno "Are you sure you want to generate a new JWT token?" 8 65); then
                            sudo systemctl stop hornet-shimmer
                            hornetShimmerApiJwtToken=$( cd $hornetShimmerHome ; /usr/bin/hornet-shimmer tools jwt-api | awk '{ print $5 }')
                            if [ ! -z "$hornetShimmerApiJwtToken" ]; then
                                sudo sed -i 's~^hornetShimmerApiJwtToken=.*~hornetShimmerApiJwtToken="'$hornetShimmerApiJwtToken'"~' $swarmConfigs/hornet-shimmer.cfg
                                echo $hornetShimmerApiJwtToken >> $swarmLogs/hornetShimmerJwtToken.log
                                clear
                                echo ""
                                echo $hornetShimmerApiJwtToken
                                echo ""
                                sudo systemctl start hornet-shimmer
                                read -n 1 -s -r -p "Press any key to continue"
                            else
                                sudo systemctl start hornet
                                whiptail --title "Hornet Shimmer - API & JWT" --msgbox "Error generating JWT token, please try again later." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        if [ -f "$swarmLogs/hornetShimmerJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/hornetShimmerJwtToken.log
                        else
                            whiptail --title "Hornet Shimmer - API & JWT" --msgbox "No JWT token log found, please generate one first!" 8 65
                        fi
                    ;;
                    "4)")
                        if (whiptail --title "Hornet Shimmer - API & JWT" --yesno --defaultno "Are you sure you want to revoke all JWT tokens?" 8 65); then
                            hornetShimmerApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                            sudo sed -i 's~^hornetShimmerApiJwtSalt=.*~hornetShimmerApiJwtSalt="'$hornetShimmerApiJwtSalt'"~' $swarmConfigs/hornet-shimmer.cfg
                            {
                                echo 0
                                echo 25
                                source $hornetShimmerConfigParsers/hornetShimmerApiJwtSalt
                                sudo rm -rf $swarmLogs/hornetShimmerJwt.log
                                echo 50
                                source $hornetShimmerConfigParsers/hornetShimmerIdentity
                                echo 75
                                sudo sed -i 's~^hornetShimmerApiJwtToken=.*~hornetShimmerApiJwtToken=""~' $swarmConfigs/hornet-shimmer.cfg
                                echo 100
                            } | whiptail --gauge "Please wait while all JWT tokens will be revoked..." 8 65 0
                            restartHornetShimmer=true
                            unset hornetShimmerApiJwtToken
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            hornetShimmerAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $hornetShimmerAlias --title "Hornet Shimmer - Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$hornetShimmerAlias" ]; then
                source $hornetShimmerConfigParsers/hornetShimmerAlias
                if [ "$newHornetShimmerAlias" = "true" ]; then
                    sudo sed -i 's~^hornetShimmerAlias=.*~hornetShimmerAlias="'$hornetShimmerAlias'"~' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - Alias" --msgbox "New alias \"$hornetShimmerAlias\" applied!" 8 65
                    unset newHornetAlias
                else
                    whiptail --title "Hornet Shimmer - Alias" --msgbox "No node alias change detected!" 8 65
                fi
            fi
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet-shimmer.cfg
                # Hornet Pruning
                if [ "$hornetShimmerPruningEnabled" = "true" ]; then
                    hornetShimmerPruningEnabledStatus=enabled
                else
                    hornetShimmerPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet Shimmer - Pruning" --menu "\nStatus: $hornetShimmerPruningEnabledStatus\n\nChoose an option" 20 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$hornetShimmerPruning" = "true" ]; then
                            hornetShimmerPruningStatus=enabled
                        else
                            hornetShimmerPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet Shimmer - Pruning" --menu "\nStatus: $hornetShimmerPruningEnabledStatus\n\nChoose an option" 16 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                hornetShimmerPruningEnabled=true
                                source $hornetShimmerConfigParsers/hornetShimmerPruningEnabled
                                sudo sed -i 's/^hornetShimmerPruningEnabeld=.*/hornetShimmerPruningEnabled='$hornetShimmerPruningEnabled'/' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                hornetShimmerPruningEnabled=false
                                source $hornetShimmerConfigParsers/hornetShimmerPruningEnabled
                                sudo sed -i 's/^hornetShimmerPruningEnabled=.*/hornetShimmerPruningEnabled='$hornetShimmerPruningEnabled'/' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        hornetShimmerPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $hornetShimmerPruningDatabaseSize --title "Hornet Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            hornetShimmerPruningDatabaseSize=${hornetShimmerPruningDatabaseSize//[!0-9]/}
                            if [ ! -z "$hornetShimmerPruningDatabaseSize" ] && [ $hornetShimmerPruningDatabaseSize -eq $hornetShimmerPruningDatabaseSize ] 2>/dev/null; then
                                source $hornetShimmerConfigParsers/hornetShimmerPruningDatabaseSize
                                sudo sed -i 's/^hornetShimmerPruningDatabaseSize=.*/hornetShimmerPruningDatabaseSize='$hornetShimmerPruningDatabaseSize'/' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Pruning" --msgbox "Pruning of the database set to ${hornetShimmerPruningDatabaseSize}GB!" 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentHornetShimmerPruningCooldownTime=$hornetShimmerPruningCooldownTime
                        hornetShimmerPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $hornetShimmerPruningCooldownTime --title "Hornet Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            hornetShimmerPruningCooldownTime=${hornetShimmerPruningCooldownTime//[!0-9]/}
                            if [ $hornetShimmerPruningCooldownTime -gt 0 ] && [ $hornetShimmerPruningCooldownTime -lt 60 ]; then
                                source $hornetShimmerConfigParsers/hornetShimmerPruningCooldownTime
                                sudo sed -i 's/^hornetShimmerPruningCooldownTime=.*/hornetShimmerPruningCooldownTime='$hornetShimmerPruningCooldownTime'/' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Pruning" --msgbox "Pruning cooldown time set to ${hornetShimmerPruningCooldownTime} minutes!" 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        hornetShimmerPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $hornetShimmerPruningPercentage --title "Hornet Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$hornetShimmerPruningPercentage" ] && [ $hornetShimmerPruningPercentage -eq $hornetShimmerPruningPercentage ]; then
                                source $hornetShimmerConfigParsers/hornetShimmerPruningPercentage
                                sudo sed -i 's/^hornetShimmerPruningPercentage=.*/hornetShimmerPruningPercentage='$hornetShimmerPruningPercentage'/' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Pruning" --msgbox "Pruning percentage set to ${hornetShimmerPruningPercentage}%!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            source $swarmConfigs/hornet-shimmer.cfg
            if [ "$hornetShimmerPowEnabled" = "true" ]; then
                hornetShimmerPowEnabledStatus=enabled
            else
                hornetShimmerPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet Shimmer - PoW" --menu "\nPOW: $hornetShimmerPowEnabledStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetShimmerPowEnabled=true
                    source $hornetShimmerConfigParsers/hornetShimmerPowEnabled
                    source $hornetShimmerConfigParsers/hornetShimmerPowWorkerCount
                    sudo sed -i 's/^hornetShimmerPowEnabled=.*/hornetShimmerPowEnabled='$hornetShimmerPowEnabled'/' $swarmConfigs/hornet-shimmer.cfg
                    sudo sed -i 's/^hornetShimmerPowWorkerCount=.*/hornetShimmerPowWorkerCount='$hornetShimmerPowWorkerCount'/' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    hornetShimmerPowEnabled=false
                    source $hornetShimmerConfigParsers/hornetShimmerPowEnabled
                    source $hornetShimmerConfigParsers/hornetShimmerPowWorkerCount
                    sudo sed -i 's/^hornetShimmerPowEnabled=.*/hornetShimmerPowEnabled='$hornetShimmerPowEnabled'/' $swarmConfigs/hornet-shimmer.cfg
                    sudo sed -i 's/^hornetShimmerPowWorkerCount=.*/hornetShimmerPowWorkerCount='$hornetShimmerPowWorkerCount'/' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "6)")
            source $swarmConfigs/hornet-shimmer.cfg
            hornetShimmerSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $hornetShimmerSnapshotInterval --title "Hornet Shimmer - Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetShimmerSnapshotInterval" ] && [ $hornetShimmerSnapshotInterval -eq $hornetShimmerSnapshotInterval ] 2>/dev/null; then
                    source $hornetShimmerConfigParsers/hornetShimmerSnapshotInterval
                    sudo sed -i 's/^hornetShimmerSnapshotInterval=.*/hornetShimmerSnapshotInterval='$hornetShimmerSnapshotInterval'/' $swarmConfigs/hornet-shimmer.cfg
                    if [ "$newHornetSnapshotInterval" = "true" ]; then
                        whiptail --title "Hornet Shimmer - Snapshots" --msgbox "Snapshot interval changed to $hornetShimmerSnapshotInterval milestones!" 8 65
                    else
                        whiptail --title "Hornet Shimmer - Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                    fi
                fi
            fi
        ;;
        "7)")
            useHornetShimmerEnablePlugins=true
            source $swarmConfigs/hornet-shimmer.cfg
            currentHornetShimmerEnablePlugins=$hornetShimmerEnablePlugins
            source $hornetShimmerModules/hornetShimmerPlugins
            hornetEnablePlugins=$(whiptail --title "Hornet Shimmer - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be activated:" 20 78 5 \
                "Autopeering" "plugin for automatic peering" $hornetShimmerPluginAutopeering \
                "Participation" "plugin for voting/staking" $hornetShimmerPluginParticipation \
                "MQTT" "plugin to stream messages" $hornetShimmerPluginMqtt \
                "Prometheus" "plugin is used for metrics e.g. in Grafana" $hornetShimmerPluginPrometheus 3>&1 1>&2 2>&3)
            exitStatus=$?
            hornetShimmerEnablePlugins=$(echo $hornetShimmerEnablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$hornetShimmerEnablePlugins" ] || [[ $hornetShimmerEnablePlugins = *autopeering* ]] || [[ $hornetShimmerEnablePlugins = *participation* ]] || [[ $hornetShimmerEnablePlugins = *mqtt* ]] || [[ $hornetShimmerEnablePlugins = *prometheus* ]]; then
                if [ "$hornetShimmerEnablePlugins" != "$currentHornetShimmerEnablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    source $hornetShimmerConfigParsers/hornetShimmerEnablePlugins
                    sudo sed -i 's/^hornetShimmerEnablePlugins=.*/hornetShimmerEnablePlugins="'$hornetShimmerEnablePlugins'"/' $swarmConfigs/hornet-shimmer.cfg
                    if [ ! -z "$hornetShimmerEnablePlugins" ]; then
                        whiptail --title "Hornet Shimmer - Plugins" --msgbox "The following plugins are enabled:\n$hornetShimmerEnablePlugins" 14 65
                    else
                        whiptail --title "Hornet Shimmer - Plugins" --msgbox "There are no plugins enabled for Hornet!" 8 65
                    fi
                fi
                unset hornetShimmerEnablePlugins
            fi
            unset useHornetShimmerEnablePlugins
        ;;
        "8)")
            useHornetDisablePlugins=true
            source $swarmConfigs/hornet-shimmer.cfg
            currentHornetDisablePlugins=$hornetDisablePlugins
            source $hornetModules/hornetPlugins
            hornetShimmerDisablePlugins=$(whiptail --title "Hornet Shimmer - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be deactivated:" 10 78 1 \
                "Warpsync" "plugin to sync more faster" $hornetShimmerPluginWarpsync 3>&1 1>&2 2>&3)
            exitStatus=$?
            hornetShimmerDisablePlugins=$(echo $hornetShimmerDisablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$hornetShimmerDisablePlugins" ] || [[ $hornetShimmerDisablePlugins = *warpsync* ]]; then
                if [ "$hornetShimmerDisablePlugins" != "$currentHornetShimmerDisablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    source $hornetShimmerConfigParsers/hornetShimmerDisablePlugins
                    sudo sed -i 's/^hornetShimmerDisablePlugins=.*/hornetShimmerDisablePlugins="'$hornetShimmerDisablePlugins'"/' $swarmConfigs/hornet-shimmer.cfg
                    if [ ! -z "$hornetShimmerDisablePlugins" ]; then
                        whiptail --title "Hornet Shimmer - Plugins" --msgbox "The following plugins are disabled:\n$hornetShimmerDisablePlugins" 14 65
                    else
                        whiptail --title "Hornet Shimmer - Plugins" --msgbox "There are no plugins disabled for Hornet!" 8 65
                    fi
                fi
            else
                unset hornetShimmerDisablePlugins
            fi
            unset useHornetShimmerDisablePlugins
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet-shimmer.cfg
                hornetVersion=$(/usr/bin/hornet-shimmer -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet Shimmer - Identity" --menu "\nChoose an option" 18 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/hornet-shimmer.cfg
                        currentHornetShimmerIdentity=$hornetIdentity
                        hornetShimmerIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet Shimmer - Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$hornetShimmerIdentity" != "$currentHornetShimmerIdentity" ] && [ ! -z "$hornetShimmerIdentity" ]; then
                                source $hornetShimmerConfigParsers/hornetShimmerIdentity
                                sudo sed -i 's~^hornetShimmerIdentity=.*~hornetShimmerIdentity="'$hornetShimmerIdentity'"~' $swarmConfigs/hornet-shimmer.cfg
                                whiptail --title "Hornet Shimmer - Identity" --msgbox "The following Identity key was set: \n$hornetShimmerIdentity!" 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Hornet Shimmer - Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                            unset hornetShimmerIdentity
                            sudo rm -rf $hornetShimmerHome/p2pstore/identity.key 2>/dev/null
                            source $hornetShimmerConfigParsers/hornetShimmerIdentity
                            whiptail --title "Hornet Shimmer - Identity" --msgbox "The following p2pIdentity key was set: \n$hornetShimmerIdentity" 12 65
                            source $swarmConfigs/hornet-shimmer.cfg
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/hornet-shimmer.cfg
            if [ "$hornetShimmerAutoRevalidation" = "true" ]; then
                hornetShimmerAutoRevalidationStatus=enabled
            else
                hornetShimmerAutoRevalidationStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet Shimmer - DB Revalidation" --menu "\nDatabase Revalidation: $hornetShimmerAutoRevalidationStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable DB revalidation" \
                "2)" "Disable DB revalidation" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetShimmerAutoRevalidation=true
                    sudo sed -i 's/^hornetShimmerAutoRevalidation=.*/hornetShimmerAutoRevalidation=true/' $swarmConfigs/hornet-shimmer.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet Shimmer - DB Revalidation" --msgbox "Hornet DB Revalidation enabled!" 8 65
                ;;
                "2)")
                    hornetShimmerAutoRevalidation=false
                    sudo sed -i 's/^hornetShimmerAutoRevalidation=.*/hornetShimmerAutoRevalidation=false/' $swarmConfigs/hornet-shimmer.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet Shimmer - DB Revalidation" --msgbox "Hornet DB Revalidation disabled!" 8 65
                ;;
            esac
        ;;
        "11)")
            source $swarmConfigs/hornet-shimmer.cfg
            currentHornetShimmerGossipPort=$hornetShimmerGossipPort
            hornetShimmerGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $hornetShimmerGossipPort --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetShimmerGossipPort" ] && [ "$currentHornetShimmerGossipPort" != "$hornetShimmerGossipPort" ] && [ $hornetShimmerGossipPort -eq $hornetShimmerGossipPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentHornetShimmerGossipPort/tcp > /dev/null 2>&1
                        sudo ufw allow $hornetShimmerGossipPort/tcp > /dev/null 2>&1
                    fi
                    source $hornetShimmerConfigParsers/hornetShimmerGossipPort
                    sudo sed -i 's/^hornetShimmerGossipPort=.*/hornetShimmerGossipPort='$hornetShimmerGossipPort'/' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - Gossip" --msgbox "Gossip port set to \"$hornetShimmerGossipPort/tcp\"!" 8 65
                    restartHornetShimmer=true
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/hornet-shimmer.cfg
            currentHornetShimmerAutopeeringPort=$hornetShimmerAutopeeringPort
            hornetShimmerAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $hornetShimmerAutopeeringPort --title "Hornet Shimmer - Autopeering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetShimmerAutopeeringPort" ] && [ "$currentHornetShimmerAutopeeringPort" != "$hornetShimmerAutopeeringPort" ] && [ $hornetShimmerAutopeeringPort -eq $hornetShimmerAutopeeringPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentHornetShimmerAutopeeringPort/udp > /dev/null 2>&1
                        sudo ufw allow $hornetShimmerAutopeeringPort/udp > /dev/null 2>&1
                    fi
                    source $hornetShimmerConfigParsers/hornetShimmerAutopeeringPort
                    sudo sed -i 's/^hornetShimmerAutopeeringPort=.*/hornetShimmerAutopeeringPort='$hornetShimmerAutopeeringPort'/' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - Autopeering" --msgbox "Autopeering port set to \"$hornetShimmerAutopeeringPort/udp\"!" 8 65
                fi
            fi
        ;;
        "13)")
            source $swarmConfigs/hornet-shimmer.cfg
            currentHornetShimmerUnknownPeersLimit=$hornetShimmerUnknownPeersLimit
            hornetShimmerUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentHornetShimmerUnknownPeersLimit --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ "$currentHornetShimmerUnknownPeersLimit" != "$hornetShimmerUnknownPeersLimit" ] && [ $hornetShimmerUnknownPeersLimit -eq $hornetShimmerUnknownPeersLimit ] && [ ! -z "$hornetShimmerUnknownPeersLimit" ] 2>/dev/null; then
                    source $hornetShimmerConfigParsers/hornetShimmerGossipUnknownPeersLimit
                    sudo sed -i 's/^hornetShimmerUnknownPeersLimit=.*/hornetShimmerUnknownPeersLimit='$hornetShimmerUnknownPeersLimit'/' $swarmConfigs/hornet-shimmer.cfg
                    whiptail --title "Hornet Shimmer - Gossip" --msgbox "Maximum of unknown neighbors set to \"$hornetShimmerUnknownPeersLimit\"." 8 65
                fi
            fi
        ;;
        "14)")
            source $hornetModules/hornetConfigs
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet Shimmer - Network" --menu "\nCurrent network: $hornetShimmerNetwork\n\nChoose an option" 18 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Comnet (dev)" \
                "3)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentHornetShimmerNetwork=$hornetShimmerNetwork
                        hornetShimmerNetwork=mainnet
                        sudo sed -i 's/^hornetShimmerNetwork=.*/hornetShimmerNetwork='$hornetShimmerNetwork'/' $swarmConfigs/hornet-shimmer.cfg
                        source $hornetShimmerModules/hornetShimmerNetwork
                    fi
                ;;
                "2)")
                    if [ "comnetOnline" = "true" ]; then
                        if (whiptail --title "Hornet Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to comnet (the old database will be deleted)?" 8 65); then
                            currentHornetShimmerNetwork=$hornetShimmerNetwork
                            hornetShimmerNetwork=comnet
                            sudo sed -i 's/^hornetShimmerNetwork=.*/hornetShimmerNetwork='$hornetShimmerNetwork'/' $swarmConfigs/hornet-shimmer.cfg
                            source $hornetShimmerModules/hornetShimmerNetwork
                        fi
                    else
                        whiptail --title "Hornet - Network" --msgbox "The Comnet is currently unavailable, please try again later." 8 65
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentHornetShimmerNetwork=$hornetShimmerNetwork
                        hornetShimmerNetwork=testnet
                        sudo sed -i 's/^hornetShimmerNetwork=.*/hornetShimmerNetwork='$hornetShimmerNetwork'/' $swarmConfigs/hornet-shimmer.cfg
                        source $hornetShimmerModules/hornetShimmerNetwork
                    fi
                ;;
            esac
        ;;
        "15)")
            source $swarmConfigs/hornet-shimmer.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet Shimmer - Release" --menu "\nSet \"stable\" for official release or \"testing\" for releases under development\n\nChoose an option" 16 65 0 \
                "1)" "Stable Channel (default)" \
                "2)" "Testing Channel (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet Shimmer - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (hornet will be reinstalled)?" 8 65); then
                        currentHornetShimmerRelease=$hornetShimmerRelease
                        hornetShimmerRelease=stable
                        sudo sed -i 's/^hornetRelease=.*/hornetRelease='$hornetRelease'/' $swarmConfigs/hornet-shimmer.cfg
                        source $hornetShimmerModules/hornetShimmerReleaseChannel
                        source $hornetShimmerModules/hornetShimmerParser
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet Shimmer - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"testing\" (hornet will be reinstalled)?" 8 65); then
                        currentHornetShimmerRelease=$hornetShimmerRelease
                        hornetShimmerRelease=testing
                        sudo sed -i 's/^hornetShimmerRelease=.*/hornetShimmerRelease='$hornetShimmerRelease'/' $swarmConfigs/hornet-shimmer.cfg
                        source $hornetShimmerModules/hornetShimmerReleaseChannel
                        source $hornetShimmerModules/hornetShimmerParser
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R hornet:hornet $hornetShimmerHome/*.json
exitCode=0