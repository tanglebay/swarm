#!/bin/bash
if [ -f "/usr/bin/hornet-shimmer" ]; then

    source $swarmConfigs/hornet-shimmer.cfg

    hornetShimmerStatus=$(systemctl show -p ActiveState --value hornet-shimmer)

    hornetShimmerVersion=$(/usr/bin/hornet-shimmer -v | awk '{ print $2 }')
    if [ -z "$hornetShimmerVersion" ]; then
        hornetVersion="N/A"
    fi

    if [ "$hornetShimmerStatus" = "active" ]; then
        hornetShimmerHealthy="$(curl --max-time 2 -s -X GET "http://localhost:14267/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetShimmerApiJwtToken}"|jq -r '.data.isHealthy' 2> /dev/null)"
        if [ -z "$hornetShimmerHealthy" ]; then
            hornetShimmerHealthy="N/A"
        else
            if [ "$hornetShimmerHealthy" = "true" ]; then
                hornetShimmerHealthy="Yes"
            else
                hornetShimmerHealthy="No"
            fi
        fi
    else
        hornetShimmerHealthy="N/A"
    fi

    # DB size
    if [ -d "$hornetShimmerHome/${hornetShimmerNetwork}db" ]; then
        getCurrentDbSize="$(du -sb $hornetShimmerHome/${hornetShimmerNetwork}db | cut -f1)"
        let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
        if [ $getCurrentDbSizeInMb -gt 999 ]; then
            let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
            currentHornetDbSize="${getCurrentDbSizeInGb} GB"
        else
            currentHornetDbSize="${getCurrentDbSizeInMb} MB"
        fi
    else
        currentHornetDbSize="N/A"
    fi

    if [ "$hornetShimmerAutoRevalidation" = "true" ]; then
        hornetShimmerAutoRevalidationStatus=enabled
    else
        hornetShimmerAutoRevalidationStatus=disabled
    fi

    if [ "$hornetShimmerPruningEnabled" = "true" ]; then
        hornetShimmerPruningEnabledStatus=enabled
    else
        hornetShimmerPruningEnabledStatus=disabled
    fi

    if [ "$hornetShimmerPowEnabled" = "true" ]; then
        hornetShimmerPowEnabledStatus=active
    else
        hornetShimmerPowEnabledStatus=inactive
    fi

    if [ -f "/etc/nginx/sites-enabled/hornet-shimmer" ]; then
        hornetShimmerProxyStatus=active
    else
        hornetShimmerProxyStatus=inactive
    fi

    # OUTPUT
    whiptail --title "Hornet Shimmer - Info" --msgbox "Hornet: $hornetShimmerStatus\nVersion: v$hornetShimmerVersion\nNetwork: $hornetShimmerNetwork\nHealthy: $hornetShimmerHealthy\nDB size: $currentHornetShimmerDbSize\nProxy: $hornetShimmerProxyStatus\n\nAlias: $hornetShimmerAlias\nPoW: $hornetShimmerPowEnabledStatus\nLS Interval: $hornetShimmerSnapshotInterval milestones\nGossip Port: ${hornetShimmerGossipPort}/tcp\nAutopeering Port: ${hornetShimmerAutopeeringPort}/udp\nDB Revalidation: $hornetShimmerAutoRevalidation\n\nPruning: $hornetShimmerPruningEnabledStatus\nMax DB size: ${hornetShimmerPruningDatabaseSize} GB\nPruning percentage: ${hornetShimmerPruningPercentage}%\nPruning Cooldown: $hornetShimmerPruningCooldownTime minutes\n\nEnabled Plugins: \"$hornetShimmerEnablePlugins\"\nDisabled Plugins: \"$hornetShimmerDisablePlugins\"" 32 68
else
    # OUTPUT
    whiptail --title "Hornet Shimmer - Info" --msgbox "Hornet not installed!" 8 65
fi
