#!/bin/bash

if [ -f "/usr/bin/goshimmer" ]; then

    source $swarmConfigs/goshimmer.cfg

    goshimmerStatus=$(systemctl show -p ActiveState --value goshimmer)

    goshimmerVersion=$(cd $goshimmerHome ; /usr/bin/goshimmer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$goshimmerVersion" ]; then
        goshimmerVersion="N/A"
    else
        if [ "$goshimmerVersion" != "$latestGoshimmerVersion" ] && [ ! -z "$latestGoshimmerVersion" ]; then
            goshimmerVersion="$goshimmerVersion (new version \"v$latestGoshimmerVersion\" available!"
        fi
    fi

    if [ "$goshimmerStatus" = "active" ]; then
        goshimmerSyncedStatus="$(curl --max-time 2 -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq -r '.tangleTime.synced' 2> /dev/null)"
        if [ -z "$goshimmerSyncedStatus" ] || [ "$goshimmerSyncedStatus" = "null" ]; then
            goshimmerSyncedStatus="N/A"
        else
            if [ "$goshimmerSyncedStatus" = "true" ]; then
                goshimmerSyncedStatus="✓"
            else
                goshimmerSyncedStatus="X"
            fi
        fi

        goshimmerPledgeId="$(curl --max-time 2 -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq -r '.identityID' 2> /dev/null)"
        if [ -z "$goshimmerPledgeId" ] || [ "$goshimmerPledgeId" = "null" ]; then
            goshimmerPledgeId="N/A"
        fi
    else
        goshimmerSyncedStatus="N/A"
        goshimmerPledgeId="N/A"
    fi

    # DB size
    if [ -d "$goshimmerHome/mainnetdb" ]; then
        getCurrentDbSize="$(du -sb $goshimmerHome/mainnetdb | cut -f1)"
        let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
        if [ $getCurrentDbSizeInMb -gt 999 ]; then
            let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
            currentDbSize="${getCurrentDbSizeInGb} GB"
        else
            currentDbSize="${getCurrentDbSizeInMb} MB"
        fi
    else
        currentDbSize="N/A"
    fi

    if [ "$goshimmerDashboardAuthEnabled" = "true" ]; then
        goshimmerDashboardAuthEnabledStatus="✓"
    else
        goshimmerDashboardAuthEnabledStatus="X"
    fi

    if [ "$goshimmerWebapiAuthEnabled" = "true" ]; then
        goshimmerWebapiAuthEnabledStatus="✓"
    else
        goshimmerWebapiAuthEnabledStatus="X"
    fi

    if [ -f "/etc/nginx/sites-enabled/goshimmer" ]; then
        goshimmerProxyStatus="✓"
    else
        goshimmerProxyStatus="X"
    fi

    # OUTPUT
    whiptail --scrolltext --title "GoShimmer [RESEARCH] Info" --msgbox "Goshimmer: $goshimmerStatus\nVersion: $goshimmerVersion\nSynced: $goshimmerSyncedStatus\nDB size: $currentDbSize\nProxy: $goshimmerProxyStatus\n\nDashboard-Auth: $goshimmerDashboardAuthEnabledStatus\nWebAPI-Auth: $goshimmerWebapiAuthEnabledStatus\n\nGossip Port: ${goshimmerGossipPort}/tcp\nAutopeering Port: ${goshimmerAutopeeringPort}/udp\n\nEnabled Plugins: \"$goshimmerEnablePlugins\"\nDisabled Plugins: \"$goshimmerDisablePlugins\"\n\nPledgeID: $goshimmerPledgeId" 24 65
else
    # OUTPUT
    whiptail --title "GoShimmer [RESEARCH] Info" --msgbox "GoShimmer not installed!" 8 65
fi
