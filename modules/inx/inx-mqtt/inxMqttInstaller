#!/bin/bash

# General
if ! id inx >/dev/null 2>&1; then
    useradd --no-create-home --system inx >/dev/null
fi

if [ ! -d "$inxMqttHome" ]; then
    sudo mkdir -p $inxMqttHome > /dev/null 2>&1
    sudo chown -R inx:inx $inxMqttHome > /dev/null 2>&1
fi

# Install GO
if ! [ -x "$(command -v go)" ] > /dev/null 2>&1; then
    sudo snap install go --classic > /dev/null 2>&1
fi

# Create Service
if [ ! -f "/lib/systemd/system/inx-mqtt.service" ]; then
    sudo cp -rf $swarmHome/templates/inx/inx-mqtt.service /lib/systemd/system/inx-mqtt.service
    if [ ! -f "/etc/default/inx-mqtt" ]; then
        echo "OPTIONS=\"--config config.json\"" > /etc/default/inx-mqtt
    fi
    if [ ! -f "/etc/systemd/system/multi-user.target.wants/inx-mqtt.service" ]; then
        sudo systemctl enable inx-mqtt > /dev/null 2>&1
    fi
    sudo systemctl daemon-reload > /dev/null 2>&1
fi

##############################################################################################################################################

# Create dir if not exist
sudo mkdir -p /tmp/inx-mqtt > /dev/null 2>&1

if [ "$osArchitecture" = "amd64" ] && [ "$osArchitecture" = "arm64" ]; then
    source $swarmModules/swarmAuth
    if [ "$swarmAuth" = "200" ]; then
        # Download latest inx-mqtt
        ( cd /tmp/inx-mqtt/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$swarmUrl/download/inx/inx-mqtt/v${latestInxMqttVersion}/inx-mqtt-v${latestInxMqttVersion}_linux_$osArchitecture.tar.gz )
        if [ -f "/tmp/inx-mqtt/inx-mqtt-v${latestInxMqttVersion}_linux_$osArchitecture.tar.gz" ]; then
            inxMqttDownloadChecksum=$(sudo shasum -a 512 /tmp/inx-mqtt/inx-mqtt-v${latestInxMqttVersion}_linux_$osArchitecture.tar.gz | awk '{ print $1 }')
        fi

        # Download checksum
        ( cd /tmp/inx-mqtt/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$swarmUrl/download/inx/inx-mqtt/v${latestInxMqttVersion}/checksums.txt )
        inxMqttChecksum=$(sudo grep "inx-mqtt-v${latestInxMqttVersion}_linux_$osArchitecture.tar.gz" /tmp/inx-mqtt/checksums.txt | awk '{ print $1 }')
        echo $inxMqttChecksum > /tmp/inx-mqtt.checksum

        # Unzip archive
        if [ "$inxMqttDownloadChecksum" = "$inxMqttChecksum" ] && [ ! -z "$inxMqttDownloadChecksum" ] && [ ! -z "$inxMqttChecksum" ]; then
            ( cd /tmp/inx-mqtt ; sudo tar -xzf /tmp/inx-mqtt/inx-mqtt-v${latestInxMqttVersion}_linux_$osArchitecture.tar.gz ) > /dev/null 2>&1

            # Copy binary
            if [ -f "/tmp/inx-mqtt/inx-mqtt" ]; then
                inxMqttStatus="$(systemctl show -p ActiveState --value inx-mqtt)"
                if [ "$inxMqttStatus" = "active" ]; then
                    sudo systemctl stop inx-mqtt > /dev/null 2>&1
                fi

                sudo cp -rf /tmp/inx-mqtt/inx-mqtt /usr/bin/inx-mqtt > /dev/null 2>&1
                sudo chmod +x /usr/bin/inx-mqtt > /dev/null 2>&1
                newInxMqttBinary=true
            fi
        fi
    fi
fi

##############################################################################################################################################

if [ "$newInxMqttBinary" = "true" ]; then
    if [ -f "/tmp/inx-mqtt/config_template.json" ]; then
        sudo cp -rf /tmp/inx-mqtt/config_template.json /var/lib/inx-mqtt/config.json > /dev/null 2>&1
        newInxMqttConfig=true
    fi
    if [ -f "/tmp/inx-mqtt/config.json" ]; then
        sudo cp -rf /tmp/inx-mqtt/config.json /var/lib/inx-mqtt/config.json > /dev/null 2>&1
        newInxMqttConfig=true
    fi
fi

##############################################################################################################################################

if [ "$newInxMqttConfig" = "true" ]; then
    # Run installer modules
    sudo chown -R inx:inx $inxMqttHome > /dev/null 2>&1

    restartInxMqtt=true
    inxMqttUpdated=true
fi

# Remove temporary files
sudo rm -rf /tmp/inx-mqtt > /dev/null 2>&1


unset newInxMqttBinary newInxMqttConfig inxMqttDownloadChecksum