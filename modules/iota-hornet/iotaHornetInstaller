#!/bin/bash

if [[ $latestIotaHornetVersion =~ ^2.* ]]; then
    echo "IOTA HORNET INSTALLER" > /tmp/iotaHornetInstaller.log
    # General
    if ! id hornet >/dev/null 2>&1; then
        echo "-> Adde user \"hornet\"" >> /tmp/iotaHornetInstaller.log
        useradd --no-create-home --system hornet >/dev/null
    fi

    if [ ! -d "$iotaHornetHome" ]; then
        sudo mkdir -p $iotaHornetHome > /dev/null 2>&1
        sudo chown -R hornet:hornet $iotaHornetHome > /dev/null 2>&1
        echo "-> Create hornet home: $iotaHornetHome" >> /tmp/iotaHornetInstaller.log
    fi

    # Install GO
    if ! [ -x "$(command -v go)" ] > /dev/null 2>&1; then
        sudo snap install go --classic > /dev/null 2>&1
        echo "-> Install snap go package" >> /tmp/iotaHornetInstaller.log
    fi

    # Create Service
    if [ ! -f "/lib/systemd/system/iota-hornet.service" ]; then
        sudo cp -rf $swarmTemplates/app-service/iota-hornet.service /lib/systemd/system/iota-hornet.service > /dev/null 2>&1
        echo "-> Add new service file for IOTA Hornet" >> /tmp/iotaHornetInstaller.log
        if [ ! -f "/etc/systemd/system/multi-user.target.wants/iota-hornet.service" ]; then
            sudo systemctl enable iota-hornet > /dev/null 2>&1
            echo "-> Enable service for IOTA Hornet" >> /tmp/iotaHornetInstaller.log
        fi
        sudo systemctl daemon-reload
    fi

    if [ ! -f "/etc/default/iota-hornet" ]; then
        echo "OPTIONS=\"--config config_mainnet.json\"" > /etc/default/iota-hornet
        echo "-> Create default file for the IOTA Hornet service" >> /tmp/iotaHornetInstaller.log
    else
        iotaHornetDefaultCheck=$(cat /etc/default/iota-hornet)
        if [[ $iotaHornetDefaultCheck != *config_mainnet.json* ]]; then
            echo "OPTIONS=\"--config config_mainnet.json\"" > /etc/default/iota-hornet
            echo "-> Replace old config.json and set config_mainnet.json" >> /tmp/iotaHornetInstaller.log
        fi
    fi

    if [ -d "$iotaHornetHome" ]; then
        if [ ! -d "$iotaHornetHome/$iotaHornetNetwork" ]; then
            sudo -u hornet mkdir -p $iotaHornetHome/$iotaHornetNetwork > /dev/null 2>&1
            echo "-> Create new folder for db, snapshots and identity" >> /tmp/iotaHornetInstaller.log
        fi
        if [ "$iotaHornetKeepChrysalisDatabase" = "false" ] && [ -d "$iotaHornetHome/${iotaHornetNetwork}db" ]; then
            if [ -d "$iotaHornetHome/${iotaHornetNetwork}db/tangle" ]; then
                sudo rm -rf $iotaHornetHome/${iotaHornetNetwork}db/tangle > /dev/null 2>&1
                echo "-> Delete $iotaHornetNetwork tangle database folder" >> /tmp/iotaHornetInstaller.log
            fi
            if [ -d "$iotaHornetHome/${iotaHornetNetwork}db/utxo" ]; then
                sudo rm -rf $iotaHornetHome/${iotaHornetNetwork}db/utxo > /dev/null 2>&1
                echo "-> Delete $iotaHornetNetwork utxo database folder" >> /tmp/iotaHornetInstaller.log
            fi
        fi
        if [ "$iotaHornetKeepChrysalisParticipationDatabase" = "false" ] && [ -d "$iotaHornetHome/${iotaHornetNetwork}db/participation" ]; then
            sudo rm -rf $iotaHornetHome/${iotaHornetNetwork}db/participation > /dev/null 2>&1
            echo "-> Delete $iotaHornetNetwork event database folder" >> /tmp/iotaHornetInstaller.log
        fi
        if [ -d "$iotaHornetHome/p2pstore" ] && [ ! -d "$iotaHornetHome/$iotaHornetNetwork/p2pstore" ]; then
            sudo -u hornet mv $iotaHornetHome/p2pstore $iotaHornetHome/$iotaHornetNetwork/ > /dev/null 2>&1
            echo "-> Move $iotaHornetNetwork p2pstore folder to new location: $iotaHornetHome/$iotaHornetNetwork/p2pstore" >> /tmp/iotaHornetInstaller.log
        fi
    fi

    ##############################################################################################################################################

    source $swarmModule/swarmAuth
    if [ "$swarmAuth" = "200" ]; then
        # Create dir if not exist
        sudo mkdir -p /tmp/iota-hornet > /dev/null 2>&1

        # Download latest iota-hornet
        ( cd /tmp/iota-hornet/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$cdnUrl/hornet/v${latestIotaHornetVersion}/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz )
        if [ -f "/tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz" ]; then
            iotaHornetDownloadChecksum=$(sudo shasum -a 512 /tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz | awk '{ print $1 }')
        fi

        # Download checksum
        ( cd /tmp/iota-hornet/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$cdnUrl/hornet/v${latestIotaHornetVersion}/hornet_checksums_linux_$osArchitecture.txt )
        iotaHornetChecksum=$(sudo cat /tmp/iota-hornet/hornet_checksums_linux_$osArchitecture.txt | awk '{ print $1 }')
        echo $iotaHornetChecksum > /tmp/iota-hornet.checksum

        # Unzip archive
        if [ "$iotaHornetDownloadChecksum" = "$iotaHornetChecksum" ] && [ ! -z "$iotaHornetDownloadChecksum" ] && [ ! -z "$iotaHornetChecksum" ]; then
            ( cd /tmp/iota-hornet ; sudo tar -xzf /tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz ) > /dev/null 2>&1

            # Copy binary
            if [ -f "/tmp/iota-hornet/hornet" ]; then
                iotaHornetStatus="$(systemctl show -p ActiveState --value iota-hornet)"
                if [ "$iotaHornetStatus" = "active" ]; then
                    sudo systemctl stop iota-hornet > /dev/null 2>&1
                fi

                sudo cp -rf /tmp/iota-hornet/hornet /usr/bin/iota-hornet > /dev/null 2>&1
                sudo chmod +x /usr/bin/iota-hornet > /dev/null 2>&1
                newIotaHornetBinary=true
            fi
        fi
    fi

    ##############################################################################################################################################

    if [ "$newIotaHornetBinary" = "true" ]; then
        ### Mainnet Config
        if [ "$iotaHornetNetwork" = "mainnet" ]; then
            if [ -f "/tmp/iota-hornet/hornet-${latestIotaHornetVersion}_Linux_$osArchitecture/config_defaults.json" ]; then
                echo "-> Copy new config file: $iotaHornetHome/config_mainnet.json" >> /tmp/iotaHornetInstaller.log
                sudo cp -rf /tmp/iota-hornet/hornet-${latestIotaHornetVersion}_Linux_$osArchitecture/config_defaults.json $iotaHornetHome/config_mainnet.json > /dev/null 2>&1
                if [ -s "$iotaHornetHome/config_mainnet.json" ]; then
                    newIotaHornetConfig=true
                fi
            else
                echo "-> New config file not found. Downloading new config from GitHub. Repository: Hornet, Branch: production" >> /tmp/iotaHornetInstaller.log
                sudo -u hornet wget -q -O $iotaHornetHome/config_mainnet.json https://raw.githubusercontent.com/iotaledger/hornet/production/config.json
                iotaHornetConfigMainnetCheck=$(cat $iotaHornetHome/config_mainnet.json)
                if [ -f "$iotaHornetHome/config_mainnet.json" ] && [ ! -z "$iotaHornetConfigMainnetCheck" ]; then
                    newIotaHornetConfig=true
                fi
                unset iotaHornetConfigMainnetCheck
            fi
        fi
    fi

    ##############################################################################################################################################

    if [ "$newIotaHornetConfig" = "true" ]; then
        # Run installer modules
        echo "-> Set permissions for [IOTA] Hornet" >> /tmp/iotaHornetInstaller.log
        sudo chown -R hornet:hornet $iotaHornetHome > /dev/null 2>&1
        sudo chmod 644 $iotaHornetHome/*.json > /dev/null 2>&1

        restartIotaHornet=true
        iotaHornetUpdated=true
        echo "-> Hornet v${latestIotaHornetVersion} installation completed." >> /tmp/iotaHornetInstaller.log
    fi

    # Remove temporary files
    if [ -d "/tmp/iota-hornet" ]; then
        echo "-> Clean up tmp folder: /tmp/iota-hornet"
        sudo rm -rf /tmp/iota-hornet > /dev/null 2>&1
    fi

    echo "-> Exit installer."
    unset newIotaHornetBinary newIotaHornetConfig iotaHornetDownloadChecksum
else
    # General
    if ! id hornet >/dev/null 2>&1; then
        useradd --no-create-home --system hornet >/dev/null
    fi

    if [ ! -d "$iotaHornetHome" ]; then
        sudo mkdir -p $iotaHornetHome > /dev/null 2>&1
        sudo chown -R hornet:hornet $iotaHornetHome > /dev/null 2>&1
    fi

    # Install GO
    if ! [ -x "$(command -v go)" ] > /dev/null 2>&1; then
        sudo snap install go --classic > /dev/null 2>&1
    fi

    if [ ! -f "/etc/default/iota-hornet" ]; then
        echo "OPTIONS=\"--config config_mainnet.json\"" > /etc/default/iota-hornet
        echo "-> Create default file for the IOTA Hornet service" >> /tmp/iotaHornetInstaller.log
    else
        iotaHornetDefaultCheck=$(cat /etc/default/iota-hornet)
        if [[ $iotaHornetDefaultCheck != *config_mainnet.json* ]]; then
            echo "OPTIONS=\"--config config_mainnet.json\"" > /etc/default/iota-hornet
            echo "-> Replace old config.json and set config_mainnet.json" >> /tmp/iotaHornetInstaller.log
        fi
    fi

    # Create Service
    if [ ! -f "/lib/systemd/system/iota-hornet.service" ]; then
        sudo cp -rf $swarmTemplates/app-service/iota-hornet.service /lib/systemd/system/iota-hornet.service > /dev/null 2>&1
        if [ ! -f "/etc/systemd/system/multi-user.target.wants/iota-hornet.service" ]; then
            sudo systemctl enable iota-hornet > /dev/null 2>&1
        fi
        sudo systemctl daemon-reload
    fi

    ##############################################################################################################################################

    source $swarmModule/swarmAuth
    if [ "$swarmAuth" = "200" ]; then
        # Create dir if not exist
        sudo mkdir -p /tmp/iota-hornet > /dev/null 2>&1

        # Download latest iota-hornet
        ( cd /tmp/iota-hornet/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$cdnUrl/hornet/v${latestIotaHornetVersion}/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz )
        if [ -f "/tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz" ]; then
            iotaHornetDownloadChecksum=$(sudo shasum -a 512 /tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz | awk '{ print $1 }')
        fi

        # Download checksum
        ( cd /tmp/iota-hornet/ ; sudo wget -q https://$swarmAuthUser:$swarmAuthPwd@$cdnUrl/hornet/v${latestIotaHornetVersion}/hornet_checksums_linux_$osArchitecture.txt )
        iotaHornetChecksum=$(sudo cat /tmp/iota-hornet/hornet_checksums_linux_$osArchitecture.txt | awk '{ print $1 }')
        echo $iotaHornetChecksum > /tmp/iota-hornet.checksum

        # Unzip archive
        if [ "$iotaHornetDownloadChecksum" = "$iotaHornetChecksum" ] && [ ! -z "$iotaHornetDownloadChecksum" ] && [ ! -z "$iotaHornetChecksum" ]; then
            ( cd /tmp/iota-hornet ; sudo tar -xzf /tmp/iota-hornet/hornet-v${latestIotaHornetVersion}_linux_$osArchitecture.tar.gz ) > /dev/null 2>&1

            # Copy binary
            if [ -f "/tmp/iota-hornet/hornet" ]; then
                iotaHornetStatus="$(systemctl show -p ActiveState --value iota-hornet)"
                if [ "$iotaHornetStatus" = "active" ]; then
                    sudo systemctl stop iota-hornet > /dev/null 2>&1
                fi

                sudo cp -rf /tmp/iota-hornet/hornet /usr/bin/iota-hornet > /dev/null 2>&1
                sudo chmod +x /usr/bin/iota-hornet > /dev/null 2>&1
                newIotaHornetBinary=true
            fi
        fi
    fi


    ##############################################################################################################################################

    if [ "$newIotaHornetBinary" = "true" ]; then
        if [ "$iotaHornetNetwork" = "mainnet" ]; then
            if [ -f "/tmp/iota-hornet/hornet-${latestIotaHornetVersion}_Linux_$osArchitecture/config_defaults.json" ]; then
                echo "-> Copy new config file: $iotaHornetHome/config_mainnet.json" >> /tmp/iotaHornetInstaller.log
                sudo cp -rf /tmp/iota-hornet/hornet-${latestIotaHornetVersion}_Linux_$osArchitecture/config_defaults.json $iotaHornetHome/config_mainnet.json > /dev/null 2>&1
                if [ -s "$iotaHornetHome/config_mainnet.json" ]; then
                    newIotaHornetConfig=true
                fi
            else
                echo "-> New config file not found. Downloading new config from GitHub. Repository: Hornet, Branch: production" >> /tmp/iotaHornetInstaller.log
                sudo -u hornet wget -q -O $iotaHornetHome/config_mainnet.json https://raw.githubusercontent.com/iotaledger/hornet/production/config.json
                iotaHornetConfigMainnetCheck=$(cat $iotaHornetHome/config_mainnet.json)
                if [ -f "$iotaHornetHome/config_mainnet.json" ] && [ ! -z "$iotaHornetConfigMainnetCheck" ]; then
                    newIotaHornetConfig=true
                fi
                unset iotaHornetConfigMainnetCheck
            fi
        fi
        if [ -f "$iotaHornetHome/config.json" ]; then
            sudo rm -rf $iotaHornetHome/config.json > /dev/null 2>&1
        fi
    fi

    ##############################################################################################################################################

    if [ "$newIotaHornetConfig" = "true" ]; then
        # Run installer modules
        sudo chown -R hornet:hornet $iotaHornetHome > /dev/null 2>&1
        sudo chmod 644 $iotaHornetHome/*.json > /dev/null 2>&1

        restartIotaHornet=true
        iotaHornetUpdated=true
    fi

    # Remove temporary files
    sudo rm -rf /tmp/iota-hornet > /dev/null 2>&1


    unset newIotaHornetBinary newIotaHornetConfig iotaHornetDownloadChecksum
fi