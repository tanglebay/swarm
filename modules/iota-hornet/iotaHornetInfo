#!/bin/bash

if [ -f "/usr/bin/iota-hornet" ]; then

    source $swarmConfigs/iota-hornet.cfg
    source $swarmConfigs/latest-versions.cfg

    iotaHornetStatus=$(systemctl show -p ActiveState --value iota-hornet)

    iotaHornetVersion=$(/usr/bin/iota-hornet -v | awk '{ print $2 }')
    if [ -z "$iotaHornetVersion" ]; then
        iotaHornetVersion="N/A"
    else
        if [ "$iotaHornetVersion" != "$latestIotaHornetVersion" ] && [ ! -z "$latestIotaHornetVersion" ]; then
            iotaHornetVersion="$iotaHornetVersion (new version \"v$latestIotaHornetVersion\" available!)"
        fi
    fi

    if [ "$iotaHornetStatus" = "active" ]; then
        iotaHornetHealthy="$(curl --max-time 2 -s -X GET "http://localhost:14265/api/core/v2/info" -H  "accept: application/json" -H "Authorization: Bearer ${iotaHornetApiJwtToken}"|jq -r '.status.isHealthy' 2> /dev/null)"
        if [ -z "$iotaHornetHealthy" ]; then
            iotaHornetHealthy="N/A"
        else
            if [ "$iotaHornetHealthy" = "true" ]; then
                iotaHornetHealthy="✓"
            else
                iotaHornetHealthy="X"
            fi
        fi
    else
        iotaHornetHealthy="N/A"
    fi

    # DB size
    if [ -d "$iotaHornetHome/$iotaHornetNetwork/database" ]; then
        getCurrentDbSize="$(du -sb $iotaHornetHome/$iotaHornetNetwork/database | cut -f1)"
        let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
        if [ $getCurrentDbSizeInMb -gt 999 ]; then
            let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
            currentIotaHornetDbSize="${getCurrentDbSizeInGb} GB"
        else
            currentIotaHornetDbSize="${getCurrentDbSizeInMb} MB"
        fi
    else
        currentIotaHornetDbSize="N/A"
    fi

    if [ "$iotaHornetPruningEnabled" = "true" ]; then
        iotaHornetPruningEnabledStatus="✓"
    else
        iotaHornetPruningEnabledStatus="X"
    fi

    if [ "$iotaHornetSnapshotsEnabled" = "true" ]; then
        iotaHornetSnapshotsEnabledStatus="✓"
    else
        iotaHornetSnapshotsEnabledStatus="X"
    fi

    if [ "$iotaHornetInxEnabled" = "true" ]; then
        iotaHornetInxEnabledStatus="✓"
    else
        iotaHornetInxEnabledStatus="X"
    fi

    if [ "$iotaHornetAutopeeringEnabled" = "true" ]; then
        iotaHornetAutopeeringEnabledStatus="✓"
    else
        iotaHornetAutopeeringEnabledStatus="X"
    fi

    if [ "$iotaHornetPowEnabled" = "true" ]; then
        iotaHornetPowEnabledStatus="✓"
    else
        iotaHornetPowEnabledStatus="X"
    fi

    if [ -f "/etc/nginx/sites-enabled/iota-hornet" ]; then
        iotaHornetProxyStatus="✓"
    else
        iotaHornetProxyStatus="X"
    fi

    if [ ! -z "$iotaHornetApiPublicRoutes" ]; then
        iotaHornetApiPublicRoutesInfo="\n\nPublic API Routes: $iotaHornetApiPublicRoutes"
    fi

    for iotaInxPlugin in ${iotaInxPlugins[@]}
    do
        if [ -f "/usr/bin/iota-inx-$iotaInxPlugin" ]; then
            swarmApp="iota-inx-$iotaInxPlugin"
            source $swarmModule/swarmAppVars
            source $swarmConfigs/iota-inx-$iotaInxPlugin.cfg
            iotaHornetInxApiPublicRoutes=${swarmAppPrefix}ApiPublicRoutes
            if [ ! -z "${!iotaHornetInxApiPublicRoutes}" ]; then
                iotaHornetInxApiPublicRoutesAll=$(echo "$iotaHornetInxApiPublicRoutesAll,${!iotaHornetInxApiPublicRoutes}")
            fi
            if [ "${iotaHornetInxApiPublicRoutesAll:0:1}" = "," ]; then
                iotaHornetInxApiPublicRoutesAll="${iotaHornetInxApiPublicRoutesAll:1}"
            fi
            unset swarmApp swarmAppPrefix iotaHornetInxApiPublicRoutes
        fi
    done
    unset iotaInxPlugin
    if [ ! -z "$iotaHornetInxApiPublicRoutesAll" ]; then
        iotaHornetInxApiPublicRoutesInfo="\n\nPublic INX API Routes: $iotaHornetInxApiPublicRoutesAll"
        unset iotaHornetInxApiPublicRoutesAll
    fi

    # OUTPUT
    whiptail --scrolltext --title "Hornet [IOTA] Info" --msgbox "Hornet: $iotaHornetStatus\nVersion: v$iotaHornetVersion\nNetwork: $iotaHornetNetwork\nDB size: $currentIotaHornetDbSize\nHealthy: $iotaHornetHealthy\nProxy: $iotaHornetProxyStatus\n\nAlias: $iotaHornetAlias\nINX: $iotaHornetInxEnabledStatus\nAutopeering: $iotaHornetAutopeeringEnabledStatus\nPoW: $iotaHornetPowEnabledStatus\nLocal Snapshots: $iotaHornetSnapshotsEnabledStatus milestones\nGossip Port: ${iotaHornetGossipPort}/tcp\nAutopeering Port: ${iotaHornetAutopeeringPort}/udp\n\nPruning: $iotaHornetPruningEnabledStatus\nMax DB size: ${iotaHornetPruningDatabaseSize} GB\nPruning percentage: ${iotaHornetPruningPercentage}%\nPruning Cooldown: $iotaHornetPruningCooldownTime minutes${iotaHornetApiPublicRoutesInfo}${iotaHornetInxApiPublicRoutesInfo}" 24 70
else
    # OUTPUT
    whiptail --title "Hornet [IOTA] Info" --msgbox "Hornet not installed!" 8 70
fi