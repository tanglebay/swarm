#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/iota-hornet.cfg
    source $iotaHornetModules/iotaHornetConfigs
    CHOICE=$(
        whiptail --title "Hornet [IOTA] Configurations" --menu "\nChoose an option" 24 65 0 \
        "1)" "Dashboard" \
        "2)" "API & JWT" \
        "3)" "Enable Plugins" \
        "4)" "Disable Plugins" \
        "5)" "Node Alias" \
        "6)" "DB Pruning" \
        "7)" "Proof of Work" \
        "8)" "Local Snapshots" \
        "9)" "P2P Identity" \
        "10)" "Database Revalidation" \
        "11)" "Gossip Port" \
        "12)" "Autopeering Port" \
        "13)" "Unknown Peers Limit" \
        "14)" "IOTA Network" \
        "15)" "Hornet release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartIotaHornet" = "true" ] && [ -f "/usr/bin/iota-hornet" ]; then
            if (whiptail --title "Hornet [IOTA] Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $iotaHornetModules/iotaHornetParser
                    echo 50
                    sudo systemctl restart iota-hornet > /dev/null 2>&1
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartIotaHornet
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Dashboard" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            iotaHornetUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $iotaHornetUsername --title "Hornet [IOTA] Dashboard" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ $exitStatus != 1 ]; then
                                if [ ! -z "$iotaHornetUsername" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetDashboardUsername
                                    if [ "$newIotaHornetUsername" = "true" ]; then
                                        sudo sed -i 's/^iotaHornetUsername=.*/iotaHornetUsername="'$iotaHornetUsername'"/' $swarmConfigs/iota-hornet.cfg
                                        whiptail --title "Hornet [IOTA] Dashboard" --msgbox "New username \"$iotaHornetUsername\" applied!" 8 65
                                        unset newIotaHornetUsername
                                    else
                                        whiptail --title "Hornet [IOTA] Dashboard" --msgbox "No username change detected." 8 65
                                    fi
                                else
                                    whiptail --title "Hornet [IOTA] Dashboard" --msgbox "No valid username, please try again." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet [IOTA] Dashboard" --msgbox "Please install Hornet (IOTA) first." 8 65
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetDashboardPwdGen
                        else
                            whiptail --title "Hornet [IOTA] Dashboard" --msgbox "Please install Hornet (IOTA) first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] API & JWT" --menu "\nChoose an option" 24 65 0 \
                    "1)" "API Routes" \
                    "2)" "Generate new JWT token" \
                    "3)" "Show all JWT token" \
                    "4)" "Revoke all JWT token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/iota-hornet.cfg
                        iotaHornetApiRoutes=$iotaHornetApiPublicRoutes
                        source $iotaHornetModules/iotaHornetApiRoutes
                        iotaHornetApiRoutes=$(whiptail --title "Hornet [IOTA] API routes" --checklist "\nSelect (using the spacebar) the Hornet API routes that you want to protect. All routes not selected will be public:" 24 65 14 \
                            "/health" "" $iotaHornetApiRoutesHealth \
                            "/mqtt" "" $iotaHornetApiRoutesMqtt \
                            "/api/v1/info" "" $iotaHornetApiRoutesInfo \
                            "/api/v1/tips" "" $iotaHornetApiRoutesTips \
                            "/api/v1/messages*" "" $iotaHornetApiRoutesMessages \
                            "/api/v1/transactions*" "" $iotaHornetApiRoutesTransactions \
                            "/api/v1/milestones*" "" $iotaHornetApiRoutesMilestones \
                            "/api/v1/outputs*" "" $iotaHornetApiRoutesOutputs \
                            "/api/v1/addresses*" "" $iotaHornetApiRoutesAddresses \
                            "/api/v1/treasury" "" $iotaHornetApiRoutesTreasury \
                            "/api/v1/receipts*" "" $iotaHornetApiRoutesReceipts \
                            "/api/plugins/participation/events*" "" $iotaHornetApiRoutesParticipationEvents \
                            "/api/plugins/participation/outputs*" "" $iotaHornetApiRoutesParticipationOutputs \
                            "/api/plugins/participation/addresses*" "" $iotaHornetApiRoutesParticipationAddresses 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        iotaHornetApiRoutes=$(echo $iotaHornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            iotaHornetUpdateApiRoutes=true
                            source $iotaHornetModules/iotaHornetApiRoutes
                            if [ -f "/usr/bin/iota-hornet" ]; then
                                source $iotaHornetConfigParsers/iotaHornetApiPublicRoutes
                            fi
                            unset iotaHornetUpdateApiRoutes
                        fi
                        unset iotaHornetApiRoutes
                    ;;
                    "2)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to generate a new JWT token?" 8 65); then
                                iotaHornetApiJwtToken=$( cd $iotaHornetHome ; /usr/bin/iota-hornet tools jwt-api | awk '{ print $5 }')
                                if [ ! -z "$iotaHornetApiJwtToken" ]; then
                                    sudo sed -i 's~^iotaHornetApiJwtToken=.*~iotaHornetApiJwtToken="'$iotaHornetApiJwtToken'"~' $swarmConfigs/iota-hornet.cfg
                                    echo $iotaHornetApiJwtToken >> $swarmLogs/iotaHornetJwtToken.log
                                    clear
                                    echo ""
                                    echo $iotaHornetApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Error generating JWT token, please try again later." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Please install Hornet (IOTA) first." 8 65
                        fi
                    ;;
                    "3)")
                        if [ -f "$swarmLogs/iotaHornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/iotaHornetJwtToken.log
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "No JWT token log found, please generate one first!" 8 65
                        fi
                    ;;
                    "4)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to revoke all JWT tokens?" 8 65); then
                                iotaHornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sudo sed -i 's~^iotaHornetApiJwtSalt=.*~iotaHornetApiJwtSalt="'$iotaHornetApiJwtSalt'"~' $swarmConfigs/iota-hornet.cfg
                                {
                                    echo 0
                                    echo 15
                                    source $iotaHornetConfigParsers/iotaHornetApiJwtSalt
                                    echo 30
                                    sudo rm -rf $swarmLogs/iotaHornetJwt.log
                                    echo 45
                                    source $iotaHornetConfigParsers/iotaHornetIdentity
                                    echo 60
                                    sudo systemctl restart iota-hornet 2>/dev/null
                                    echo 75
                                    iotaHornetApiJwtToken=$( cd $iotaHornetHome ; /usr/bin/iota-hornet tools jwt-api | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$iotaHornetApiJwtToken" ]; then
                                        sudo sed -i 's~^iotaHornetApiJwtToken=.*~iotaHornetApiJwtToken="'$iotaHornetApiJwtToken'"~' $swarmConfigs/iota-hornet.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all JWT tokens will be revoked..." 8 65 0
                            fi
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Please install Hornet (IOTA) first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            useIotaHornetEnablePlugins=true
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetEnablePlugins=$iotaHornetEnablePlugins
            source $iotaHornetModules/iotaHornetPlugins
            iotaHornetEnablePlugins=$(whiptail --title "Hornet [IOTA] Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be activated:" 24 65 4 \
                "Autopeering" "plugin for automatic peering" $iotaHornetPluginAutopeering \
                "Participation" "plugin for voting/staking" $iotaHornetPluginParticipation \
                "MQTT" "plugin to stream messages" $iotaHornetPluginMqtt \
                "Prometheus" "plugin for metrics e.g. Grafana" $iotaHornetPluginPrometheus 3>&1 1>&2 2>&3)
            exitStatus=$?
            iotaHornetEnablePlugins=$(echo $iotaHornetEnablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$iotaHornetEnablePlugins" ] || [[ $iotaHornetEnablePlugins = *autopeering* ]] || [[ $iotaHornetEnablePlugins = *participation* ]] || [[ $iotaHornetEnablePlugins = *mqtt* ]] || [[ $iotaHornetEnablePlugins = *prometheus* ]]; then
                if [ "$iotaHornetEnablePlugins" != "$currentIotaHornetEnablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetEnablePlugins
                    fi
                    sudo sed -i 's/^iotaHornetEnablePlugins=.*/iotaHornetEnablePlugins="'$iotaHornetEnablePlugins'"/' $swarmConfigs/iota-hornet.cfg
                    if [ ! -z "$iotaHornetEnablePlugins" ]; then
                        whiptail --title "Hornet [IOTA] Plugins" --msgbox "The following plugins are enabled:\n$iotaHornetEnablePlugins" 14 65
                    else
                        whiptail --title "Hornet [IOTA] Plugins" --msgbox "There are no plugins enabled for Hornet!" 8 65
                    fi
                fi
                unset iotaHornetEnablePlugins
            fi
            unset useIotaHornetEnablePlugins
        ;;
        "4)")
            useIotaHornetDisablePlugins=true
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetDisablePlugins=$iotaHornetDisablePlugins
            source $iotaHornetModules/iotaHornetPlugins
            iotaHornetDisablePlugins=$(whiptail --title "Hornet [IOTA] Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be deactivated:" 24 65 1 \
                "Warpsync" "plugin to sync more faster" $iotaHornetPluginWarpsync 3>&1 1>&2 2>&3)
            exitStatus=$?
            iotaHornetDisablePlugins=$(echo $iotaHornetDisablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$iotaHornetDisablePlugins" ] || [[ $iotaHornetDisablePlugins = *warpsync* ]]; then
                if [ "$iotaHornetDisablePlugins" != "$currentIotaHornetDisablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetDisablePlugins
                    fi
                    sudo sed -i 's/^iotaHornetDisablePlugins=.*/iotaHornetDisablePlugins="'$iotaHornetDisablePlugins'"/' $swarmConfigs/iota-hornet.cfg
                    if [ ! -z "$iotaHornetDisablePlugins" ]; then
                        whiptail --title "Hornet [IOTA] Plugins" --msgbox "The following plugins are disabled:\n$iotaHornetDisablePlugins" 14 65
                    else
                        whiptail --title "Hornet [IOTA] Plugins" --msgbox "There are no plugins disabled for Hornet!" 8 65
                    fi
                fi
            else
                unset iotaHornetDisablePlugins
            fi
            unset useIotaHornetDisablePlugins
        ;;
        "5)")
            if [ -f "/usr/bin/iota-hornet" ]; then
                iotaHornetAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 --title "Hornet [IOTA] Alias" 3>&1 1>&2 2>&3)
                if [ ! -z "$iotaHornetAlias" ]; then
                    sudo sed -i 's~^iotaHornetAlias=.*~iotaHornetAlias="'"$iotaHornetAlias"'"~' $swarmConfigs/iota-hornet.cfg
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetAlias
                        if [ "$newIotaHornetAlias" = "true" ]; then
                            whiptail --title "Hornet [IOTA] Alias" --msgbox "New alias \"$iotaHornetAlias\" applied!" 8 65
                            unset newIotaHornetAlias
                        else
                            whiptail --title "Hornet [IOTA] Alias" --msgbox "No node alias change detected!" 8 65
                        fi
                    else
                        whiptail --title "Hornet [IOTA] Alias" --msgbox "Alias \"$iotaHornetAlias\" applied!" 8 65
                    fi
                fi
            else
                whiptail --title "Hornet [IOTA] Alias" --msgbox "Please install Hornet (IOTA) first." 8 65
            fi
        ;;
        "6)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                # Hornet Pruning
                if [ "$iotaHornetPruningEnabled" = "true" ]; then
                    iotaHornetPruningEnabledStatus=enabled
                else
                    iotaHornetPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Pruning" --menu "\nStatus: $iotaHornetPruningEnabledStatus\n\nChoose an option" 24 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$iotaHornetPruning" = "true" ]; then
                            iotaHornetPruningStatus=enabled
                        else
                            iotaHornetPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet [IOTA] Pruning" --menu "\nStatus: $iotaHornetPruningEnabledStatus\n\nChoose an option" 24 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                iotaHornetPruningEnabled=true
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningEnabled
                                fi
                                sudo sed -i 's/^iotaHornetPruningEnabeld=.*/iotaHornetPruningEnabled='$iotaHornetPruningEnabled'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                iotaHornetPruningEnabled=false
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningEnabled
                                fi
                                sudo sed -i 's/^iotaHornetPruningEnabled=.*/iotaHornetPruningEnabled='$iotaHornetPruningEnabled'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        iotaHornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $iotaHornetPruningDatabaseSize --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaHornetPruningDatabaseSize=${iotaHornetPruningDatabaseSize//[!0-9]/}
                            if [ ! -z "$iotaHornetPruningDatabaseSize" ] && [ $iotaHornetPruningDatabaseSize -eq $iotaHornetPruningDatabaseSize ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningDatabaseSize
                                fi
                                sudo sed -i 's/^iotaHornetPruningDatabaseSize=.*/iotaHornetPruningDatabaseSize='$iotaHornetPruningDatabaseSize'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning of the database set to ${iotaHornetPruningDatabaseSize}GB!" 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentIotaHornetPruningCooldownTime=$iotaHornetPruningCooldownTime
                        iotaHornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $iotaHornetPruningCooldownTime --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaHornetPruningCooldownTime=${iotaHornetPruningCooldownTime//[!0-9]/}
                            if [ $iotaHornetPruningCooldownTime -gt 0 ] && [ $iotaHornetPruningCooldownTime -lt 60 ]; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningCooldownTime
                                fi
                                sudo sed -i 's/^iotaHornetPruningCooldownTime=.*/iotaHornetPruningCooldownTime='$iotaHornetPruningCooldownTime'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning cooldown time set to ${iotaHornetPruningCooldownTime} minutes!" 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        iotaHornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $iotaHornetPruningPercentage --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetPruningPercentage" ] && [ $iotaHornetPruningPercentage -eq $iotaHornetPruningPercentage ]; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningPercentage
                                fi
                                sudo sed -i 's/^iotaHornetPruningPercentage=.*/iotaHornetPruningPercentage='$iotaHornetPruningPercentage'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning percentage set to ${iotaHornetPruningPercentage}%!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "7)")
            source $swarmConfigs/iota-hornet.cfg
            if [ "$iotaHornetPowEnabled" = "true" ]; then
                iotaHornetPowEnabledStatus=enabled
            else
                iotaHornetPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet [IOTA] PoW" --menu "\nPOW: $iotaHornetPowEnabledStatus\n\nChoose an option" 24 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    iotaHornetPowEnabled=true
                    sudo sed -i 's/^iotaHornetPowEnabled=.*/iotaHornetPowEnabled='$iotaHornetPowEnabled'/' $swarmConfigs/iota-hornet.cfg
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetPowEnabled
                        source $iotaHornetConfigParsers/iotaHornetPowWorkerCount
                        sudo sed -i 's/^iotaHornetPowWorkerCount=.*/iotaHornetPowWorkerCount='$iotaHornetPowWorkerCount'/' $swarmConfigs/iota-hornet.cfg
                    fi
                    whiptail --title "Hornet [IOTA] PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    iotaHornetPowEnabled=false
                    sudo sed -i 's/^iotaHornetPowEnabled=.*/iotaHornetPowEnabled='$iotaHornetPowEnabled'/' $swarmConfigs/iota-hornet.cfg
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetPowEnabled
                        source $iotaHornetConfigParsers/iotaHornetPowWorkerCount
                        sudo sed -i 's/^iotaHornetPowWorkerCount=.*/iotaHornetPowWorkerCount='$iotaHornetPowWorkerCount'/' $swarmConfigs/iota-hornet.cfg
                    fi
                    whiptail --title "Hornet [IOTA] PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "8)")
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetSnapshotInterval=$iotaHornetSnapshotInterval
            iotaHornetSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $iotaHornetSnapshotInterval --title "Hornet [IOTA] Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$iotaHornetSnapshotInterval" ] && [ $iotaHornetSnapshotInterval -eq $iotaHornetSnapshotInterval ] 2>/dev/null; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetSnapshotInterval
                    fi
                    if [ "$currentIotaHornetSnapshotInterval" != "$iotaHornetSnapshotInterval" ]; then
                        sudo sed -i 's/^iotaHornetSnapshotInterval=.*/iotaHornetSnapshotInterval='$iotaHornetSnapshotInterval'/' $swarmConfigs/iota-hornet.cfg
                        whiptail --title "Hornet [IOTA] Snapshots" --msgbox "Snapshot interval changed to $iotaHornetSnapshotInterval milestones!" 8 65
                    else
                        whiptail --title "Hornet [IOTA] Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                    fi
                fi
            fi
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                iotaHornetVersion=$(/usr/bin/iota-hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Identity" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetIdentity=$iotaHornetIdentity
                        iotaHornetIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet [IOTA] Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$iotaHornetIdentity" != "$currentIotaHornetIdentity" ] && [ ! -z "$iotaHornetIdentity" ]; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetIdentity
                                fi
                                sudo sed -i 's~^iotaHornetIdentity=.*~iotaHornetIdentity="'$iotaHornetIdentity'"~' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Identity" --msgbox "The following Identity key was set: \n$iotaHornetIdentity!" 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                                unset iotaHornetIdentity
                                sudo rm -rf $iotaHornetHome/p2pstore/identity.key 2>/dev/null
                                source $iotaHornetConfigParsers/iotaHornetIdentity
                                whiptail --title "Hornet [IOTA] Identity" --msgbox "The following p2pIdentity key was set: \n$iotaHornetIdentity" 12 65
                                source $swarmConfigs/iota-hornet.cfg
                            fi
                        else
                            whiptail --title "Hornet [IOTA] Identity" --msgbox "Please install Hornet (IOTA) first." 10 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/iota-hornet.cfg
            if [ "$iotaHornetAutoRevalidation" = "true" ]; then
                iotaHornetAutoRevalidationStatus=enabled
            else
                iotaHornetAutoRevalidationStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet [IOTA] DB Revalidation" --menu "\nDatabase Revalidation: $iotaHornetAutoRevalidationStatus\n\nChoose an option" 24 65 0 \
                "1)" "Enable DB revalidation" \
                "2)" "Disable DB revalidation" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    iotaHornetAutoRevalidation=true
                    sudo sed -i 's/^iotaHornetAutoRevalidation=.*/iotaHornetAutoRevalidation=true/' $swarmConfigs/iota-hornet.cfg
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetAutoRevalidation
                    fi
                    whiptail --title "Hornet [IOTA] DB Revalidation" --msgbox "Hornet DB Revalidation enabled!" 8 65
                ;;
                "2)")
                    iotaHornetAutoRevalidation=false
                    sudo sed -i 's/^iotaHornetAutoRevalidation=.*/iotaHornetAutoRevalidation=false/' $swarmConfigs/iota-hornet.cfg
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetAutoRevalidation
                    fi
                    whiptail --title "Hornet [IOTA] DB Revalidation" --msgbox "Hornet DB Revalidation disabled!" 8 65
                ;;
            esac
        ;;
        "11)")
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetGossipPort=$iotaHornetGossipPort
            iotaHornetGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $iotaHornetGossipPort --title "Hornet [IOTA] Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$iotaHornetGossipPort" ] && [ "$currentIotaHornetGossipPort" != "$iotaHornetGossipPort" ] && [ $iotaHornetGossipPort -eq $iotaHornetGossipPort ] 2>/dev/null; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete allow $currentIotaHornetGossipPort/tcp > /dev/null 2>&1
                            sudo ufw allow $iotaHornetGossipPort/tcp > /dev/null 2>&1
                        fi
                        source $iotaHornetConfigParsers/iotaHornetGossipPort
                    fi
                    sudo sed -i 's/^iotaHornetGossipPort=.*/iotaHornetGossipPort='$iotaHornetGossipPort'/' $swarmConfigs/iota-hornet.cfg
                    whiptail --title "Hornet [IOTA] Gossip" --msgbox "Gossip port set to \"$iotaHornetGossipPort/tcp\"!" 8 65
                    restartIotaHornet=true
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetAutopeeringPort=$iotaHornetAutopeeringPort
            iotaHornetAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $iotaHornetAutopeeringPort --title "Hornet [IOTA] Autopeering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$iotaHornetAutopeeringPort" ] && [ "$currentIotaHornetAutopeeringPort" != "$iotaHornetAutopeeringPort" ] && [ $iotaHornetAutopeeringPort -eq $iotaHornetAutopeeringPort ] 2>/dev/null; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete allow $currentIotaHornetAutopeeringPort/udp > /dev/null 2>&1
                            sudo ufw allow $iotaHornetAutopeeringPort/udp > /dev/null 2>&1
                        fi
                        source $iotaHornetConfigParsers/iotaHornetAutopeeringPort
                    fi
                    sudo sed -i 's/^iotaHornetAutopeeringPort=.*/iotaHornetAutopeeringPort='$iotaHornetAutopeeringPort'/' $swarmConfigs/iota-hornet.cfg
                    whiptail --title "Hornet [IOTA] Autopeering" --msgbox "Autopeering port set to \"$iotaHornetAutopeeringPort/udp\"!" 8 65
                fi
            fi
        ;;
        "13)")
            source $swarmConfigs/iota-hornet.cfg
            currentIotaHornetUnknownPeersLimit=$iotaHornetUnknownPeersLimit
            iotaHornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentIotaHornetUnknownPeersLimit --title "Hornet [IOTA] Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ "$currentIotaHornetUnknownPeersLimit" != "$iotaHornetUnknownPeersLimit" ] && [ $iotaHornetUnknownPeersLimit -eq $iotaHornetUnknownPeersLimit ] && [ ! -z "$iotaHornetUnknownPeersLimit" ] 2>/dev/null; then
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetGossipUnknownPeersLimit
                    fi
                    sudo sed -i 's/^iotaHornetUnknownPeersLimit=.*/iotaHornetUnknownPeersLimit='$iotaHornetUnknownPeersLimit'/' $swarmConfigs/iota-hornet.cfg
                    whiptail --title "Hornet [IOTA] Gossip" --msgbox "Maximum of unknown neighbors set to \"$iotaHornetUnknownPeersLimit\"." 8 65
                fi
            fi
        ;;
        "14)")
            source $iotaHornetModules/iotaHornetConfigs
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet [IOTA] Network" --menu "\nCurrent network: $iotaHornetNetwork\n\nChoose an option" 24 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet [IOTA] Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentIotaHornetNetwork=$iotaHornetNetwork
                        iotaHornetNetwork=mainnet
                        sudo sed -i 's/^iotaHornetNetwork=.*/iotaHornetNetwork='$iotaHornetNetwork'/' $swarmConfigs/iota-hornet.cfg
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetNetwork
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet [IOTA] Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentIotaHornetNetwork=$iotaHornetNetwork
                        iotaHornetNetwork=testnet
                        sudo sed -i 's/^iotaHornetNetwork=.*/iotaHornetNetwork='$iotaHornetNetwork'/' $swarmConfigs/iota-hornet.cfg
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetNetwork
                        fi
                    fi
                ;;
            esac
        ;;
        "15)")
            source $swarmConfigs/iota-hornet.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet [IOTA] Release" --menu "\nSet \"stable\" for official release or \"beta\"/\"alpha\" for releases under development\n\nChoose an option" 24 65 0 \
                "1)" "Stable Release Channel (default)" \
                "2)" "Beta Release Channel" \
                "3)" "Alpha Release Channel" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet [IOTA] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (Hornet will be reinstalled)?" 8 65); then
                        currentIotaHornetRelease=$iotaHornetRelease
                        iotaHornetRelease=stable
                        sudo sed -i 's/^iotaHornetRelease=.*/iotaHornetRelease='$iotaHornetRelease'/' $swarmConfigs/iota-hornet.cfg
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetReleaseChannel
                            source $iotaHornetModules/iotaHornetParser
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet [IOTA] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"beta\" (Hornet will be reinstalled)?" 8 65); then
                        currentIotaHornetRelease=$iotaHornetRelease
                        iotaHornetRelease=beta
                        sudo sed -i 's/^iotaHornetRelease=.*/iotaHornetRelease='$iotaHornetRelease'/' $swarmConfigs/iota-hornet.cfg
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetReleaseChannel
                            source $iotaHornetModules/iotaHornetParser
                        fi
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet [IOTA] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"alpha\" (Hornet will be reinstalled)?" 8 65); then
                        currentIotaHornetRelease=$iotaHornetRelease
                        iotaHornetRelease=alpha
                        sudo sed -i 's/^iotaHornetRelease=.*/iotaHornetRelease='$iotaHornetRelease'/' $swarmConfigs/iota-hornet.cfg
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            source $iotaHornetModules/iotaHornetReleaseChannel
                            source $iotaHornetModules/iotaHornetParser
                        fi
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R hornet:hornet $iotaHornetHome/*.json
exitCode=0