#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/iota-hornet.cfg
    source $iotaHornetModule/iotaHornetConfigs
    if [ "$iotaHornetUpdateCheck" = "true" ]; then
        menuIotaHornetUpdateCheck="Disable"
    else
        menuIotaHornetUpdateCheck="Enable"
    fi
    CHOICE=$(
        whiptail --title "Hornet [IOTA] Configurations" --menu "\nChoose an option" 24 70 0 \
        "" "" \
        "1)" "API & JWT" \
        "2)" "INX Interface" \
        "3)" "Autopeering" \
        "4)" "Snapshots" \
        "5)" "Database Pruning" \
        "6)" "Proof Of Work" \
        "7)" "P2P Identity" \
        "8)" "Gossip (Peering)" \
        "9)" "Node Alias" \
        "10)" "Iota Network" \
        "11)" "Hornet Release Channel" \
        "12)" "[$menuIotaHornetUpdateCheck] Update Check" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartIotaHornet" = "true" ] && [ -f "/usr/bin/iota-hornet" ]; then
            if (whiptail --title "Hornet [IOTA] Menu" --yesno "Would you like to apply the changes and restart [IOTA] Hornet?" 8 70); then
                if [ ! -f "/tmp/iota-hornet.lock" ]; then
                    sudo touch /tmp/iota-hornet.lock > /dev/null 2>&1
                fi
                {
                    echo 0
                    echo 20
                    source $iotaHornetModule/iotaHornetParser
                    echo 40
                    for iotaInxPlugin in ${iotaInxPlugins[@]}
                    do
                        if [ -f "/usr/bin/iota-inx-$iotaInxPlugin" ]; then
                            if [ ! -f "/tmp/iota-inx-$iotaInxPlugin.lock" ]; then
                                sudo touch /tmp/iota-inx-$iotaInxPlugin.lock > /dev/null 2>&1
                            fi
                            sudo systemctl stop iota-inx-$iotaInxPlugin 2>/dev/null
                        fi
                    done
                    unset iotaInxPlugin
                    echo 60
                    sudo systemctl restart iota-hornet > /dev/null 2>&1
                    echo 80
                    for iotaInxPlugin in ${iotaInxPlugins[@]}
                    do
                        if [ -f "/usr/bin/iota-inx-$iotaInxPlugin" ]; then
                            sudo systemctl start iota-inx-$iotaInxPlugin 2>/dev/null
                            if [ -f "/tmp/iota-inx-$iotaInxPlugin.lock" ]; then
                                sudo rm -rf /tmp/iota-inx-$iotaInxPlugin.lock > /dev/null 2>&1
                            fi
                        fi
                    done
                    unset iotaInxPlugin
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and [IOTA] Hornet is restarted..." 8 70 0
                unset restartIotaHornet
                if [ -f "/tmp/iota-hornet.lock" ]; then
                    sudo rm -rf /tmp/iota-hornet.lock > /dev/null 2>&1
                fi
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                if [ "$iotaHornetApiEnabled" = "true" ]; then
                    menuIotaHornetApiEnabled="Disable"
                else
                    menuIotaHornetApiEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] API & JWT" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[$menuIotaHornetApiEnabled] API" \
                    "2)" "Set protected API Routes" \
                    "3)" "Generate New JWT Token" \
                    "4)" "Show All JWT Token" \
                    "5)" "Revoke All JWT Token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        menuIotaHornetApiEnabled=$(echo $menuIotaHornetApiEnabled | awk '{print tolower($0)}')
                        if (whiptail --title "Hornet [IOTA] API" --yesno --defaultno "Are you sure you want to $menuIotaHornetApiEnabled the [IOTA] Hornet API?" 8 70); then
                            source $swarmConfigs/iota-hornet.cfg
                            if [ "$iotaHornetApiEnabled" = "true" ]; then
                                iotaHornetApiEnabled=false
                                menuIotaHornetApiEnabled="disabled"
                            else
                                iotaHornetApiEnabled=true
                                menuIotaHornetApiEnabled="enabled"
                            fi
                            restartIotaHornet=true
                            sudo sed -i 's~^iotaHornetApiEnabled=.*~iotaHornetApiEnabled='$iotaHornetApiEnabled'~' $swarmConfigs/iota-hornet.cfg
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "[IOTA] Hornet API $menuIotaHornetApiEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/iota-hornet.cfg
                        iotaHornetApiRoutes=$iotaHornetApiPublicRoutes
                        source $iotaHornetModule/iotaHornetApiRoutes
                        iotaHornetApiRoutes=$(whiptail --title "Hornet [IOTA] API routes" --checklist "\nSelect which API routes should not be public(*):" 24 70 11 \
                            "/health" "" $iotaHornetApiRoutesHealth \
                            "/api/routes" "" $iotaHornetApiRoutesRoutes \
                            "/api/core/v2/info" "" $iotaHornetApiRoutesInfo \
                            "/api/core/v2/tips" "" $iotaHornetApiRoutesTips \
                            "/api/core/v2/blocks*" "" $iotaHornetApiRoutesBlocks \
                            "/api/core/v2/transactions*" "" $iotaHornetApiRoutesTransactions \
                            "/api/core/v2/milestones*" "" $iotaHornetApiRoutesMilestones \
                            "/api/core/v2/outputs*" "" $iotaHornetApiRoutesOutputs \
                            "/api/core/v2/treasury" "" $iotaHornetApiRoutesTreasury \
                            "/api/core/v2/receipts*" "" $iotaHornetApiRoutesReceipts \
                            "/api/debug/v1/*" "" $iotaHornetApiRoutesDebug 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        iotaHornetApiRoutes=$(echo $iotaHornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            iotaHornetUpdateApiRoutes=true
                            source $iotaHornetModule/iotaHornetApiRoutes
                            if [ -f "/usr/bin/iota-hornet" ]; then
                                source $iotaHornetConfigParsers/iotaHornetApiPublicRoutes
                            fi
                            unset iotaHornetUpdateApiRoutes
                        fi
                        unset iotaHornetApiRoutes
                    ;;
                    "3)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to generate a new [IOTA] Hornet JWT token?" 8 70); then
                                iotaHornetApiJwtToken=$( cd $iotaHornetHome/$iotaHornetNetwork ; /usr/bin/iota-hornet tools jwt-api --salt $iotaHornetApiJwtSalt | awk '{ print $5 }')
                                if [ ! -z "$iotaHornetApiJwtToken" ]; then
                                    sudo sed -i 's~^iotaHornetApiJwtToken=.*~iotaHornetApiJwtToken="'$iotaHornetApiJwtToken'"~' $swarmConfigs/iota-hornet.cfg
                                    echo $iotaHornetApiJwtToken >> $swarmLogs/iotaHornetJwtToken.log
                                    clear
                                    echo ""
                                    echo $iotaHornetApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Error generating [IOTA] Hornet JWT token, please try again later." 8 70
                                fi
                            fi
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Please install [IOTA] Hornet first." 8 70
                        fi
                    ;;
                    "4)")
                        if [ -f "$swarmLogs/iotaHornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/iotaHornetJwtToken.log
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "No [IOTA] Hornet JWT token log found, please generate one first." 8 70
                        fi
                    ;;
                    "5)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] API & JWT" --yesno --defaultno "Are you sure you want to revoke all [IOTA] Hornet JWT tokens?" 8 70); then
                                iotaHornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sudo sed -i 's~^iotaHornetApiJwtSalt=.*~iotaHornetApiJwtSalt="'$iotaHornetApiJwtSalt'"~' $swarmConfigs/iota-hornet.cfg
                                if [ -f "/tmp/iota-hornet.lock" ]; then
                                    sudo rm -rf /tmp/iota-hornet.lock > /dev/null 2>&1
                                fi
                                for iotaInxPlugin in ${iotaInxPlugins[@]}
                                do
                                    if [ -f "/usr/bin/iota-inx-$iotaInxPlugin" ]; then
                                        if [ ! -f "/tmp/iota-inx-$iotaInxPlugin.lock" ]; then
                                            sudo touch /tmp/iota-inx-$iotaInxPlugin.lock > /dev/null 2>&1
                                        fi
                                        sudo systemctl stop iota-inx-$iotaInxPlugin 2>/dev/null
                                    fi
                                done
                                unset iotaInxPlugin
                                {
                                    echo 0
                                    echo 15
                                    source $iotaHornetConfigParsers/iotaHornetApiJwtSalt
                                    echo 30
                                    sudo rm -rf $swarmLogs/iotaHornetJwt.log
                                    echo 45
                                    source $iotaHornetConfigParsers/iotaHornetIdentity
                                    echo 60
                                    sudo systemctl restart iota-hornet 2>/dev/null
                                    echo 75
                                    iotaHornetApiJwtToken=$( cd $iotaHornetHome/$iotaHornetNetwork ; /usr/bin/iota-hornet tools jwt-api --salt $iotaHornetApiJwtSalt | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$iotaHornetApiJwtToken" ]; then
                                        sudo sed -i 's~^iotaHornetApiJwtToken=.*~iotaHornetApiJwtToken="'$iotaHornetApiJwtToken'"~' $swarmConfigs/iota-hornet.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all [IOTA] Hornet JWT tokens will be revoked..." 8 70 0
                                for iotaInxPlugin in ${iotaInxPlugins[@]}
                                do
                                    if [ -f "/usr/bin/iota-inx-$iotaInxPlugin" ]; then
                                        if [ -f "/tmp/iota-inx-$iotaInxPlugin.lock" ]; then
                                            sudo rm -rf /tmp/iota-inx-$iotaInxPlugin.lock > /dev/null 2>&1
                                        fi
                                        sudo systemctl start iota-inx-$iotaInxPlugin 2>/dev/null
                                    fi
                                done
                                unset iotaInxPlugin
                                if [ -f "/tmp/iota-hornet.lock" ]; then
                                    sudo rm -rf /tmp/iota-hornet.lock > /dev/null 2>&1
                                fi
                            fi
                        else
                            whiptail --title "Hornet [IOTA] API & JWT" --msgbox "Please install [IOTA] Hornet first." 8 70
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                if [ "$iotaHornetInxEnabled" = "true" ]; then
                    menuIotaHornetInxEnabled="Disable"
                else
                    menuIotaHornetInxEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] INX" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[$menuIotaHornetInxEnabled] INX Interface" \
                    "2)" "Set INX POW Worker Count" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        menuIotaHornetInxEnabled=$(echo $menuIotaHornetInxEnabled | awk '{print tolower($0)}')
                        if (whiptail --title "Hornet [IOTA] INX" --yesno --defaultno "Are you sure you want to $menuIotaHornetInxEnabled [IOTA] INX interface?" 8 70); then
                            source $swarmConfigs/iota-hornet.cfg
                            if [ "$iotaHornetInxEnabled" = "true" ]; then
                                iotaHornetInxEnabled=false
                                menuIotaHornetInxEnabled="disabled"
                            else
                                iotaHornetInxEnabled=true
                                menuIotaHornetInxEnabled="enabled"
                            fi
                            restartIotaHornet=true
                            sudo sed -i 's/^iotaHornetInxEnabled=.*/iotaHornetInxEnabled='$iotaHornetInxEnabled'/' $swarmConfigs/iota-hornet.cfg
                            whiptail --title "Hornet [IOTA] INX" --msgbox "[IOTA] INX interface $menuIotaHornetInxEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetInxPowWorkerCount=$iotaHornetInxPowWorkerCount
                        iotaHornetInxPowWorkerCount=$(whiptail --inputbox "\nSet the numbers of cores for [IOTA] INX pow." 10 65 $iotaHornetInxPowWorkerCount --title "Hornet [IOTA] INX" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetInxPowWorkerCount" ] && [ "$currentIotaHornetInxPowWorkerCount" != "$iotaHornetInxPowWorkerCount" ] && [ $iotaHornetInxPowWorkerCount -eq $iotaHornetInxPowWorkerCount ] 2>/dev/null; then
                                sudo sed -i 's/^iotaHornetInxPowWorkerCount=.*/iotaHornetInxPowWorkerCount='$iotaHornetInxPowWorkerCount'/' $swarmConfigs/iota-hornet.cfg
                                restartIotaHornet=true
                            fi
                        fi
                        whiptail --title "Hornet [IOTA] INX" --msgbox "[IOTA] INX pow worker counter set to $iotaHornetInxPowWorkerCount." 8 70
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg

                if [ "$iotaHornetAutopeeringEnabled" = "true" ]; then
                    menuIotaHornetAutopeeringEnabled="disable"
                else
                    menuIotaHornetAutopeeringEnabled="enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Autopeering" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${menuIotaHornetAutopeeringEnabled^}] Autopeering" \
                    "2)" "Set Autopeering Port (UDP)" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [IOTA] Autopeering" --yesno --defaultno "Are you sure you want to ${menuIotaHornetAutopeeringEnabled} [IOTA] Hornet autopeering?" 8 70); then
                            source $swarmConfigs/iota-hornet.cfg
                            if [ "$iotaHornetAutopeeringEnabled" = "true" ]; then
                                iotaHornetAutopeeringEnabled=false
                                menuIotaHornetAutopeeringEnabled="disabled"
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw delete allow $iotaHornetAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                sudo sed -i 's/^iotaHornetAutopeeringEnabled=.*/iotaHornetAutopeeringEnabled='$iotaHornetAutopeeringEnabled'/' $swarmConfigs/iota-hornet.cfg
                            else
                                iotaHornetAutopeeringEnabled=true
                                menuIotaHornetAutopeeringEnabled="enabled"
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw allow $iotaHornetAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                sudo sed -i 's/^iotaHornetAutopeeringEnabled=.*/iotaHornetAutopeeringEnabled='$iotaHornetAutopeeringEnabled'/' $swarmConfigs/iota-hornet.cfg
                            fi
                            restartIotaHornet=true
                            whiptail --title "Hornet [IOTA] Autopeering" --msgbox "[IOTA] Hornet autopeering $menuIotaHornetAutopeeringEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetAutopeeringPort=$iotaHornetAutopeeringPort
                        iotaHornetAutopeeringPort=$(whiptail --inputbox "\nSet the [IOTA] Hornet autopeering port for the automatic neighbors detection." 10 65 $iotaHornetAutopeeringPort --title "Hornet [IOTA] Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetAutopeeringPort" ] && [ "$currentIotaHornetAutopeeringPort" != "$iotaHornetAutopeeringPort" ] && [ $iotaHornetAutopeeringPort -eq $iotaHornetAutopeeringPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentIotaHornetAutopeeringPort/udp > /dev/null 2>&1
                                        sudo ufw allow $iotaHornetAutopeeringPort/udp > /dev/null 2>&1
                                    fi
                                    source $iotaHornetConfigParsers/iotaHornetAutopeeringPort
                                fi
                                sudo sed -i 's/^iotaHornetAutopeeringPort=.*/iotaHornetAutopeeringPort='$iotaHornetAutopeeringPort'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Autopeering" --msgbox "[IOTA] Hornet autopeering port set to \"$iotaHornetAutopeeringPort/udp\"." 8 70
                            fi
                        fi
                        unset currentIotaHornetAutopeeringPort
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg

                if [ "$iotaHornetSnapshotsEnabled" = "true" ]; then
                    menuIotaHornetSnapshotsEnabled="disable"
                else
                    menuIotaHornetSnapshotsEnabled="enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Snapshots" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${menuIotaHornetSnapshotsEnabled^}] Snapshots" \
                    "2)" "Set Snapshot Interval" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [IOTA] Snapshots" --yesno --defaultno "Are you sure you want to $menuIotaHornetSnapshotsEnabled [IOTA] Hornet snapshots?" 8 70); then
                            source $swarmConfigs/iota-hornet.cfg
                            if [ "$iotaHornetSnapshotsEnabled" = "true" ]; then
                                iotaHornetSnapshotsEnabled=false
                                menuIotaHornetSnapshotsEnabled="disabled"
                                sudo sed -i 's/^iotaHornetSnapshotsEnabled=.*/iotaHornetSnapshotsEnabled='$iotaHornetSnapshotsEnabled'/' $swarmConfigs/iota-hornet.cfg
                            else
                                iotaHornetSnapshotsEnabled=true
                                menuIotaHornetSnapshotsEnabled="enabled"
                                sudo sed -i 's/^iotaHornetSnapshotsEnabled=.*/iotaHornetSnapshotsEnabled='$iotaHornetSnapshotsEnabled'/' $swarmConfigs/iota-hornet.cfg
                            fi
                            restartIotaHornet=true
                            whiptail --title "Hornet [IOTA] Snapshots" --msgbox "[IOTA] Hornet snapshots $menuIotaHornetSnapshotsEnabled." 8 70
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetSnapshotsInterval=$iotaHornetSnapshotsInterval
                        iotaHornetSnapshotsInterval=$(whiptail --inputbox "\nSet the snapshot interval for [IOTA] Hornet." 10 65 $iotaHornetSnapshotsInterval --title "Hornet [IOTA] Snapshots" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetSnapshotsInterval" ] && [ "$currentIotaHornetSnapshotsInterval" != "$iotaHornetSnapshotsInterval" ] && [ $iotaHornetSnapshotsInterval -eq $iotaHornetSnapshotsInterval ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetSnapshotsInterval
                                fi
                                sudo sed -i 's/^iotaHornetSnapshotsInterval=.*/iotaHornetSnapshotsInterval='$iotaHornetSnapshotsInterval'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Snapshots" --msgbox "[IOTA] Hornet snapshot interval set to \"$iotaHornetSnapshotsInterval\"." 8 70
                            fi
                        fi
                        unset currentIotaHornetSnapshotsInterval
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                # Hornet Pruning
                if [ "$iotaHornetPruningEnabled" = "true" ]; then
                    iotaHornetPruningEnabledStatus="disable"
                else
                    iotaHornetPruningEnabledStatus="enable"
                fi
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Pruning" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "[${iotaHornetPruningEnabledStatus^}] Pruning" \
                    "2)" "Set Database Size" \
                    "3)" "Set Pruning Cooldown" \
                    "4)" "Set Pruning Percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [IOTA] Pruning" --yesno --defaultno "Are you sure you want to $iotaHornetPruningEnabledStatus [IOTA] Hornet pruning?" 8 70); then
                            if [ "$iotaHornetPruningEnabled" = "true" ]; then
                                iotaHornetPruningEnabled=false
                                iotaHornetPruningEnabledStatus="disabled"
                            else
                                iotaHornetPruningEnabled=true
                                iotaHornetPruningEnabledStatus="enabled"
                            fi
                            restartIotaHornet=true
                            sudo sed -i 's/^iotaHornetPruningEnabled=.*/iotaHornetPruningEnabled='$iotaHornetPruningEnabled'/' $swarmConfigs/iota-hornet.cfg
                            whiptail --title "Hornet [IOTA] Pruning" --msgbox "Pruning of the [IOTA] Hornet database $iotaHornetPruningEnabledStatus." 8 70
                        fi
                    ;;
                    "2)")
                        if [[ $iotaHornetPruningDatabaseSize = *-* ]]; then
                            unset iotaHornetPruningDatabaseSize
                        fi
                        currentIotaHornetPruningDatabaseSize=$iotaHornetPruningDatabaseSize
                        iotaHornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the [IOTA] Hornet database in gigabytes." 10 65 $currentIotaHornetPruningDatabaseSize --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaHornetPruningDatabaseSize=${iotaHornetPruningDatabaseSize//[!0-9]/}
                            if [ $iotaHornetPruningDatabaseSize -gt 0 ] && [ $currentIotaHornetPruningDatabaseSize -ne $iotaHornetPruningDatabaseSize ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningDatabaseSize
                                fi
                                sudo sed -i 's/^iotaHornetPruningDatabaseSize=.*/iotaHornetPruningDatabaseSize='$iotaHornetPruningDatabaseSize'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "The [IOTA] Hornet database size has been limited to ${iotaHornetPruningDatabaseSize} GB." 8 70
                            else
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "Aborted - No change was made to the [IOTA] Hornet database size." 8 70
                            fi
                        fi
                    ;;
                    "3)")
                        currentIotaHornetPruningCooldownTime=$iotaHornetPruningCooldownTime
                        iotaHornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum [IOTA] Hornet DB size is reached." 10 65 $iotaHornetPruningCooldownTime --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            iotaHornetPruningCooldownTime=${iotaHornetPruningCooldownTime//[!0-9]/}
                            if [ $iotaHornetPruningCooldownTime -gt 0 ] && [ $iotaHornetPruningCooldownTime -lt 60 ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningCooldownTime
                                fi
                                sudo sed -i 's/^iotaHornetPruningCooldownTime=.*/iotaHornetPruningCooldownTime='$iotaHornetPruningCooldownTime'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "[IOTA] Hornet pruning cooldown time set to ${iotaHornetPruningCooldownTime} minutes." 8 70
                            fi
                        fi
                    ;;
                    "4)")
                        iotaHornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the [IOTA] Hornet database" 10 65 $iotaHornetPruningPercentage --title "Hornet [IOTA] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetPruningPercentage" ] && [ $iotaHornetPruningPercentage -eq $iotaHornetPruningPercentage ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetPruningPercentage
                                fi
                                sudo sed -i 's/^iotaHornetPruningPercentage=.*/iotaHornetPruningPercentage='$iotaHornetPruningPercentage'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Pruning" --msgbox "[IOTA] Hornet pruning percentage set to ${iotaHornetPruningPercentage}%." 8 70
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            source $swarmConfigs/iota-hornet.cfg
            if [ "$iotaHornetPowEnabled" = "true" ]; then
                iotaHornetPowEnabledStatus="disable"
            else
                iotaHornetPowEnabledStatus="enable"
            fi
            if (whiptail --title "Hornet [IOTA] Proof of Work" --yesno --defaultno "Do you really want to $iotaHornetPowEnabledStatus [IOTA] Hornet proof of work?" 8 70); then
                if [ "$iotaHornetPowEnabled" = "true" ]; then
                    iotaHornetPowEnabled=false
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetPowEnabled
                        source $iotaHornetConfigParsers/iotaHornetPowWorkerCount
                        sudo sed -i 's/^iotaHornetPowWorkerCount=.*/iotaHornetPowWorkerCount='$iotaHornetPowWorkerCount'/' $swarmConfigs/iota-hornet.cfg
                    fi
                    sudo sed -i 's/^iotaHornetPowEnabled=.*/iotaHornetPowEnabled='$iotaHornetPowEnabled'/' $swarmConfigs/iota-hornet.cfg
                    whiptail --title "Hornet [IOTA] PoW" --msgbox "[IOTA] Hornet PoW has been disabled." 8 70
                else
                    iotaHornetPowEnabled=true
                    if [ -f "/usr/bin/iota-hornet" ]; then
                        source $iotaHornetConfigParsers/iotaHornetPowEnabled
                        source $iotaHornetConfigParsers/iotaHornetPowWorkerCount
                        sudo sed -i 's/^iotaHornetPowWorkerCount=.*/iotaHornetPowWorkerCount='$iotaHornetPowWorkerCount'/' $swarmConfigs/iota-hornet.cfg
                    fi
                    sudo sed -i 's/^iotaHornetPowEnabled=.*/iotaHornetPowEnabled='$iotaHornetPowEnabled'/' $swarmConfigs/iota-hornet.cfg
                    whiptail --title "Hornet [IOTA] PoW" --msgbox "[IOTA] Hornet PoW has been enabled." 8 70
                fi
            fi
        ;;
        "7)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                iotaHornetVersion=$(/usr/bin/iota-hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Identity" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Set Identity" \
                    "2)" "Generate New Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetIdentity=$iotaHornetIdentity
                        iotaHornetIdentity=$(whiptail --inputbox "\nSet your own private key for the [IOTA] Hornet Identity" 10 65 --title "Hornet [IOTA] Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$iotaHornetIdentity" != "$currentIotaHornetIdentity" ] && [ ! -z "$iotaHornetIdentity" ]; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetIdentity
                                fi
                                sudo sed -i 's~^iotaHornetIdentity=.*~iotaHornetIdentity="'$iotaHornetIdentity'"~' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Identity" --msgbox "The following [IOTA] Hornet Identity key was set: \n$iotaHornetIdentity." 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/iota-hornet" ]; then
                            if (whiptail --title "Hornet [IOTA] Identity" --yesno --defaultno "Are you sure you want to generate a new [IOTA] Hornet Identity (the existing one will be deleted)?" 8 70); then
                                unset iotaHornetIdentity
                                if [ -f "$iotaHornetHome/$iotaHornetNetwork/p2pstore/identity.key" ]; then
                                    sudo rm -rf $iotaHornetHome/$iotaHornetNetwork/p2pstore/identity.key 2>/dev/null
                                fi
                                source $iotaHornetConfigParsers/iotaHornetIdentity
                                whiptail --title "Hornet [IOTA] Identity" --msgbox "The following [IOTA] Hornet Identity key was set: \n$iotaHornetIdentity" 12 65
                                source $swarmConfigs/iota-hornet.cfg
                            fi
                        else
                            whiptail --title "Hornet [IOTA] Identity" --msgbox "Please install [IOTA] Hornet first." 12 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/iota-hornet.cfg
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Gossip" --menu "\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Set Gossip Port" \
                    "2)" "Set Unknown Peers Limit" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetGossipPort=$iotaHornetGossipPort
                        iotaHornetGossipPort=$(whiptail --inputbox "\nSet the [IOTA] Hornet gossip port for the neighbors communication." 10 65 $iotaHornetGossipPort --title "Hornet [IOTA] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$iotaHornetGossipPort" ] && [ "$currentIotaHornetGossipPort" != "$iotaHornetGossipPort" ] && [ $iotaHornetGossipPort -eq $iotaHornetGossipPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentIotaHornetGossipPort/tcp > /dev/null 2>&1
                                        sudo ufw allow $iotaHornetGossipPort/tcp > /dev/null 2>&1
                                    fi
                                    source $iotaHornetConfigParsers/iotaHornetGossipPort
                                fi
                                sudo sed -i 's/^iotaHornetGossipPort=.*/iotaHornetGossipPort='$iotaHornetGossipPort'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Gossip" --msgbox "[IOTA] Hornet gossip port set to \"$iotaHornetGossipPort/tcp\"." 8 70
                                restartIotaHornet=true
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/iota-hornet.cfg
                        currentIotaHornetUnknownPeersLimit=$iotaHornetUnknownPeersLimit
                        iotaHornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown [IOTA] Hornet neighbors." 10 65 $currentIotaHornetUnknownPeersLimit --title "Hornet [IOTA] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$currentIotaHornetUnknownPeersLimit" != "$iotaHornetUnknownPeersLimit" ] && [ $iotaHornetUnknownPeersLimit -eq $iotaHornetUnknownPeersLimit ] && [ ! -z "$iotaHornetUnknownPeersLimit" ] 2>/dev/null; then
                                if [ -f "/usr/bin/iota-hornet" ]; then
                                    source $iotaHornetConfigParsers/iotaHornetGossipUnknownPeersLimit
                                fi
                                sudo sed -i 's/^iotaHornetUnknownPeersLimit=.*/iotaHornetUnknownPeersLimit='$iotaHornetUnknownPeersLimit'/' $swarmConfigs/iota-hornet.cfg
                                whiptail --title "Hornet [IOTA] Gossip" --msgbox "Maximum of unknown [IOTA] Hornet neighbors set to \"$iotaHornetUnknownPeersLimit\"." 8 70
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            iotaHornetAlias=$(whiptail --inputbox "\nDefine an alias of your [IOTA] Hornet node" 10 65 $iotaHornetAlias --title "Hornet [IOTA] Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$iotaHornetAlias" ]; then
                sudo sed -i 's~^iotaHornetAlias=.*~iotaHornetAlias="'$iotaHornetAlias'"~' $swarmConfigs/iota-hornet.cfg
                if [ -f "/usr/bin/iota-hornet" ]; then
                    source $iotaHornetConfigParsers/iotaHornetAlias
                    if [ "$newIotaHornetAlias" = "true" ]; then
                        whiptail --title "Hornet [IOTA] Alias" --msgbox "New [IOTA] Hornet alias \"$iotaHornetAlias\" applied." 8 70
                        unset newIotaHornetAlias
                    else
                        whiptail --title "Hornet [IOTA] Alias" --msgbox "No [IOTA] Hornet alias change detected." 8 70
                    fi
                else
                    whiptail --title "Hornet [IOTA] Alias" --msgbox "[IOTA] Hornet alias \"$iotaHornetAlias\" applied." 8 70
                fi
            fi
        ;;
        "10)")
            while [ $exitCode -lt 1 ]; do
                source $iotaHornetModule/iotaHornetConfigs
                # Hornet Networks
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Network" --menu "\nCurrent network: $iotaHornetNetwork\n\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Select Iota Mainnet (Default)" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [IOTA] Network" --yesno --defaultno "Are you sure you want to change the network to [IOTA] mainnet (the old database will be deleted)?" 8 70); then
                            currentIotaHornetNetwork=$iotaHornetNetwork
                            iotaHornetNetwork=mainnet
                            sudo sed -i 's/^iotaHornetNetwork=.*/iotaHornetNetwork='$iotaHornetNetwork'/' $swarmConfigs/iota-hornet.cfg
                            if [ -f "/usr/bin/iota-hornet" ]; then
                                source $iotaHornetModule/iotaHornetNetwork
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "11)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/iota-hornet.cfg
                # Hornet release channel
                CHOICE=$(
                    whiptail --title "Hornet [IOTA] Releases" --menu "\nSet \"rc\" for official [IOTA] Hornet releases or \"beta\"/\"alpha\" for [IOTA] Hornet releases under development\n\nChoose an option" 24 70 0 \
                    "" "" \
                    "1)" "Select Release Candidate Channel (Default)" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [IOTA] Releases" --yesno --defaultno "Are you sure you want to change the [IOTA] Hornet release channel to \"rc\" (Hornet will be reinstalled)?" 8 70); then
                            currentIotaHornetRelease=$iotaHornetRelease
                            iotaHornetRelease="rc"
                            sudo sed -i 's/^iotaHornetRelease=.*/iotaHornetRelease='$iotaHornetRelease'/' $swarmConfigs/iota-hornet.cfg
                            if [ -f "/usr/bin/iota-hornet" ]; then
                                source $iotaHornetModule/iotaHornetReleaseChannel
                                source $iotaHornetModule/iotaHornetParser
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "12)")
            menuIotaHornetUpdateCheck=$(echo $menuIotaHornetUpdateCheck | awk '{print tolower($0)}')
            if (whiptail --title "Hornet [IOTA] Update Check" --yesno --defaultno "Are you sure you want to $menuIotaHornetUpdateCheck the [IOTA] Hornet update check?" 8 70); then
                source $swarmConfigs/iota-hornet.cfg
                if [ "$iotaHornetUpdateCheck" = "true" ]; then
                    iotaHornetUpdateCheck=false
                    menuIotaHornetUpdateCheck="disabled"
                    sudo sed -i 's/^iotaHornetUpdateCheck=.*/iotaHornetUpdateCheck='$iotaHornetUpdateCheck'/' $swarmConfigs/iota-hornet.cfg
                else
                    iotaHornetUpdateCheck=true
                    menuIotaHornetUpdateCheck="enabled"
                    sudo sed -i 's/^iotaHornetUpdateCheck=.*/iotaHornetUpdateCheck='$iotaHornetUpdateCheck'/' $swarmConfigs/iota-hornet.cfg
                fi
                restartIotaHornet=true
                whiptail --title "Hornet [IOTA] Update Check" --msgbox "[IOTA] Hornet update check $menuIotaHornetUpdateCheck." 8 70
            fi
        ;;
    esac
done
sudo chown -R hornet:hornet $iotaHornetHome/*.json