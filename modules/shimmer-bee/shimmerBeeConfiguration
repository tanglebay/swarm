#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/shimmer-bee.cfg
    source $shimmerBeeModules/shimmerBeeConfigs
    CHOICE=$(
        whiptail --title "Bee [SHIMMER] Configurations" --menu "\nChoose an option" 24 65 0 \
        "1)" "Bee Peers" \
        "2)" "API" \
        "3)" "Dashboard" \
        "4)" "Node Alias" \
        "5)" "DB Pruning" \
        "6)" "Proof of Work" \
        "7)" "Local Snapshots" \
        "8)" "Identity" \
        "9)" "Autopeering" \
        "10)" "Gossip Port" \
        "11)" "Unknown Peers Limit" \
        "12)" "IOTA Network" \
        "13)" "Bee Release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartShimmerBee" = "true" ] && [ -f "/usr/bin/shimmer-bee" ]; then
            if (whiptail --title "Bee [SHIMMER] Menu" --yesno "Would you like to apply the changes and restart Bee?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $shimmerBeeParser
                    echo 50
                    sudo systemctl restart shimmer-bee > /dev/null 2>&1
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Bee is restarted..." 8 65 0
                unset restartShimmerBee
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            source $shimmerBeeModules/shimmerBeePeersConfiguration
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-bee.cfg
                CHOICE=$(
                    whiptail --title "Bee [SHIMMER] API" --menu "\nChoose an option" 16 65 0 \
                    "1)" "API Routes" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-bee.cfg
                        shimmerBeeApiRoutes="$shimmerBeeApiProtectedRoutes"
                        source $shimmerBeeModules/shimmerBeeApiRoutes
                        shimmerBeeApiRoutes=$(whiptail --title "Bee [SHIMMER] API routes" --checklist "\nSelect (using the spacebar) the Shimmer-Bee API routes that you want to protect. All routes not selected will be public:" 24 65 10 \
                            "/health" "" $shimmerBeeApiRoutesHealth \
                            "/api/v2/info" "" $shimmerBeeApiRoutesInfo \
                            "/api/v2/tips" "" $shimmerBeeApiRoutesTips \
                            "/api/v2/messages*" "" $shimmerBeeApiRoutesMessages \
                            "/api/v2/transactions*" "" $shimmerBeeApiRoutesTransactions \
                            "/api/v2/milestones*" "" $shimmerBeeApiRoutesMilestones \
                            "/api/v2/outputs*" "" $shimmerBeeApiRoutesOutputs \
                            "/api/v2/addresses*" "" $shimmerBeeApiRoutesAddresses \
                            "/api/v2/treasury" "" $shimmerBeeApiRoutesTreasury \
                            "/api/v2/receipts*" "" $shimmerBeeApiRoutesReceipts 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        shimmerBeeApiRoutes=$(echo $shimmerBeeApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            shimmerBeeUpdateApiRoutes=true
                            source $shimmerBeeModules/shimmerBeeApiRoutes
                            if [ -f "/usr/bin/shimmer-bee" ]; then
                                source $shimmerBeeConfigParsers/shimmerBeeApiPublicRoutes
                            fi
                            unset shimmerBeeUpdateApiRoutes
                        fi
                        unset shimmerBeeApiRoutes
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-bee.cfg
                # Shimmer-Bee Dashboard
                CHOICE=$(
                    whiptail --title "Bee [SHIMMER] Dashboard" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            shimmerBeeUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $shimmerBeeUsername --title "Bee [SHIMMER] Dashboard" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ $exitStatus != 1 ]; then
                                if [ ! -z "$shimmerBeeUsername" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeeUsername
                                    if [ "$newShimmerBeeUsername" = "true" ]; then
                                        sudo sed -i 's/^shimmerBeeUsername=.*/shimmerBeeUsername="'$shimmerBeeUsername'"/' $swarmConfigs/shimmer-bee.cfg
                                        whiptail --title "Bee [SHIMMER] Dashboard" --msgbox "New username \"$shimmerBeeUsername\" applied." 8 65
                                        unset newShimmerBeeUsername
                                    else
                                        whiptail --title "Bee [SHIMMER] Dashboard" --msgbox "No username change detected." 8 65
                                    fi
                                else
                                    whiptail --title "Bee [SHIMMER] Dashboard" --msgbox "No valid username, please try again." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Bee [SHIMMER] Dashboard" --msgbox "Please install Bee first." 8 65
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeDashboardPwdGen
                        else
                            whiptail --title "Bee [SHIMMER] Dashboard" --msgbox "Please install Bee first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            if [ -f "/usr/bin/shimmer-bee" ]; then
                shimmerBeeAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $shimmerBeeAlias --title "Bee [SHIMMER] Alias" 3>&1 1>&2 2>&3)
                exitStatus=$?
                if [ $exitStatus != 1 ]; then
                    if [ ! -z "$shimmerBeeAlias" ]; then
                        sudo sed -i 's~^shimmerBeeAlias=.*~shimmerBeeAlias="'"$shimmerBeeAlias"'"~g' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeConfigParsers/shimmerBeeAlias
                            if [ "$newShimmerBeeAlias" = "true" ]; then
                                whiptail --title "Bee [SHIMMER] Configuration" --msgbox "New alias \"$shimmerBeeAlias\" applied." 8 65
                                unset newBeeAlias
                            else
                                whiptail --title "Bee [SHIMMER] Configuration" --msgbox "No node alias change detected." 8 65
                            fi
                        else
                            whiptail --title "Bee [SHIMMER] Configuration" --msgbox "Alias \"$shimmerBeeAlias\" applied." 8 65
                        fi
                    fi
                fi
            else
                whiptail --title "Bee [SHIMMER] Configuration" --msgbox "Please install Bee first." 8 65
            fi
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-bee.cfg
                # Shimmer-Bee Pruning
                if [ "$shimmerBeePruningEnabled" = "true" ]; then
                    shimmerBeePruningEnabledStatus=enabled
                else
                    shimmerBeePruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Bee [SHIMMER] Pruning" --menu "\nStatus: $shimmerBeePruningEnabledStatus\n\nChoose an option" 24 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set pruning after Milestones" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        CHOICE=$(
                            whiptail --title "Bee [SHIMMER] Pruning" --menu "\nStatus: $shimmerBeePruningEnabledStatus\n\nChoose an option" 24 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                shimmerBeePruningEnabled=true
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeePruningEnabled
                                fi
                                sudo sed -i 's/^shimmerBeePruningEnabled=.*/shimmerBeePruningEnabled='$shimmerBeePruningEnabled'/' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Pruning" --msgbox "Pruning was successfully activated." 8 65
                            ;;
                            "2)")
                                shimmerBeePruningEnabled=false
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeePruningEnabled
                                if
                                sudo sed -i 's/^shimmerBeePruningEnabled=.*/shimmerBeePruningEnabled='$shimmerBeePruningEnabled'/' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Pruning" --msgbox "Pruning was successfully deactivated." 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        currentShimmerBeePruningDelay=$shimmerBeePruningDelay
                        shimmerBeePruningDelay=$(whiptail --inputbox "\nSet the interval (milestones) at which pruning is performed." 10 65 $shimmerBeePruningDelay --title "Bee [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ $shimmerBeePruningDelay -gt 0 ] && [ $shimmerBeePruningDelay -eq $shimmerBeePruningDelay ] && [ $currentShimmerBeePruningDelay -ne $shimmerBeePruningDelay ]> /dev/null 2>&1; then
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeePruningDelay
                                fi
                                sudo sed -i 's/^shimmerBeePruningDelay=.*/shimmerBeePruningDelay='$shimmerBeePruningDelay'/' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Pruning" --msgbox "Pruning delay set to ${shimmerBeePruningDelay} milestones." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            source $swarmConfigs/shimmer-bee.cfg
            if [ "$shimmerBeePowEnabled" = "true" ]; then
                shimmerBeePowEnabledStatus=enabled
            else
                shimmerBeePowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Bee [SHIMMER] PoW" --menu "\nPOW: $shimmerBeePowEnabledStatus\n\nChoose an option" 24 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    shimmerBeePowEnabled=true
                    if [ -f "/usr/bin/shimmer-bee" ]; then
                        source $shimmerBeeConfigParsers/shimmerBeePowEnabled
                    fi
                    sudo sed -i 's/^shimmerBeePowEnabled=.*/shimmerBeePowEnabled='$shimmerBeePowEnabled'/' $swarmConfigs/shimmer-bee.cfg
                    whiptail --title "Bee [SHIMMER] PoW" --msgbox "PoW has been enabled." 8 65
                ;;
                "2)")
                    shimmerBeePowEnabled=false
                    if [ -f "/usr/bin/shimmer-bee" ]; then
                        source $shimmerBeeConfigParsers/shimmerBeePowEnabled
                    fi
                    sudo sed -i 's/^shimmerBeePowEnabled=.*/shimmerBeePowEnabled='$shimmerBeePowEnabled'/' $swarmConfigs/shimmer-bee.cfg
                    whiptail --title "Bee [SHIMMER] PoW" --msgbox "PoW has been disabeld." 8 65
                ;;
            esac
        ;;
        "7)")
            source $swarmConfigs/shimmer-bee.cfg
            currentShimmerBeeSnapshotInterval=$shimmerBeeSnapshotInterval
            shimmerBeeSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $shimmerBeeSnapshotInterval --title "Bee [SHIMMER] Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerBeeSnapshotInterval" ] && [ $shimmerBeeSnapshotInterval -eq $shimmerBeeSnapshotInterval ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-bee" ]; then
                        source $shimmerBeeConfigParsers/shimmerBeeSnapshotInterval
                    fi
                    if [ "$currentShimmerBeeSnapshotInterval" != "$shimmerBeeSnapshotInterval" ]; then
                        sudo sed -i 's/^shimmerBeeSnapshotInterval=.*/shimmerBeeSnapshotInterval='$shimmerBeeSnapshotInterval'/' $swarmConfigs/shimmer-bee.cfg
                        whiptail --title "Bee [SHIMMER] Snapshots" --msgbox "Snapshot interval changed to $shimmerBeeSnapshotInterval milestones." 8 65
                    else
                        whiptail --title "Bee [SHIMMER] Snapshots" --msgbox "No new snapshot interval detected." 8 65
                    fi
                    unset newShimmerBeeSnapshotInterval
                fi
            fi
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-bee.cfg
                CHOICE=$(
                    whiptail --title "Bee [SHIMMER] Identity" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Set p2pIdentity" \
                    "2)" "Generate p2pIdentity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-bee.cfg
                        currentShimmerBeeIdentity=$shimmerBeeIdentity
                        shimmerBeeIdentity=$(whiptail --inputbox "\nSet your own private key for the node identity" 10 65 --title "Bee [SHIMMER] Indentity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$shimmerBeeIdentity" != "$currentShimmerBeeIdentity" ] && [ ! -z "$shimmerBeeIdentity" ]; then
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeeIdentity
                                fi
                                sudo sed -i 's~^shimmerBeeIdentity=.*~shimmerBeeIdentity="'$shimmerBeeIdentity'"~' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Identity" --msgbox "The following Identity key was set: \n$shimmerBeeIdentity." 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            if (whiptail --title "Bee [SHIMMER] Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                                shimmerBeeResetIdentity=true
                                source $shimmerBeeConfigParsers/shimmerBeeIdentity
                                whiptail --title "Bee [SHIMMER] Identity" --msgbox "The following Identity key was set: \n$shimmerBeeIdentity" 12 65
                                source $swarmConfigs/shimmer-bee.cfg
                                unset shimmerBeeResetIdentity
                            fi
                        else
                            whiptail --title "Bee [SHIMMER] Identity" --msgbox "Please install Bee (Shimmer) first." 10 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-bee.cfg
                if [ "$shimmerBeeAutopeeringEnabled" = "true" ]; then
                    shimmerBeeAutopeeringEnabledMenu="Disable"
                else
                    shimmerBeeAutopeeringEnabledMenu="Enable"
                fi
                CHOICE=$(
                    whiptail --title "Bee [SHIMMER] Autopeering" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$shimmerBeeAutopeeringEnabledMenu autopeering" \
                    "2)" "Set max discovered peers" \
                    "3)" "Set autopeering port" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$shimmerBeeAutopeeringEnabled" = "true" ]; then
                            shimmerBeeAutopeeringEnabledMenu="disable"
                        else
                            shimmerBeeAutopeeringEnabledMenu="enable"
                        fi
                        if (whiptail --title "Bee [SHIMMER] Autopeering" --yesno --defaultno "Are you sure you want to $shimmerBeeAutopeeringEnabledMenu autopeering?" 8 65); then
                            if [ "$shimmerBeeAutopeeringEnabled" = "true" ]; then
                                shimmerBeeAutopeeringEnabled=false
                                sudo sed -i 's/^shimmerBeeAutopeeringEnabled=.*/shimmerBeeAutopeeringEnabled='$shimmerBeeAutopeeringEnabled'/' $swarmConfigs/shimmer-bee.cfg
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeeAutopeering
                                fi
                                whiptail --title "Bee [SHIMMER] Autopeering" --msgbox "Autopeering has been disabled." 8 65
                            else
                                shimmerBeeAutopeeringEnabled=true
                                sudo sed -i 's/^shimmerBeeAutopeeringEnabled=.*/shimmerBeeAutopeeringEnabled='$shimmerBeeAutopeeringEnabled'/' $swarmConfigs/shimmer-bee.cfg
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeeAutopeering
                                fi
                                whiptail --title "Bee [SHIMMER] Autopeering" --msgbox "Autopeering has been enabled." 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-bee.cfg
                        currentShimmerBeeMaxDiscoveredPeers=$shimmerBeeMaxDiscoveredPeers
                        shimmerBeeMaxDiscoveredPeers=$(whiptail --inputbox "\nSet the max amount of discovered peers via autopeering." 10 65 $shimmerBeeMaxDiscoveredPeers --title "Bee [SHIMMER] Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerBeeMaxDiscoveredPeers" ] && [ $currentShimmerBeeMaxDiscoveredPeers -ne $shimmerBeeMaxDiscoveredPeers ] && [ $shimmerBeeMaxDiscoveredPeers -eq $shimmerBeeMaxDiscoveredPeers ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    source $shimmerBeeConfigParsers/shimmerBeeMaxDiscoveredPeers
                                fi
                                sudo sed -i 's/^shimmerBeeMaxDiscoveredPeers=.*/shimmerBeeMaxDiscoveredPeers='$shimmerBeeMaxDiscoveredPeers'/' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Autopeering" --msgbox "Max amount of autodiscovered peeers set to $shimmerBeeMaxDiscoveredPeers." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        source $swarmConfigs/shimmer-bee.cfg
                        currentShimmerBeeAutopeeringPort=$shimmerBeeAutopeeringPort
                        shimmerBeeAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port." 10 65 $shimmerBeeAutopeeringPort --title "Bee [SHIMMER] Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerBeeAutopeeringPort" ] && [ $currentShimmerBeeAutopeeringPort -ne $shimmerBeeAutopeeringPort ] && [ $shimmerBeeAutopeeringPort -eq $shimmerBeeAutopeeringPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-bee" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentShimmerBeeAutopeeringPort/udp > /dev/null 2>&1
                                        sudo ufw allow $shimmerBeeAutopeeringPort/udp > /dev/null 2>&1
                                    fi
                                    source $shimmerBeeConfigParsers/shimmerBeeAutopeering
                                fi
                                sudo sed -i 's/^shimmerBeeAutopeeringPort=.*/shimmerBeeAutopeeringPort='$shimmerBeeAutopeeringPort'/' $swarmConfigs/shimmer-bee.cfg
                                whiptail --title "Bee [SHIMMER] Autopeering" --msgbox "Autopeering port set to \"$shimmerBeeAutopeeringPort/udp\"." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/shimmer-bee.cfg
            currentShimmerBeeGossipPort=$beeGossipPort
            shimmerBeeGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $shimmerBeeGossipPort --title "Bee [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerBeeGossipPort" ] && [ $currentShimmerBeeGossipPort -ne $shimmerBeeGossipPort ] && [ $shimmerBeeGossipPort -eq $shimmerBeeGossipPort ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-bee" ]; then
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete allow $currentShimmerBeeGossipPort/tcp > /dev/null 2>&1
                            sudo ufw allow $shimmerBeeGossipPort/tcp > /dev/null 2>&1
                        fi
                        source $shimmerBeeConfigParsers/shimmerBeeGossipPort
                    fi
                    sudo sed -i 's/^shimmerBeeGossipPort=.*/shimmerBeeGossipPort='$shimmerBeeGossipPort'/' $swarmConfigs/shimmer-bee.cfg
                    whiptail --title "Bee [SHIMMER] Gossip" --msgbox "Gossip port set to \"$shimmerBeeGossipPort/tcp\"!" 8 65
                fi
            fi
        ;;
        "11)")
            source $swarmConfigs/shimmer-bee.cfg
            currentShimmerBeeMaxUnknownPeers=$shimmerBeeMaxUnknownPeers
            shimmerBeeMaxUnknownPeers=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentShimmerBeeMaxUnknownPeers --title "Bee [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ $currentShimmerBeeMaxUnknownPeers -ne $shimmerBeeMaxUnknownPeers ] && [ $shimmerBeeMaxUnknownPeers -eq $shimmerBeeMaxUnknownPeers ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-bee" ]; then
                        source $shimmerBeeConfigParsers/shimmerBeeMaxUnknownPeers
                    fi
                    sudo sed -i 's/^shimmerBeeMaxUnknownPeers=.*/shimmerBeeMaxUnknownPeers='$shimmerBeeMaxUnknownPeers'/' $swarmConfigs/shimmer-bee.cfg
                    whiptail --title "Bee [SHIMMER] Gossip" --msgbox "Maximum of unknown neighbors set to \"$shimmerBeeMaxUnknownPeers\"." 8 65
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/shimmer-bee.cfg
            # Bee Networks
            CHOICE=$(
                whiptail --title "Bee [SHIMMER] Network" --menu "\nCurrent network: $shimmerBeeNetwork\n\nChoose an option" 24 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Bee [SHIMMER] Network" --yesno --defaultno "Are you sure you want to change the network to \"mainnet\" (the old database will be deleted)?" 8 65); then
                        currentShimmerBeeNetwork=$shimmerBeeNetwork
                        shimmerBeeNetwork=mainnet
                        sudo sed -i 's/^shimmerBeeNetwork=.*/shimmerBeeNetwork='$shimmerBeeNetwork'/' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeNetwork
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Bee [SHIMMER] Network" --yesno --defaultno "Are you sure you want to change the network to \"testnet\" (the old database will be deleted)?" 8 65); then
                        currentShimmerBeeNetwork=$shimmerBeeNetwork
                        shimmerBeeNetwork=testnet
                        sudo sed -i 's/^shimmerBeeNetwork=.*/shimmerBeeNetwork='$shimmerBeeNetwork'/' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeNetwork
                        fi
                    fi
                ;;
            esac
        ;;
        "13)")
            source $swarmConfigs/shimmer-bee.cfg
            # Bee release channel
            CHOICE=$(
                whiptail --title "Bee [SHIMMER] Release" --menu "\nSet \"stable\" for official release or \"beta\"/\"alpha\" for releases under development\n\nChoose an option" 24 65 0 \
                "1)" "Stable Release Channel (default)" \
                "2)" "Beta Release Channel" \
                "3)" "Alpha Release Channel" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Bee [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (Shimmer-Bee will be reinstalled)?" 8 65); then
                        currentShimmerBeeRelease=$shimmerBeeRelease
                        shimmerBeeRelease=stable
                        sudo sed -i 's/^shimmerBeeRelease=.*/shimmerBeeRelease='$shimmerBeeRelease'/' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeReleaseChannel
                            source $shimmerBeeModules/shimmerBeeParser
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Bee [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"beta\" (Shimmer-Bee will be reinstalled)?" 8 65); then
                        currentShimmerBeeRelease=$shimmerBeeRelease
                        shimmerBeeRelease=beta
                        sudo sed -i 's/^shimmerBeeRelease=.*/shimmerBeeRelease='$shimmerBeeRelease'/' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeReleaseChannel
                            source $shimmerBeeModules/shimmerBeeParser
                        fi
                    fi
                ;;
                "3)")
                    if (whiptail --title "Bee [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"alpha\" (Shimmer-Bee will be reinstalled)?" 8 65); then
                        currentShimmerBeeRelease=$shimmerBeeRelease
                        shimmerBeeRelease=alpha
                        sudo sed -i 's/^shimmerBeeRelease=.*/shimmerBeeRelease='$shimmerBeeRelease'/' $swarmConfigs/shimmer-bee.cfg
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            source $shimmerBeeModules/shimmerBeeReleaseChannel
                            source $shimmerBeeModules/shimmerBeeParser
                        fi
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R bee:bee $shimmerBeeHome/config*.json
exitCode=0
