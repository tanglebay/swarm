#!/bin/bash

echo "====== INSTALLATION STARTED ======" > /tmp/iotaInxMqttInstaller.log
# General
if ! id inx >/dev/null 2>&1; then
    echo "-> Create user" >> /tmp/iotaInxMqttInstaller.log
    useradd --no-create-home --system inx >/dev/null
fi

if [ ! -d "$iotaInxMqttHome" ]; then
    echo "-> Create home folder" >> /tmp/iotaInxMqttInstaller.log
    sudo mkdir -p $iotaInxMqttHome > /dev/null 2>&1
    sudo chown -R inx:inx $iotaInxMqttHome > /dev/null 2>&1
fi

# Install GO
if ! [ -x "$(command -v go)" ] > /dev/null 2>&1; then
    echo "-> Install go via snap" >> /tmp/iotaInxMqttInstaller.log
    sudo snap install go --classic > /dev/null 2>&1
fi

# Create Service
if [ ! -f "/lib/systemd/system/iota-inx-mqtt.service" ]; then
    echo "-> Copy new service file from templates" >> /tmp/iotaInxMqttInstaller.log
    sudo cp -rf $swarmTemplates/app-service/iota-inx-mqtt.service /lib/systemd/system/iota-inx-mqtt.service > /dev/null 2>&1
    if [ ! -f "/etc/default/iota-inx-mqtt" ]; then
        echo "-> Create OPTIONS file for service" >> /tmp/iotaInxMqttInstaller.log
        echo "OPTIONS=\"--config config.json\"" > /etc/default/iota-inx-mqtt
    fi
    if [ ! -f "/etc/systemd/system/multi-user.target.wants/iota-inx-mqtt.service" ]; then
        echo "-> Register service" >> /tmp/iotaInxMqttInstaller.log
        sudo systemctl enable iota-inx-mqtt > /dev/null 2>&1
    fi
    sudo systemctl daemon-reload > /dev/null 2>&1
fi

##############################################################################################################################################

# Create dir if not exist
echo "-> Create tmp folder" >> /tmp/iotaInxMqttInstaller.log
sudo mkdir -p /tmp/iota-inx-mqtt > /dev/null 2>&1

# Download latest inx-mqtt
echo "-> Download archive for v${latestIotaInxMqttVersion}" >> /tmp/iotaInxMqttInstaller.log
( cd /tmp/iota-inx-mqtt/ ; sudo wget -q https://$cdnUrl/apps/inx/inx-mqtt/v${latestIotaInxMqttVersion}/inx-mqtt-v${latestIotaInxMqttVersion}_linux_$osArchitecture.tar.gz )
if [ -f "/tmp/iota-inx-mqtt/inx-mqtt-v${latestIotaInxMqttVersion}_linux_$osArchitecture.tar.gz" ]; then
    iotaInxMqttDownloadChecksum=$(sudo shasum -a 512 /tmp/iota-inx-mqtt/inx-mqtt-v${latestIotaInxMqttVersion}_linux_$osArchitecture.tar.gz | awk '{ print $1 }')
    echo "-> Gen checksum of archive: $iotaInxMqttDownloadChecksum" >> /tmp/iotaInxMqttInstaller.log
fi

# Download checksum
echo "-> Download remote checksum file" >> /tmp/iotaInxMqttInstaller.log
( cd /tmp/iota-inx-mqtt/ ; sudo wget -q https://$cdnUrl/apps/inx/inx-mqtt/v${latestIotaInxMqttVersion}/inx-mqtt_checksums_linux_$osArchitecture.txt )
iotaInxMqttChecksum=$(sudo grep "inx-mqtt-v${latestIotaInxMqttVersion}_linux_$osArchitecture.tar.gz" /tmp/iota-inx-mqtt/inx-mqtt_checksums_linux_$osArchitecture.txt | awk '{ print $1 }')
echo $iotaInxMqttChecksum > /tmp/iota-inx-mqtt.checksum
echo "-> Remote checksum: $iotaInxMqttChecksum" >> /tmp/iotaInxMqttInstaller.log

# Unzip archive
if [ "$iotaInxMqttDownloadChecksum" = "$iotaInxMqttChecksum" ] && [ ! -z "$iotaInxMqttDownloadChecksum" ] && [ ! -z "$iotaInxMqttChecksum" ]; then
    echo "-> Unzip archive" >> /tmp/iotaInxMqttInstaller.log
    ( cd /tmp/iota-inx-mqtt ; sudo tar -xzf /tmp/iota-inx-mqtt/inx-mqtt-v${latestIotaInxMqttVersion}_linux_$osArchitecture.tar.gz ) > /dev/null 2>&1

    # Copy binary
    if [ -f "/tmp/iota-inx-mqtt/inx-mqtt" ]; then
        iotaInxMqttStatus="$(systemctl show -p ActiveState --value iota-inx-mqtt)"
        if [ "$iotaInxMqttStatus" = "active" ]; then
            echo "-> Stop service" >> /tmp/iotaInxMqttInstaller.log
            sudo systemctl stop iota-inx-mqtt > /dev/null 2>&1
        fi

        echo "-> Copy new binary file" >> /tmp/iotaInxMqttInstaller.log
        sudo cp -rf /tmp/iota-inx-mqtt/inx-mqtt /usr/bin/iota-inx-mqtt > /dev/null 2>&1
        sudo chmod +x /usr/bin/iota-inx-mqtt > /dev/null 2>&1
        newIotaInxMqttBinary=true
    fi
fi

##############################################################################################################################################

if [ "$newIotaInxMqttBinary" = "true" ]; then
    if [ -f "/tmp/iota-inx-mqtt/config_defaults.json" ]; then
        echo "-> Copy new config file" >> /tmp/iotaInxMqttInstaller.log
        sudo cp -rf /tmp/iota-inx-mqtt/config_defaults.json /var/lib/inx-mqtt/config.json > /dev/null 2>&1
        sudo chmod 644 /var/lib/iota-inx-mqtt/*.json > /dev/null 2>&1
        newIotaInxMqttConfig=true
    else
        if [ -f "/tmp/iota-inx-mqtt/config.json" ]; then
            echo "-> Copy new config file" >> /tmp/iotaInxMqttInstaller.log
            sudo cp -rf /tmp/iota-inx-mqtt/config.json /var/lib/iota-inx-mqtt/config.json > /dev/null 2>&1
            sudo chmod 644 /var/lib/iota-inx-mqtt/*.json > /dev/null 2>&1
            newIotaInxMqttConfig=true
        fi
    fi
fi

##############################################################################################################################################

if [ "$newIotaInxMqttConfig" = "true" ]; then
    # Run installer modules
    echo "-> Set permissions" >> /tmp/iotaInxMqttInstaller.log
    sudo chown -R inx:inx $iotaInxMqttHome > /dev/null 2>&1
    sudo chmod 644 $iotaInxMqttHome/*.json > /dev/null 2>&1

    restartIotaInxMqtt=true
    iotaInxMqttUpdated=true

    echo "-> Run proxy module" >> /tmp/iotaInxMqttInstaller.log
    source $proxyModule/proxyIotaInxMqtt
fi

# Remove temporary files
echo "-> Remove tmp folder" >> /tmp/iotaInxMqttInstaller.log
sudo rm -rf /tmp/iota-inx-mqtt > /dev/null 2>&1

echo "====== INSTALLATION FINISHED ======" >> /tmp/iotaInxMqttInstaller.log
unset newIotaInxMqttBinary newIotaInxMqttConfig iotaInxMqttDownloadChecksum