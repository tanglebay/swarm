#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/bee.cfg
    CHOICE=$(
        whiptail --title "Bee - Configurations" --menu "\nChoose an option" 22 65 0 \
        "1)" "Bee Peers" \
        "2)" "API" \
        "3)" "Dashboard" \
        "4)" "Node Alias" \
        "5)" "DB Pruning" \
        "6)" "Proof of Work" \
        "7)" "Local Snapshots" \
        "8)" "Identity" \
        "9)" "Autopeering" \
        "10)" "Gossip Port" \
        "11)" "Unknown Peers Limit" \
        "12)" "IOTA Network" \
        "13)" "Bee Release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartBee" = "true" ]; then
            if (whiptail --title "Bee Menu" --yesno "Would you like to apply the changes and restart Bee?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $beeParser
                    echo 50
                    sudo systemctl restart bee
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Bee is restarted..." 8 65 0
                unset restartBee
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            source $beeModules/beePeersConfiguration
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/bee.cfg
                CHOICE=$(
                    whiptail --title "Bee - API" --menu "\nChoose an option" 16 65 0 \
                    "1)" "API Routes" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/bee.cfg
                        beeApiRoutes="$beeApiProtectedRoutes"
                        source $beeModules/beeApiRoutes
                        beeApiRoutes=$(whiptail --title "Bee - API routes" --checklist "\nSelect (using the spacebar) the Bee API routes that you want to protect. All routes not selected will be public:" 28 65 11 \
                            "/health" "" $beeApiRoutesHealth \
                            "/api/v1/info" "" $beeApiRoutesInfo \
                            "/api/v1/tips" "" $beeApiRoutesTips \
                            "/api/v1/messages*" "" $beeApiRoutesMessages \
                            "/api/v1/transactions*" "" $beeApiRoutesTransactions \
                            "/api/v1/milestones*" "" $beeApiRoutesMilestones \
                            "/api/v1/outputs*" "" $beeApiRoutesOutputs \
                            "/api/v1/addresses*" "" $beeApiRoutesAddresses \
                            "/api/v1/treasury" "" $beeApiRoutesTreasury \
                            "/api/v1/receipts*" "" $beeApiRoutesReceipts 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        beeApiRoutes=$(echo $beeApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            beeUpdateApiRoutes=true
                            source $beeModules/beeApiRoutes
                            source $beeConfigParsers/beeApiPublicRoutes
                            unset beeUpdateApiRoutes
                        fi
                        unset beeApiRoutes
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/bee.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Bee - Dashboard" --menu "\nChoose an option" 14 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        beeUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $beeUsername --title "Bee - Dashboard" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$beeUsername" ]; then
                                source $beeConfigParsers/beeUsername
                                if [ "$newBeeUsername" = "true" ]; then
                                    sudo sed -i 's/^beeUsername=.*/beeUsername="'$beeUsername'"/' $swarmConfigs/bee.cfg
                                    whiptail --title "Bee - Dashboard" --msgbox "New username \"$beeUsername\" applied!" 8 65
                                    unset newBeeUsername
                                else
                                    whiptail --title "Bee - Dashboard" --msgbox "No username change detected!" 8 65
                                fi
                            else
                                whiptail --title "Bee - Dashboardn" --msgbox "No valid username, please try again!" 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        source $beeModules/beeDashboardPwdGen
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            beeAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $beeAlias --title "Bee - Alias" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$beeAlias" ]; then
                    source $beeConfigParsers/beeAlias
                    if [ "$newBeeAlias" = "true" ]; then
                        sudo sed -i "s~^beeAlias=.*~beeAlias=\"$beeAlias\"~g" $swarmConfigs/bee.cfg
                        whiptail --title "Bee Configuration" --msgbox "New alias \"$beeAlias\" applied!" 8 65
                        unset newBeeAlias
                    else
                        whiptail --title "Bee - Configuration" --msgbox "No node alias change detected!" 8 65
                    fi
                fi
            fi
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/bee.cfg
                # Hornet Pruning
                if [ "$beePruningEnabled" = "true" ]; then
                    beePruningEnabledStatus=enabled
                else
                    beePruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Bee - Pruning" --menu "\nStatus: $beePruningEnabledStatus\n\nChoose an option" 18 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set pruning after Milestones" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        CHOICE=$(
                            whiptail --title "Bee - Pruning" --menu "\nStatus: $beePruningEnabledStatus\n\nChoose an option" 14 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                beePruningEnabled=true
                                source $beeConfigParsers/beePruningEnabled
                                sudo sed -i 's/^beePruningEnabled=.*/beePruningEnabled='$beePruningEnabled'/' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                beePruningEnabled=false
                                source $beeConfigParsers/beePruningEnabled
                                sudo sed -i 's/^beePruningEnabled=.*/beePruningEnabled='$beePruningEnabled'/' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        currentBeePruningDelay=$beePruningDelay
                        beePruningDelay=$(whiptail --inputbox "\nSet the interval (milestones) at which pruning is performed." 10 65 $beePruningDelay --title "Bee - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ $beePruningDelay -gt 0 ] && [ $beePruningDelay -eq $beePruningDelay ] && [ $currentBeePruningDelay -ne $beePruningDelay ]> /dev/null 2>&1; then
                                source $beeConfigParsers/beePruningDelay
                                sudo sed -i 's/^beePruningDelay=.*/beePruningDelay='$beePruningDelay'/' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - Pruning" --msgbox "Pruning delay set to ${beePruningDelay} milestones!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            source $swarmConfigs/bee.cfg
            if [ "$beePowEnabled" = "true" ]; then
                beePowEnabledStatus=enabled
            else
                beePowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Bee - PoW" --menu "\nPOW: $beePowEnabledStatus\n\nChoose an option" 14 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    beePowEnabled=true
                    source $beeConfigParsers/beePowEnabled
                    sudo sed -i 's/^beePowEnabled=.*/beePowEnabled='$beePowEnabled'/' $swarmConfigs/bee.cfg
                    whiptail --title "Bee - PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    beePowEnabled=false
                    source $beeConfigParsers/beePowEnabled
                    sudo sed -i 's/^beePowEnabled=.*/beePowEnabled='$beePowEnabled'/' $swarmConfigs/bee.cfg
                    whiptail --title "Bee - PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "7)")
            source $swarmConfigs/bee.cfg
            beeSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $beeSnapshotInterval --title "Bee - Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$beeSnapshotInterval" ] && [ $beeSnapshotInterval -eq $beeSnapshotInterval ] 2>/dev/null; then
                    source $beeConfigParsers/beeSnapshotInterval
                    sudo sed -i 's/^beeSnapshotInterval=.*/beeSnapshotInterval='$beeSnapshotInterval'/' $swarmConfigs/bee.cfg
                    if [ "$newBeeSnapshotInterval" = "true" ]; then
                        whiptail --title "Bee - Snapshots" --msgbox "Snapshot interval changed to $beeSnapshotInterval milestones!" 8 65
                    else
                        whiptail --title "Bee - Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                    fi
                    unset newBeeSnapshotInterval
                fi
            fi
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/bee.cfg
                CHOICE=$(
                    whiptail --title "Bee - p2pIdentity" --menu "\nChoose an option" 14 65 0 \
                    "1)" "Set p2pIdentity" \
                    "2)" "Generate p2pIdentity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/bee.cfg
                        currentBeeIdentity=$beeIdentity
                        beeIdentity=$(whiptail --inputbox "\nSet your own private key for the node identity" 10 65 --title "Bee - Indentity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$beeIdentity" != "$currentBeeIdentity" ] && [ ! -z "$beeIdentity" ]; then
                                source $beeConfigParsers/beeIdentity
                                sudo sed -i 's~^beeIdentity=.*~beeIdentity="'$beeIdentity'"~' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - p2pIdentity" --msgbox "The following Identity key was set: \n$beeIdentity!" 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Bee - Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                            beeResetIdentity=true
                            source $beeConfigParsers/beeIdentity
                            whiptail --title "Bee - Identity" --msgbox "The following Identity key was set: \n$beeIdentity" 12 65
                            source $swarmConfigs/bee.cfg
                            unset beeResetIdentity
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/bee.cfg
                if [ "$beeAutopeeringEnabled" = "true" ]; then
                    beeAutopeeringEnabledMenu="Disable"
                else
                    beeAutopeeringEnabledMenu="Enable"
                fi
                CHOICE=$(
                    whiptail --title "Bee - Autopeering" --menu "\nChoose an option" 14 65 0 \
                    "1)" "$beeAutopeeringEnabledMenu autopeering" \
                    "2)" "Set max discovered peers" \
                    "3)" "Set autopeering port" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$beeAutopeeringEnabled" = "true" ]; then
                            beeAutopeeringEnabledMenu="disable"
                        else
                            beeAutopeeringEnabledMenu="enable"
                        fi
                        if (whiptail --title "Bee - Autopeering" --yesno --defaultno "Are you sure you want to $beeAutopeeringEnabledMenu autopeering?" 8 65); then
                            if [ "$beeAutopeeringEnabled" = "true" ]; then
                                beeAutopeeringEnabled=false
                                sudo sed -i 's/^beeAutopeeringEnabled=.*/beeAutopeeringEnabled='$beeAutopeeringEnabled'/' $swarmConfigs/bee.cfg
                                source $beeConfigParsers/beeAutopeering
                                whiptail --title "Bee - Autopeering" --msgbox "Autopeering has been disabled." 8 65
                            else
                                beeAutopeeringEnabled=true
                                sudo sed -i 's/^beeAutopeeringEnabled=.*/beeAutopeeringEnabled='$beeAutopeeringEnabled'/' $swarmConfigs/bee.cfg
                                source $beeConfigParsers/beeAutopeering
                                whiptail --title "Bee - Autopeering" --msgbox "Autopeering has been enabled." 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/bee.cfg
                        currentBeeMaxDiscoveredPeers=$beeMaxDiscoveredPeers
                        beeMaxDiscoveredPeers=$(whiptail --inputbox "\nSet the max amount of discovered peers via autopeering." 10 65 $beeMaxDiscoveredPeers --title "Bee - Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$beeMaxDiscoveredPeers" ] && [ $currentBeeMaxDiscoveredPeers -ne $beeMaxDiscoveredPeers ] && [ $beeMaxDiscoveredPeers -eq $beeMaxDiscoveredPeers ] 2>/dev/null; then
                                source $beeConfigParsers/beeMaxDiscoveredPeers
                                sudo sed -i 's/^beeMaxDiscoveredPeers=.*/beeMaxDiscoveredPeers='$beeMaxDiscoveredPeers'/' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - Autopeering" --msgbox "Max amount of autodiscovered peeers set to $beeMaxDiscoveredPeers." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        source $swarmConfigs/bee.cfg
                        currentBeeAutopeeringPort=$beeAutopeeringPort
                        beeAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port." 10 65 $beeAutopeeringPort --title "Bee - Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$beeAutopeeringPort" ] && [ $currentBeeAutopeeringPort -ne $beeAutopeeringPort ] && [ $beeAutopeeringPort -eq $beeAutopeeringPort ] 2>/dev/null; then
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw delete allow $currentBeeAutopeeringPort/udp > /dev/null 2>&1
                                    sudo ufw allow $beeAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                source $beeConfigParsers/beeAutopeering
                                sudo sed -i 's/^beeAutopeeringPort=.*/beeAutopeeringPort='$beeAutopeeringPort'/' $swarmConfigs/bee.cfg
                                whiptail --title "Bee - Autopeering" --msgbox "Autopeering port set to \"$beeAutopeeringPort/udp\"!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/bee.cfg
            currentBeeGossipPort=$beeGossipPort
            beeGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $beeGossipPort --title "Bee - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$beeGossipPort" ] && [ $currentBeeGossipPort -ne $beeGossipPort ] && [ $beeGossipPort -eq $beeGossipPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentBeeGossipPort/tcp > /dev/null 2>&1
                        sudo ufw allow $beeGossipPort/tcp > /dev/null 2>&1
                    fi
                    source $beeConfigParsers/beeGossipPort
                    sudo sed -i 's/^beeGossipPort=.*/beeGossipPort='$beeGossipPort'/' $swarmConfigs/bee.cfg
                    whiptail --title "Bee - Gossip" --msgbox "Gossip port set to \"$beeGossipPort/tcp\"!" 8 65
                fi
            fi
        ;;
        "11)")
            source $swarmConfigs/bee.cfg
            currentBeeMaxUnknownPeers=$beeMaxUnknownPeers
            beeMaxUnknownPeers=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentBeeMaxUnknownPeers --title "Bee - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ $currentBeeMaxUnknownPeers -ne $beeMaxUnknownPeers ] && [ $beeMaxUnknownPeers -eq $beeMaxUnknownPeers ] 2>/dev/null; then
                    source $beeConfigParsers/beeMaxUnknownPeers
                    sudo sed -i 's/^beeMaxUnknownPeers=.*/beeMaxUnknownPeers='$beeMaxUnknownPeers'/' $swarmConfigs/bee.cfg
                    whiptail --title "Bee - Gossip" --msgbox "Maximum of unknown neighbors set to \"$beeMaxUnknownPeers\"!" 8 65
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/bee.cfg
            # Bee Networks
            CHOICE=$(
                whiptail --title "Bee - Network" --menu "\nCurrent network: $beeNetwork\n\nChoose an option" 16 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Devnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Bee - Network" --yesno --defaultno "Are you sure you want to change the network to \"mainnet\" (the old database will be deleted)?" 8 65); then
                        currentBeeNetwork=$beeNetwork
                        beeNetwork=mainnet
                        sudo sed -i 's/^beeNetwork=.*/beeNetwork='$beeNetwork'/' $swarmConfigs/bee.cfg
                        source $beeModules/beeNetwork
                    fi
                ;;
                "2)")
                    if [ "comnetOnline" = "true" ]; then
                        if (whiptail --title "Bee - Network" --yesno --defaultno "Are you sure you want to change the network to \"devnet\" (the old database will be deleted)?" 8 65); then
                            currentBeeNetwork=$beeNetwork
                            beeNetwork=devnet
                            sudo sed -i 's/^beeNetwork=.*/beeNetwork='$beeNetwork'/' $swarmConfigs/bee.cfg
                            source $beeModules/beeNetwork
                        fi
                    else
                        whiptail --title "Bee - Network" --msgbox "The Comnet is currently unavailable, please try again later." 8 65
                    fi
                ;;
            esac
        ;;
        "13)")
            source $swarmConfigs/bee.cfg
            # Bee release channel
            CHOICE=$(
                whiptail --title "Bee - Release" --menu "\nSet \"stable\" for official release or \"beta\"/\"alpha\" for releases under development\n\nChoose an option" 16 65 0 \
                "1)" "Stable Release Channel (default)" \
                "2)" "Beta Release Channel" \
                "3)" "Alpha Release Channel" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Bee - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (Bee will be reinstalled)?" 8 65); then
                        currentBeeRelease=$beeRelease
                        beeRelease=stable
                        sudo sed -i 's/^beeRelease=.*/beeRelease='$beeRelease'/' $swarmConfigs/bee.cfg
                        source $beeModules/beeReleaseChannel
                        source $beeModules/beeParser
                    fi
                ;;
                "2)")
                    if (whiptail --title "Bee - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"beta\" (Bee will be reinstalled)?" 8 65); then
                        currentBeeRelease=$beeRelease
                        beeRelease=beta
                        sudo sed -i 's/^beeRelease=.*/beeRelease='$beeRelease'/' $swarmConfigs/bee.cfg
                        source $beeModules/beeReleaseChannel
                        source $beeModules/beeParser
                    fi
                ;;
                "3)")
                    if (whiptail --title "Bee - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"alpha\" (Bee will be reinstalled)?" 8 65); then
                        currentBeeRelease=$beeRelease
                        beeRelease=alpha
                        sudo sed -i 's/^beeRelease=.*/beeRelease='$beeRelease'/' $swarmConfigs/bee.cfg
                        source $beeModules/beeReleaseChannel
                        source $beeModules/beeParser
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R bee:bee $beeHome/config*.json
exitCode=0
