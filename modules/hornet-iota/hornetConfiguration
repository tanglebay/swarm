#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $hornetModules/hornetConfigs
    CHOICE=$(
        whiptail --title "Hornet Configurations" --menu "\nChoose an option" 28 65 0 \
        "1)" "Dashboard" \
        "2)" "API & JWT" \
        "3)" "Node Alias" \
        "4)" "DB Pruning" \
        "5)" "Proof of Work" \
        "6)" "Local Snapshots" \
        "7)" "Enable Plugins" \
        "8)" "Disable Plugins" \
        "9)" "P2P Identity" \
        "10)" "Database Revalidation" \
        "11)" "Gossip Port" \
        "12)" "Autopeering Port" \
        "13)" "Unknown Peers Limit" \
        "14)" "IOTA Network" \
        "15)" "Hornet release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartHornet" = "true" ]; then
            if (whiptail --title "Hornet Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $hornetModules/hornetParser
                    echo 50
                    sudo systemctl restart hornet
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartHornet
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet - Dashboard" --menu "\nChoose an option" 16 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        hornetUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $hornetUsername --title "Hornet - Dashboard" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$hornetUsername" ]; then
                                source $hornetConfigParsers/hornetDashboardUsername
                                if [ "$newHornetUsername" = "true" ]; then
                                    sudo sed -i 's/^hornetUsername=.*/hornetUsername="'$hornetUsername'"/' $swarmConfigs/hornet.cfg
                                    whiptail --title "Hornet - Dashboard" --msgbox "New username \"$hornetUsername\" applied!" 8 65
                                    unset newHornetUsername
                                else
                                    whiptail --title "Hornet - Dashboard" --msgbox "No username change detected!" 8 65
                                fi
                            else
                                whiptail --title "Hornet - Dashboardn" --msgbox "No valid username, please try again!" 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        source $hornetModules/hornetDashboardPwdGen
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet - API & JWT" --menu "\nChoose an option" 20 65 0 \
                    "1)" "API Routes" \
                    "2)" "Generate new JWT token" \
                    "3)" "Show all JWT token" \
                    "4)" "Revoke all JWT token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -z "$hornetVersion" ]; then
                            source $hornetModules/hornetVersion
                        fi
                        if [[ ! $hornetVersion =~ 1\.0\.[0-5] ]] && [ "$hornetVersion" != "1.0.6-rc1" ]; then
                            source $swarmConfigs/hornet.cfg
                            hornetApiRoutes="$hornetApiProtectedRoutes"
                            source $hornetModules/hornetApiRoutes
                            hornetApiRoutes=$(whiptail --title "Hornet - API routes" --checklist "\nSelect (using the spacebar) the Hornet API routes that you want to protect. All routes not selected will be public:" 28 65 11 \
                                "/health" "" $hornetApiRoutesHealth \
                                "/api/v2/info" "" $hornetApiRoutesInfo \
                                "/api/v2/tips" "" $hornetApiRoutesTips \
                                "/api/v2/messages*" "" $hornetApiRoutesMessages \
                                "/api/v2/transactions*" "" $hornetApiRoutesTransactions \
                                "/api/v2/milestones*" "" $hornetApiRoutesMilestones \
                                "/api/v2/outputs*" "" $hornetApiRoutesOutputs \
                                "/api/v2/addresses*" "" $hornetApiRoutesAddresses \
                                "/api/v2/treasury" "" $hornetApiRoutesTreasury \
                                "/api/v2/receipts*" "" $hornetApiRoutesReceipts \
                                "/api/plugins/debug/v1/*" "" $hornetApiRoutesDebug \
                                "/api/plugins/indexer/v1/*" "" $hornetApiRoutesIndexer \
                                "/api/plugins/mqtt/v1" "" $hornetApiRoutesMqtt \
                                "/api/plugins/participation/v1/events*" "" $hornetApiRoutesParticipationEvents \
                                "/api/plugins/participation/v1/outputs*" "" $hornetApiRoutesParticipationOutputs \
                                "/api/plugins/participation/v1/addresses*" "" $hornetApiRoutesParticipationAddresses 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            hornetApiRoutes=$(echo $hornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                            if [ "$exitStatus" != "1" ]; then
                                hornetUpdateApiRoutes=true
                                source $hornetModules/hornetApiRoutes
                                source $hornetConfigParsers/hornetApiPublicRoutes
                                unset hornetUpdateApiRoutes
                            fi
                            unset hornetApiRoutes
                        else
                            whiptail --title "Hornet - API routes" --msgbox "Hornet API routes are currently not available." 8 65
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Hornet - API & JWT" --yesno --defaultno "Are you sure you want to generate a new JWT token?" 8 65); then
                            sudo systemctl stop hornet
                            hornetApiJwtToken=$( cd $hornetHome ; hornet tools jwt-api | awk '{ print $5 }')
                            if [ ! -z "$hornetApiJwtToken" ]; then
                                sudo sed -i 's~^hornetApiJwtToken=.*~hornetApiJwtToken="'$hornetApiJwtToken'"~' $swarmConfigs/hornet.cfg
                                echo $hornetApiJwtToken >> $swarmLogs/hornetJwtToken.log
                                clear
                                echo ""
                                echo $hornetApiJwtToken
                                echo ""
                                sudo systemctl start hornet
                                read -n 1 -s -r -p "Press any key to continue"
                            else
                                sudo systemctl start hornet
                                whiptail --title "Hornet - API & JWT" --msgbox "Error generating JWT token, please try again later." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        if [ -f "$swarmLogs/hornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/hornetJwtToken.log
                        else
                            whiptail --title "Hornet - API & JWT" --msgbox "No JWT token log found, please generate one first!" 8 65
                        fi
                    ;;
                    "4)")
                        if (whiptail --title "Hornet - API & JWT" --yesno --defaultno "Are you sure you want to revoke all JWT tokens?" 8 65); then
                            hornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                            sudo sed -i 's~^hornetApiJwtSalt=.*~hornetApiJwtSalt="'$hornetApiJwtSalt'"~' $swarmConfigs/hornet.cfg
                            {
                                echo 0
                                echo 25
                                source $hornetConfigParsers/hornetApiJwtSalt
                                sudo rm -rf $swarmLogs/hornetJwt.log
                                echo 50
                                source $hornetConfigParsers/hornetIdentity
                                echo 75
                                sudo sed -i 's~^hornetApiJwtToken=.*~hornetApiJwtToken=""~' $swarmConfigs/hornet.cfg
                                echo 100
                            } | whiptail --gauge "Please wait while all JWT tokens will be revoked..." 8 65 0
                            restartHornet=true
                            unset hornetApiJwtToken
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            hornetAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $hornetAlias --title "Hornet - Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$hornetAlias" ]; then
                source $hornetConfigParsers/hornetAlias
                if [ "$newHornetAlias" = "true" ]; then
                    sudo sed -i 's~^hornetAlias=.*~hornetAlias="'$hornetAlias'"~' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Alias" --msgbox "New alias \"$hornetAlias\" applied!" 8 65
                    unset newHornetAlias
                else
                    whiptail --title "Hornet - Alias" --msgbox "No node alias change detected!" 8 65
                fi
            fi
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                # Hornet Pruning
                if [ "$hornetPruningEnabled" = "true" ]; then
                    hornetPruningEnabledStatus=enabled
                else
                    hornetPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet - Pruning" --menu "\nStatus: $hornetPruningEnabledStatus\n\nChoose an option" 20 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$hornetPruning" = "true" ]; then
                            hornetPruningStatus=enabled
                        else
                            hornetPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet - Pruning" --menu "\nStatus: $hornetPruningEnabledStatus\n\nChoose an option" 16 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                hornetPruningEnabled=true
                                source $hornetConfigParsers/hornetPruningEnabled
                                sudo sed -i 's/^hornetPruningEnabeld=.*/hornetPruningEnabled='$hornetPruningEnabled'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                hornetPruningEnabled=false
                                source $hornetConfigParsers/hornetPruningEnabled
                                sudo sed -i 's/^hornetPruningEnabled=.*/hornetPruningEnabled='$hornetPruningEnabled'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        hornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $hornetPruningDatabaseSize --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            hornetPruningDatabaseSize=${hornetPruningDatabaseSize//[!0-9]/}
                            if [ ! -z "$hornetPruningDatabaseSize" ] && [ $hornetPruningDatabaseSize -eq $hornetPruningDatabaseSize ] 2>/dev/null; then
                                source $hornetConfigParsers/hornetPruningDatabaseSize
                                sudo sed -i 's/^hornetPruningDatabaseSize=.*/hornetPruningDatabaseSize='$hornetPruningDatabaseSize'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning of the database set to ${hornetPruningDatabaseSize}GB!" 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentHornetPruningCooldownTime=$hornetPruningCooldownTime
                        hornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $hornetPruningCooldownTime --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            hornetPruningCooldownTime=${hornetPruningCooldownTime//[!0-9]/}
                            if [ $hornetPruningCooldownTime -gt 0 ] && [ $hornetPruningCooldownTime -lt 60 ]; then
                                source $hornetConfigParsers/hornetPruningCooldownTime
                                sudo sed -i 's/^hornetPruningCooldownTime=.*/hornetPruningCooldownTime='$hornetPruningCooldownTime'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning cooldown time set to ${hornetPruningCooldownTime} minutes!" 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        hornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $hornetPruningPercentage --title "Hornet - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$hornetPruningPercentage" ] && [ $hornetPruningPercentage -eq $hornetPruningPercentage ]; then
                                source $hornetConfigParsers/hornetPruningPercentage
                                sudo sed -i 's/^hornetPruningPercentage=.*/hornetPruningPercentage='$hornetPruningPercentage'/' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Pruning" --msgbox "Pruning percentage set to ${hornetPruningPercentage}%!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            source $swarmConfigs/hornet.cfg
            if [ "$hornetPowEnabled" = "true" ]; then
                hornetPowEnabledStatus=enabled
            else
                hornetPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet - PoW" --menu "\nPOW: $hornetPowEnabledStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetPowEnabled=true
                    source $hornetConfigParsers/hornetPowEnabled
                    source $hornetConfigParsers/hornetPowWorkerCount
                    sudo sed -i 's/^hornetPowEnabled=.*/hornetPowEnabled='$hornetPowEnabled'/' $swarmConfigs/hornet.cfg
                    sudo sed -i 's/^hornetPowWorkerCount=.*/hornetPowWorkerCount='$hornetPowWorkerCount'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    hornetPowEnabled=false
                    source $hornetConfigParsers/hornetPowEnabled
                    source $hornetConfigParsers/hornetPowWorkerCount
                    sudo sed -i 's/^hornetPowEnabled=.*/hornetPowEnabled='$hornetPowEnabled'/' $swarmConfigs/hornet.cfg
                    sudo sed -i 's/^hornetPowWorkerCount=.*/hornetPowWorkerCount='$hornetPowWorkerCount'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "6)")
            source $swarmConfigs/hornet.cfg
            hornetSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $hornetSnapshotInterval --title "Hornet - Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetSnapshotInterval" ] && [ $hornetSnapshotInterval -eq $hornetSnapshotInterval ] 2>/dev/null; then
                    source $hornetConfigParsers/hornetSnapshotInterval
                    sudo sed -i 's/^hornetSnapshotInterval=.*/hornetSnapshotInterval='$hornetSnapshotInterval'/' $swarmConfigs/hornet.cfg
                    if [ "$newHornetSnapshotInterval" = "true" ]; then
                        whiptail --title "Hornet - Snapshots" --msgbox "Snapshot interval changed to $hornetSnapshotInterval milestones!" 8 65
                    else
                        whiptail --title "Hornet - Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                    fi
                fi
            fi
        ;;
        "7)")
            useHornetEnablePlugins=true
            source $swarmConfigs/hornet.cfg
            currentHornetEnablePlugins=$hornetEnablePlugins
            source $hornetModules/hornetPlugins
            hornetEnablePlugins=$(whiptail --title "Hornet - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be activated:" 20 78 5 \
                "Autopeering" "plugin for automatic peering" $hornetPluginAutopeering \
                "Participation" "plugin for voting/staking" $hornetPluginParticipation \
                "MQTT" "plugin to stream messages" $hornetPluginMqtt \
                "Prometheus" "plugin is used for metrics e.g. in Grafana" $hornetPluginPrometheus 3>&1 1>&2 2>&3)
            exitStatus=$?
            hornetEnablePlugins=$(echo $hornetEnablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$hornetEnablePlugins" ] || [[ $hornetEnablePlugins = *autopeering* ]] || [[ $hornetEnablePlugins = *participation* ]] || [[ $hornetEnablePlugins = *mqtt* ]] || [[ $hornetEnablePlugins = *prometheus* ]]; then
                if [ "$hornetEnablePlugins" != "$currentHornetEnablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    source $hornetConfigParsers/hornetEnablePlugins
                    sudo sed -i 's/^hornetEnablePlugins=.*/hornetEnablePlugins="'$hornetEnablePlugins'"/' $swarmConfigs/hornet.cfg
                    if [ ! -z "$hornetEnablePlugins" ]; then
                        whiptail --title "Hornet - Plugins" --msgbox "The following plugins are enabled:\n$hornetEnablePlugins" 14 65
                    else
                        whiptail --title "Hornet - Plugins" --msgbox "There are no plugins enabled for Hornet!" 8 65
                    fi
                fi
                unset hornetEnablePlugins
            fi
            unset useHornetEnablePlugins
        ;;
        "8)")
            useHornetDisablePlugins=true
            source $swarmConfigs/hornet.cfg
            currentHornetDisablePlugins=$hornetDisablePlugins
            source $hornetModules/hornetPlugins
            hornetDisablePlugins=$(whiptail --title "Hornet - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be deactivated:" 10 78 1 \
                "Warpsync" "plugin to sync more faster" $hornetPluginWarpsync 3>&1 1>&2 2>&3)
            exitStatus=$?
            hornetDisablePlugins=$(echo $hornetDisablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$hornetDisablePlugins" ] || [[ $hornetDisablePlugins = *warpsync* ]]; then
                if [ "$hornetDisablePlugins" != "$currentHornetDisablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    source $hornetConfigParsers/hornetDisablePlugins
                    sudo sed -i 's/^hornetDisablePlugins=.*/hornetDisablePlugins="'$hornetDisablePlugins'"/' $swarmConfigs/hornet.cfg
                    if [ ! -z "$hornetDisablePlugins" ]; then
                        whiptail --title "Hornet Plugins" --msgbox "The following plugins are disabled:\n$hornetDisablePlugins" 14 65
                    else
                        whiptail --title "Hornet - Plugins" --msgbox "There are no plugins disabled for Hornet!" 8 65
                    fi
                fi
            else
                unset hornetDisablePlugins
            fi
            unset useHornetDisablePlugins
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/hornet.cfg
                hornetVersion=$(hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet - Identity" --menu "\nChoose an option" 18 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" \
                    "3)" "Convert identityPrivateKey" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/hornet.cfg
                        currentHornetIdentity=$hornetIdentity
                        hornetIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet - Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$hornetIdentity" != "$currentHornetIdentity" ] && [ ! -z "$hornetIdentity" ]; then
                                source $hornetConfigParsers/hornetIdentity
                                sudo sed -i 's~^hornetIdentity=.*~hornetIdentity="'$hornetIdentity'"~' $swarmConfigs/hornet.cfg
                                whiptail --title "Hornet - Identity" --msgbox "The following Identity key was set: \n$hornetIdentity!" 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Hornet - Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                            unset hornetIdentity
                            sudo rm -rf $hornetHome/p2pstore/identity.key 2>/dev/null
                            source $hornetConfigParsers/hornetIdentity
                            whiptail --title "Hornet - Identity" --msgbox "The following p2pIdentity key was set: \n$hornetIdentity" 12 65
                            source $swarmConfigs/hornet.cfg
                        fi
                    ;;
                    "3)")
                        if (whiptail --title "Hornet - Identity" --yesno --defaultno "Are you sure you want to convert your previous identityPrivateKey?" 8 65); then
                            hornetP2pIdentity=$(whiptail --inputbox "\nEnter your identityPrivateKey" 10 65 --title "Hornet - Identity" 3>&1 1>&2 2>&3)
                            if [ ! -z "$identityPrivateKey" ]; then
                                source $hornetConfigParsers/hornetIdentity
                                if [ "$hornetIdentityUpdated" = "true" ]; then
                                    whiptail --title "Hornet - Identity" --msgbox "Your converted private key is: \n$hornetIdentity!" 10 65
                                    unset hornetIdentityUpdated
                                fi
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/hornet.cfg
            if [ "$hornetAutoRevalidation" = "true" ]; then
                hornetAutoRevalidationStatus=enabled
            else
                hornetAutoRevalidationStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet - DB Revalidation" --menu "\nDatabase Revalidation: $hornetAutoRevalidationStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable DB revalidation" \
                "2)" "Disable DB revalidation" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    hornetAutoRevalidation=true
                    sudo sed -i 's/^hornetAutoRevalidation=.*/hornetAutoRevalidation=true/' $swarmConfigs/hornet.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet - DB Revalidation" --msgbox "Hornet DB Revalidation enabled!" 8 65
                ;;
                "2)")
                    hornetAutoRevalidation=false
                    sudo sed -i 's/^hornetAutoRevalidation=.*/hornetAutoRevalidation=false/' $swarmConfigs/hornet.cfg
                    source $hornetConfigParsers/hornetAutoRevalidation
                    whiptail --title "Hornet - DB Revalidation" --msgbox "Hornet DB Revalidation disabled!" 8 65
                ;;
            esac
        ;;
        "11)")
            source $swarmConfigs/hornet.cfg
            currentHornetGossipPort=$hornetGossipPort
            hornetGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $hornetGossipPort --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetGossipPort" ] && [ "$currentHornetGossipPort" != "$hornetGossipPort" ] && [ $hornetGossipPort -eq $hornetGossipPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentHornetGossipPort/tcp > /dev/null 2>&1
                        sudo ufw allow $hornetGossipPort/tcp > /dev/null 2>&1
                    fi
                    source $hornetConfigParsers/hornetGossipPort
                    sudo sed -i 's/^hornetGossipPort=.*/hornetGossipPort='$hornetGossipPort'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Gossip" --msgbox "Gossip port set to \"$hornetGossipPort/tcp\"!" 8 65
                    restartHornet=true
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/hornet.cfg
            currentHornetAutopeeringPort=$hornetAutopeeringPort
            hornetAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $hornetAutopeeringPort --title "Hornet - Autopeering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$hornetAutopeeringPort" ] && [ "$currentHornetAutopeeringPort" != "$hornetAutopeeringPort" ] && [ $hornetAutopeeringPort -eq $hornetAutopeeringPort ] 2>/dev/null; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentHornetAutopeeringPort/udp > /dev/null 2>&1
                        sudo ufw allow $hornetAutopeeringPort/udp > /dev/null 2>&1
                    fi
                    source $hornetConfigParsers/hornetAutopeeringPort
                    sudo sed -i 's/^hornetAutopeeringPort=.*/hornetAutopeeringPort='$hornetAutopeeringPort'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Autopeering" --msgbox "Autopeering port set to \"$hornetAutopeeringPort/udp\"!" 8 65
                fi
            fi
        ;;
        "13)")
            source $swarmConfigs/hornet.cfg
            currentHornetUnknownPeersLimit=$hornetUnknownPeersLimit
            hornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentHornetUnknownPeersLimit --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ "$currentHornetUnknownPeersLimit" != "$hornetUnknownPeersLimit" ] && [ $hornetUnknownPeersLimit -eq $hornetUnknownPeersLimit ] && [ ! -z "$hornetUnknownPeersLimit" ] 2>/dev/null; then
                    source $hornetConfigParsers/hornetGossipUnknownPeersLimit
                    sudo sed -i 's/^hornetUnknownPeersLimit=.*/hornetUnknownPeersLimit='$hornetUnknownPeersLimit'/' $swarmConfigs/hornet.cfg
                    whiptail --title "Hornet - Gossip" --msgbox "Maximum of unknown neighbors set to \"$hornetUnknownPeersLimit\"." 8 65
                fi
            fi
        ;;
        "14)")
            source $hornetModules/hornetConfigs
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet - Network" --menu "\nCurrent network: $hornetNetwork\n\nChoose an option" 18 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Comnet (dev)" \
                "3)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentHornetNetwork=$hornetNetwork
                        hornetNetwork=mainnet
                        sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetNetwork
                    fi
                ;;
                "2)")
                    if [ "comnetOnline" = "true" ]; then
                        if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to comnet (the old database will be deleted)?" 8 65); then
                            currentHornetNetwork=$hornetNetwork
                            hornetNetwork=comnet
                            sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                            source $hornetModules/hornetNetwork
                        fi
                    else
                        whiptail --title "Hornet - Network" --msgbox "The Comnet is currently unavailable, please try again later." 8 65
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet - Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentHornetNetwork=$hornetNetwork
                        hornetNetwork=testnet
                        sudo sed -i 's/^hornetNetwork=.*/hornetNetwork='$hornetNetwork'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetNetwork
                    fi
                ;;
            esac
        ;;
        "15)")
            source $swarmConfigs/hornet.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet - Release" --menu "\nSet \"stable\" for official release or \"testing\" for releases under development\n\nChoose an option" 16 65 0 \
                "1)" "Stable Channel (default)" \
                "2)" "Testing Channel (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (hornet will be reinstalled)?" 8 65); then
                        currentHornetRelease=$hornetRelease
                        hornetRelease=stable
                        sudo sed -i 's/^hornetRelease=.*/hornetRelease='$hornetRelease'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetReleaseChannel
                        source $hornetModules/hornetParser
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"testing\" (hornet will be reinstalled)?" 8 65); then
                        currentHornetRelease=$hornetRelease
                        hornetRelease=testing
                        sudo sed -i 's/^hornetRelease=.*/hornetRelease='$hornetRelease'/' $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetReleaseChannel
                        source $hornetModules/hornetParser
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R hornet:hornet $hornetHome/*.json
exitCode=0