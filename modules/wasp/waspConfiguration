#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/wasp.cfg
    CHOICE=$(
        whiptail --title "WASP Configurations" --menu "\nChoose an option" 24 65 0 \
        "" "" \
        "1)" "WASP-CLI" \
        "2)" "Dashboard-Auth" \
        "3)" "Webapi-Auth" \
        "4)" "Enable Plugins" \
        "5)" "Disable Plugins" \
        "6)" "Nodeconn address" \
        "7)" "Network ID" \
        "8)" "Peering Port" \
        "9)" "NanoMsg Port" \
        "10)" "Admin Whitelist" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartWasp" = "true" ] && [ -f "/usr/bin/wasp" ]; then
            if (whiptail --title "WASP Menu" --yesno "Would you like to apply the changes and restart WASP?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $waspModules/waspParser
                    echo 50
                    sudo systemctl restart wasp > /dev/null 2>&1
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and WASP is restarted..." 6 65 0
                unset restartWasp
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                CHOICE=$(
                    whiptail --title "WASP - Dashboard" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Show Peering ID" \
                    "2)" "Set trusted neighbor" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/wasp-cli" ]; then
                            waspPeeringId=$(cd /var/lib/wasp ; /usr/bin/wasp-cli peering info | head -n 1 | awk '{ print $2 }')
                            whiptail --title "WASP - CLI" --msgbox "$waspAlias Peering-ID: $waspPeeringId" 8 65
                        else
                            whiptail --title "WASP - CLI" --msgbox "Please install Wasp first." 8 65
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/wasp-cli" ]; then
                            inputNeighborId=$(whiptail --inputbox "\nSet the wasp ID of the new neighbor:" 8 65 --title "WASP - CLI" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ "$exitStatus" != "1" ] && [ ! -z "$inputNeighborId" ]; then
                                inputNeighborNetId=$(whiptail --inputbox "\nSet the wasp NetID of the new neighbor:" 8 65 --title "WASP - CLI" 3>&1 1>&2 2>&3)
                                exitStatus=$?
                                if [ "$exitStatus" != "1" ] && [ ! -z "$inputNeighborNetId" ]; then
                                    (cd /var/lib/wasp ; /usr/bin/wasp-cli peering trust $inputNeighborId $inputNeighborNetId)
                                fi
                            fi
                        else
                            whiptail --title "WASP - CLI" --msgbox "Please install Wasp first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                # wasp Dashboard
                CHOICE=$(
                    whiptail --title "WASP - Dashboard" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        waspDashboardAuthUsername=$(whiptail --inputbox "\nPlease set a username for the dashboard login:" 8 65 $waspDashboardAuthUsername --title "WASP - Dashboard" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ ! -z "$waspDashboardAuthUsername" ] && [ "$exitStatus" != "1" ]; then
                            if [ -f "/usr/bin/wasp" ]; then
                                source $waspConfigParsers/waspDashboardAuthUsername
                            fi
                            sudo sed -i 's/^waspDashboardAuthUsername=.*/waspDashboardAuthUsername="'$waspDashboardAuthUsername'"/' $swarmConfigs/wasp.cfg
                            whiptail --title "WASP - Dashboard" --msgbox "New Dashboard username for auth applied!" 8 65
                        fi
                    ;;
                    "2)")
                        waspDashboardAuthPassword=$(whiptail --passwordbox "\nPlease set a secure password for your dashboard login:" 8 65 --title "WASP - Dashboard" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$exitStatus" != "1" ] && [ ! -z "$waspDashboardAuthPassword" ]; then
                            waspDashboardAuthPassword2=$(whiptail --passwordbox "\nPlease re-enter the password:" 8 65 --title "WASP - Dashboard" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ "$exitStatus" != "1" ] && [ ! -z "$waspDashboardAuthPassword2" ]; then
                                if [ "$waspDashboardAuthPassword" = "$waspDashboardAuthPassword2" ]; then
                                    if [ -f "/usr/bin/wasp" ]; then
                                        source $waspConfigParsers/waspDashboardAuthPassword
                                    fi
                                    sudo sed -i 's/^waspDashboardAuthPassword=.*/waspDashboardAuthPassword="'$waspDashboardAuthPassword'"/' $swarmConfigs/wasp.cfg
                                    whiptail --title "WASP - Dashboard" --msgbox "New Dashboard credentials applied!" 8 65
                                else
                                    whiptail --title "WASP - Dashboard" --msgbox "No valid credentials, please try again!" 8 65
                                fi
                            fi
                        fi
                        unset waspDashboardAuthPassword2
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/wasp.cfg
                if [ "$waspWebapiAuthEnabled" = "true" ]; then
                    waspWebapiAuthEnabledMenu="Disable"
                else
                    waspWebapiAuthEnabledMenu="Enable"
                fi
                # wasp webapi
                CHOICE=$(
                    whiptail --title "WASP - WebAPI" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "$waspWebapiAuthEnabledMenu WebAPI-Auth" \
                    "2)" "WebAPI Credentials" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/sbin/nginx" ]; then
                            if [ ! -d "/etc/nginx/goshimmer" ]; then
                                sudo mkdir -p /etc/nginx/goshimmer
                            fi
                            if [ ! -f "/etc/nginx/goshimmer/.htpasswd_webapi" ]; then
                                sudo touch /etc/nginx/goshimmer/.htpasswd_webapi
                            fi
                            waspWebapiAuthHash=$(cat /etc/nginx/wasp/.htpasswd_webapi)
                            if [ ! -z "$waspWebapiAuthHash" ]; then
                                waspWebapiAuthEnabledMenu="${waspWebapiAuthEnabledMenu,,}"
                                if (whiptail --title "WASP - WebAPI" --yesno --defaultno "Do you really want to $waspWebapiAuthEnabledMenu authentication for the webAPI?" 8 65); then
                                    if [ "$waspWebapiAuthEnabled" = "true" ]; then
                                        waspWebapiAuthEnabled=false
                                        waspWebapiAuthEnabledMenu="disabled"
                                    else
                                        waspWebapiAuthEnabled=true
                                        waspWebapiAuthEnabledMenu="enabled"
                                    fi
                                    sudo sed -i 's/^waspWebapiAuthEnabled=.*/waspWebapiAuthEnabled='$waspWebapiAuthEnabled'/' $swarmConfigs/wasp.cfg
                                    source $waspconfigParsers/waspWebapiAuth
                                    whiptail --title "WASP - WebAPI" --msgbox "WebAPI authentication $waspWebapiAuthEnabledMenu!" 8 65
                                fi
                            else
                                whiptail --title "WASP - WebAPI" --msgbox "Please set the WebAPI credentials first!" 8 65
                            fi
                        else
                            whiptail --title "WASP - WebAPI" --msgbox "Please install the proxy first before you can set the login credentials." 8 65
                        fi
                    ;;
                    "2)")
                        waspWebapiAuthUsername=$(whiptail --inputbox "\nPlease set a username for the webAPI login:" 8 65 --title "WASP - WebAPI" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$exitStatus" != "1" ] && [ ! -z "$waspWebapiAuthUsername" ]; then
                            waspWebapiAuthPassword=$(whiptail --passwordbox "\nPlease set a secure password for the webAPI login:" 8 65 --title "WASP - WebAPI" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ "$exitStatus" != "1" ] && [ ! -z "$waspWebApiAuthPassword" ]; then
                                waspWebapiAuthPassword2=$(whiptail --passwordbox "\nPlease set a secure password for the webAPI login:" 8 65 --title "WASP - WebAPI" 3>&1 1>&2 2>&3)
                                exitStatus=$?
                                if [ "$exitStatus" != "1" ] && [ ! -z "$waspWebApiAuthPassword2" ]; then
                                    source $waspConfigParsers/waspWebapiAuthHash
                                    whiptail --title "WASP - WebAPI" --msgbox "New Dashboard credentials applied!" 8 65
                                else
                                    whiptail --title "WASP - WebAPI" --msgbox "No valid credentials, please try again!" 8 65
                                fi
                            fi
                        fi
                        unset waspWebapiAuthUsername
                        unset waspWebapiAuthPassword
                        unset waspWebapiAuthPassword2
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            useWaspEnablePlugins=true
            source $swarmConfigs/wasp.cfg
            currentWaspEnablePlugins=$waspEnablePlugins
            source $waspModules/waspPlugins
            waspEnablePlugins=$(whiptail --title "WASP - Plugins" --checklist "\nSelect (with spacebar) the WASP plugins to be activated:" 10 78 2 3>&1 1>&2 2>&3)
            exitStatus=$?
            waspEnablePlugins=$(echo $waspEnablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ "$waspEnablePlugins" != "$currentWaspEnablePlugins" ] && [ "$exitStatus" != "1" ]; then
                if [ -f "/usr/bin/wasp" ]; then
                    source $waspConfigParsers/waspEnablePlugins
                fi
                sudo sed -i 's/^waspEnablePlugins=.*/waspEnablePlugins="'$waspEnablePlugins'"/' $swarmConfigs/wasp.cfg
                if [ ! -z "$waspEnablePlugins" ]; then
                    whiptail --title "WASP - Plugins" --msgbox "The following plugins are enabled: $waspEnablePlugins!" 8 65
                else
                    whiptail --title "WASP - Plugins" --msgbox "There are no plugins enabled for WASP!" 8 65
                fi
                restartWasp=true
            fi
            unset useWaspEnablePlugins
        ;;
        "5)")
            useWaspDisablePlugins=true
            source $swarmConfigs/wasp.cfg
            currentWaspDisablePlugins=$waspDisablePlugins
            source $waspModules/waspPlugins
            waspDisablePlugins=$(whiptail --title "WASP - Plugins" --checklist "\nSelect (with spacebar) the WASP plugins to be deactivated:" 14 78 2 3>&1 1>&2 2>&3)
            exitStatus=$?
            waspDisablePlugins=$(echo $waspDisablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ "$waspDisablePlugins" != "$currentWaspDisablePlugins" ] && [ "$exitStatus" != "1" ]; then
                if [ -f "/usr/bin/wasp" ]; then
                    source $waspConfigParsers/waspDisablePlugins
                fi
                sudo sed -i 's/^waspDisablePlugins=.*/waspDisablePlugins="'$waspDisablePlugins'"/' $swarmConfigs/wasp.cfg
                if [ ! -z "$waspDisablePlugins" ]; then
                    whiptail --title "WASP Plugins" --msgbox "The following plugins are disabled: $waspDisablePlugins!" 8 65
                else
                    whiptail --title "WASP - Plugins" --msgbox "There are no plugins disabled for WASP!" 8 65
                fi
                restartWasp=true
            fi
            unset useWaspDisablePlugins
        ;;
        "6)")
            currentWaspNodeconnAddress=$waspNodeconnAddress
            waspNodeconnAddress=$(whiptail --inputbox "\nPlease enter the address of a goshimmer node with active TXstream:" 10 65 $currentWaspNodeconnAddress --title "WASP - Nodeconn" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ "$exitStatus" != "1" ]; then
                if [ ! -z "$waspNodeconnAddress" ] && [ "$currentWaspNodeconnAddress" != "$waspNodeconnAddress" ]; then
                    if [ -f "/usr/bin/wasp" ]; then
                        source $waspConfigParsers/waspNodeconnAddress
                    fi
                    sudo sed -i 's/^waspNodeconnAddress=.*/waspNodeconnAddress="'$waspNodeconnAddress'"/' $swarmConfigs/wasp.cfg
                    whiptail --title "WASP - Nodeconn" --msgbox "New WASP to Goshimmer connection applied!" 8 65
                fi
            fi
        ;;
        "7)")
            source $swarmConfigs/wasp.cfg
            currentWaspNetworkId=$waspNetworkId
            waspNetworkId=$(whiptail --inputbox "\nSet the network ID for the committee communication." 10 65 $waspNetworkId --title "WASP - NetID" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ "$exitStatus" != "1" ] && [ ! -z "$waspNetworkId" ] && [ "$currentWaspNetworkId" != "$waspNetworkId" ]; then
                if [ -f "/usr/bin/wasp" ]; then
                    source $waspConfigParsers/waspNetworkId
                fi
                sudo sed -i 's/^waspNetworkId=.*/wasNetworkId="'$waspNetworkId'"/' $swarmConfigs/wasp.cfg
                whiptail --title "WASP - NetID" --msgbox "Network ID was set to \"$waspNetworkId\"!" 8 65
            fi
        ;;
        "8)")
            source $swarmConfigs/wasp.cfg
            currentWaspPeeringPort=$waspPeeringPort
            waspPeeringPort=$(whiptail --inputbox "\nSet the peering (network) port for the committee communication." 10 65 $waspPeeringPort --title "WASP - Peering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ "$exitStatus" != "1" ] && [ ! -z "$waspPeeringPort" ] && [ $currentWaspPeeringPort -ne $waspPeeringPort ] && [ $waspPeeringPort -eq $waspPeeringPort ] 2>/dev/null; then
                if [ -f "/usr/bin/wasp" ]; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentWaspPeeringPort/tcp > /dev/null 2>&1
                        sudo ufw allow $waspPeeringPort/tcp > /dev/null 2>&1
                    fi
                    source $waspConfigParsers/waspPeeringPort
                fi
                sudo sed -i 's/^waspPeeringPort=.*/waspPeeringPort='$waspPeeringPort'/' $swarmConfigs/wasp.cfg
                whiptail --title "WASP - Peering" --msgbox "Peering port was set to \"$waspPeeringPort/tcp\"!" 8 65
            fi
        ;;
        "9)")
            source $swarmConfigs/wasp.cfg
            currentWaspNanomsgPort=$waspNanomsgPort
            waspNanomsgPort=$(whiptail --inputbox "\nSet the nanomsg port for the committee communication." 10 65 $waspNanomsgPort --title "WASP - Peering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ "$exitStatus" != "1" ] && [ ! -z "$waspNanomsgPort" ] && [ $currentWaspNanomsgPort -ne $waspNanomsgPort ] && [ $waspNanomsgPort -eq $waspNanomsgPort ] 2>/dev/null; then
                if [ -f "/usr/bin/wasp" ]; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $currentWaspNanomsgPort/tcp > /dev/null 2>&1
                        sudo ufw allow $waspNanomsgPort/tcp > /dev/null 2>&1
                    fi
                    source $waspConfigParsers/waspNanomsgPort
                fi
                sudo sed -i 's/^waspNanomsgPort=.*/waspNanomsgPort='$waspNanomsgPort'/' $swarmConfigs/wasp.cfg
                whiptail --title "WASP - Nanomsg" --msgbox "Nanomsg port was set to \"$waspNanomsgPort/tcp\"!" 8 65
            fi
        ;;
        "10)")
            source $swarmConfigs/wasp.cfg
            currentWaspWebapiAdminWhitelist=$waspWebapiAdminWhitelist
            waspWebapiAdminWhitelist=$(whiptail --inputbox "\nAllow addresses (separated by comma) to access the admin webapi." 10 65 $waspWebapiAdminWhitelist --title "WASP - Admin Whitelist" 3>&1 1>&2 2>&3)
            exitStatus=$?
            waspWebapiAdminWhitelist=$(echo $waspWebapiAdminWhitelist | tr -d ' ')
            if [ "$exitStatus" != "1" ] && [ ! -z "$waspWebapiAdminWhitelist" ] && [ "$currentWaspWebapiAdminWhitelist" != "$waspWebapiAdminWhitelist" ]; then
                if [ -f "/usr/bin/wasp" ]; then
                    source $waspConfigParsers/waspWebapiAdminWhitelist
                fi
                sudo sed -i 's/^waspWebapiAdminWhitelist=.*/waspWebapiAdminWhitelist="'$waspWebapiAdminWhitelist'"/' $swarmConfigs/wasp.cfg
                whiptail --title "WASP - Admin Whitelist" --msgbox "\nFollowing addresses are admin \"$waspWebapiAdminWhitelist\"!" 10 65
            fi
        ;;
    esac
done
sudo chown -R wasp:wasp $waspHome/*.json
exitCode=0