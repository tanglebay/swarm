#!/bin/bash
crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled
while [ $exitCode -lt 1 ]; do
    if [ "$swarmAutoUpdate" = "true" ]; then
        swarmAutoUpdateMenu="Disable"
    else
        swarmAutoUpdateMenu="Enable"
    fi
    if [ "$proxyCheck" = "true" ]; then
        proxyCheckMenu="Disable"
    else
        proxyCheckMenu="Enable"
    fi

    CHOICE=$(
        whiptail --title "Watchdog - Configuration" --menu "\nWachtdog: $watchdogStatus\n\nChoose an option" 24 65 0 \
        "1)" "Hornet [Watchdog]" \
        "2)" "Bee [Watchdog]" \
        "3)" "GoShimmer [Watchdog]" \
        "4)" "WASP [Watchdog]" \
        "5)" "INX [Watchdog]" \
        "6)" "Telegram Notifications [Watchdog]" \
        "7)" "Update Watchdog" 3>&2 2>&1 1>&3
    )
    exitStatus=$?
    if [ "$exitStatus" = "1" ]; then
        exitCode=1
    fi
    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "Hornet - Watchdog" --menu "\nChoose an option" 24 65 0 \
                    "1)" "[IOTA] Hornet" \
                    "2)" "[SHIMMER] Hornet" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$hornetAutoUpdate" = "true" ]; then
                                hornetAutoUpdateMenu="Disable"
                            else
                                hornetAutoUpdateMenu="Enable"
                            fi
                            if [ "$hornetAllowDbReset" = "true" ]; then
                                hornetAllowDbResetMenu="Forbid"
                            else
                                hornetAllowDbResetMenu="Allow"
                            fi
                            if [ "$hornetServiceStatusCheck" = "true" ]; then
                                hornetServiceStatusCheckMenu="Disable"
                            else
                                hornetServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "SWARM - Hornet" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$hornetAutoUpdateMenu Hornet AutoUpdater" \
                                "2)" "$hornetAllowDbResetMenu Hornet database reset" \
                                "3)" "$hornetServiceStatusCheckMenu Hornet service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$hornetAutoUpdate" = "true" ]; then
                                        hornetAutoUpdate=false
                                        hornetAutoUpdateMenu="disabled"
                                    else
                                        hornetAutoUpdate=true
                                        hornetAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^hornetAutoUpdate=.*/hornetAutoUpdate='$hornetAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "Watchdog - Hornet" --msgbox "Hornet AutoUpdater $hornetAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$hornetAllowDbReset" = "true" ]; then
                                        hornetAllowDbReset=false
                                        hornetAllowDbResetMenu="disabled"
                                    else
                                        hornetAllowDbReset=true
                                        hornetAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^hornetAllowDbReset=.*/hornetAllowDbReset='$hornetAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Hornet" --msgbox "Delete Hornet database $hornetAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$hornetServiceStatusCheck" = "true" ]; then
                                        hornetServiceStatusCheck=false
                                        hornetServiceStatusCheckMenu="disabled"
                                    else
                                        hornetServiceStatusCheck=true
                                        hornetServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^hornetServiceStatusCheck=.*/hornetServiceStatusCheck='$hornetServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Hornet" --msgbox "Watchdog Hornet service check $hornetServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "2)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$shimmerHornetAutoUpdate" = "true" ]; then
                                shimmerHornetAutoUpdateMenu="Disable"
                            else
                                shimmerHornetAutoUpdateMenu="Enable"
                            fi
                            if [ "$shimmerHornetAllowDbReset" = "true" ]; then
                                shimmerHornetAllowDbResetMenu="Forbid"
                            else
                                shimmerHornetAllowDbResetMenu="Allow"
                            fi
                            if [ "$shimmerHornetServiceStatusCheck" = "true" ]; then
                                shimmerHornetServiceStatusCheckMenu="Disable"
                            else
                                shimmerHornetServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "[SHIMMER] Hornet - Watchdog" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$shimmerHornetAutoUpdateMenu Hornet-Shimmer AutoUpdater" \
                                "2)" "$shimmerHornetAllowDbResetMenu Hornet-Shimmer database reset" \
                                "3)" "$shimmerHornetServiceStatusCheckMenu Hornet-Shimmer service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$shimmerHornetAutoUpdate" = "true" ]; then
                                        shimmerHornetAutoUpdate=false
                                        shimmerHornetAutoUpdateMenu="disabled"
                                    else
                                        shimmerHornetAutoUpdate=true
                                        shimmerHornetAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerHornetAutoUpdate=.*/shimmerHornetAutoUpdate='$shimmerHornetAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Hornet - Watchdog" --msgbox "Hornet AutoUpdater $shimmerHornetAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$shimmerHornetAllowDbReset" = "true" ]; then
                                        shimmerHornetAllowDbReset=false
                                        shimmerHornetAllowDbResetMenu="disabled"
                                    else
                                        shimmerHornetAllowDbReset=true
                                        shimmerHornetAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerHornetAllowDbReset=.*/shimmerHornetAllowDbReset='$shimmerHornetAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Hornet - Watchdog" --msgbox "Delete Hornet database $shimmerHornetAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$shimmerHornetServiceStatusCheck" = "true" ]; then
                                        shimmerHornetServiceStatusCheck=false
                                        shimmerHornetServiceStatusCheckMenu="disabled"
                                    else
                                        shimmerHornetServiceStatusCheck=true
                                        shimmerHornetServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerHornetServiceStatusCheck=.*/shimmerHornetServiceStatusCheck='$shimmerHornetServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Hornet - Watchdog" --msgbox "Watchdog Hornet service check $shimmerHornetServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "SWARM - Bee" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Bee (IOTA)" \
                    "2)" "Bee (Shimmer)" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$beeAutoUpdate" = "true" ]; then
                                beeAutoUpdateMenu="Disable"
                            else
                                beeAutoUpdateMenu="Enable"
                            fi
                            if [ "$beeAllowDbReset" = "true" ]; then
                                beeAllowDbResetMenu="Forbid"
                            else
                                beeAllowDbResetMenu="Allow"
                            fi
                            if [ "$beeServiceStatusCheck" = "true" ]; then
                                beeServiceStatusCheckMenu="Disable"
                            else
                                beeServiceStatusCheckMenu="Enable"
                            fi
                            CHOICE=$(
                                whiptail --title "SWARM - Bee" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$beeAutoUpdateMenu Bee AutoUpdater" \
                                "2)" "$beeAllowDbResetMenu Bee database reset" \
                                "3)" "$beeServiceStatusCheckMenu Bee service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$beeAutoUpdate" = "true" ]; then
                                        beeAutoUpdate=false
                                        beeAutoUpdateMenu="disabled"
                                    else
                                        beeAutoUpdate=true
                                        beeAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^beeAutoUpdate=.*/beeAutoUpdate='$beeAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "Watchdog - Bee" --msgbox "Bee AutoUpdater $beeAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$beeAllowDbReset" = "true" ]; then
                                        beeAllowDbReset=false
                                        beeAllowDbResetMenu="disabled"
                                    else
                                        beeAllowDbReset=true
                                        beeAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^beeAllowDbReset=.*/beeAllowDbReset='$beeAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Bee" --msgbox "Delete Bee database $beeAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$beeServiceStatusCheck" = "true" ]; then
                                        beeServiceStatusCheck=false
                                        beeServiceStatusCheckMenu="disabled"
                                    else
                                        beeServiceStatusCheck=true
                                        beeServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^beeServiceStatusCheck=.*/beeServiceStatusCheck='$beeServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "SWARM - Bee" --msgbox "Watchdog Bee service check $beeServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "2)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$shimmerBeeAutoUpdate" = "true" ]; then
                                shimmerBeeAutoUpdateMenu="Disable"
                            else
                                shimmerBeeAutoUpdateMenu="Enable"
                            fi
                            if [ "$shimmerBeeAllowDbReset" = "true" ]; then
                                shimmerBeeAllowDbResetMenu="Forbid"
                            else
                                shimmerBeeAllowDbResetMenu="Allow"
                            fi
                            if [ "$shimmerBeeServiceStatusCheck" = "true" ]; then
                                shimmerBeeServiceStatusCheckMenu="Disable"
                            else
                                shimmerBeeServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "[SHIMMER] Bee - Watchdog" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$shimmerBeeAutoUpdateMenu Bee AutoUpdater" \
                                "2)" "$shimmerBeeAllowDbResetMenu Bee database reset" \
                                "3)" "$shimmerBeeServiceStatusCheckMenu Bee service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$shimmerBeeAutoUpdate" = "true" ]; then
                                        shimmerBeeAutoUpdate=false
                                        shimmerBeeAutoUpdateMenu="disabled"
                                    else
                                        shimmerBeeAutoUpdate=true
                                        shimmerBeeAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerBeeAutoUpdate=.*/shimmerBeeAutoUpdate='$shimmerBeeAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Bee - Watchdog" --msgbox "Bee AutoUpdater $shimmerBeeAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$shimmerBeeAllowDbReset" = "true" ]; then
                                        shimmerBeeAllowDbReset=false
                                        shimmerBeeAllowDbResetMenu="disabled"
                                    else
                                        shimmerBeeAllowDbReset=true
                                        shimmerBeeAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerBeeAllowDbReset=.*/shimmerBeeAllowDbReset='$shimmerBeeAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Bee - Watchdog" --msgbox "Delete Bee- database $shimmerBeeAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$shimmerBeeServiceStatusCheck" = "true" ]; then
                                        shimmerBeeServiceStatusCheck=false
                                        shimmerBeeServiceStatusCheckMenu="disabled"
                                    else
                                        shimmerBeeServiceStatusCheck=true
                                        shimmerBeeServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerBeeServiceStatusCheck=.*/shimmerBeeServiceStatusCheck='$shimmerBeeServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] Bee - Watchdog" --msgbox "Watchdog Bee service check $shimmerBeeServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$goshimmerAutoUpdate" = "true" ]; then
                    goshimmerAutoUpdateMenu="Disable"
                else
                    goshimmerAutoUpdateMenu="Enable"
                fi
                if [ "$goshimmerDbReset" = "true" ]; then
                    goshimmerDbResetMenu="Forbid"
                else
                    goshimmerDbResetMenu="Allow"
                fi
                if [ "$goshimmerCheckSync" = "true" ]; then
                    goshimmerCheckSyncMenu="Disable"
                else
                    goshimmerCheckSyncMenu="Enable"
                fi
                if [ "$goshimmerDbBackupDownload" = "true" ]; then
                    goshimmerDbBackupDownloadMenu="Disable"
                else
                    goshimmerDbBackupDownloadMenu="Enable"
                fi
                CHOICE=$(
                    whiptail --title "SWARM - GoShimmer" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$goshimmerAutoUpdateMenu GoShimmer AutoUpdater" \
                    "2)" "$goshimmerDbBackupDownloadMenu GoShimmer DB backup download" \
                    "3)" "$goshimmerDbResetMenu GoShimmer database reset" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$goshimmerAutoUpdate" = "true" ]; then
                            goshimmerAutoUpdate=false
                            goshimmerAutoUpdateMenu="disabled"
                        else
                            goshimmerAutoUpdate=true
                            goshimmerAutoUpdateMenu="enabled"
                        fi
                        sudo sed -i 's/^goshimmerAutoUpdate=.*/goshimmerAutoUpdate='$goshimmerAutoUpdate'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - GoShimmer" --msgbox "GoShimmer AutoUpdater $goshimmerAutoUpdateMenu!" 8 65
                    ;;
                    "2)")
                        if [ "$goshimmerDbBackupDownload" = "true" ]; then
                            goshimmerDbBackupDownload=false
                            sudo sed -i 's/^goshimmerDbBackupDownload=.*/goshimmerDbBackupDownload=false/' $swarmConfigs/swarm.cfg
                            whiptail --title "GoShimmer - DB Download" --msgbox "GoShimmer DB backup download disabled." 8 65
                        else
                            goshimmerDbBackupDownload=true
                            sudo sed -i 's/^goshimmerDbBackupDownload=.*/goshimmerDbBackupDownload=true/' $swarmConfigs/swarm.cfg
                            whiptail --title "GoShimmer - DB Download" --msgbox "GoShimmer DB download enabled." 8 65
                        fi
                    ;;
                    "3)")
                        if [ "$goshimmerDbReset" = "true" ]; then
                            goshimmerDbReset=false
                            goshimmerDbResetMenu="disabled"
                        else
                            goshimmerDbReset=true
                            goshimmerDbResetMenu="enabled"
                        fi
                        sudo sed -i 's/^goshimmerDbReset=.*/goshimmerDbReset='$goshimmerDbReset'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - GoShimmer" --msgbox "Delete GoShimmer database $goshimmerDbResetMenu for Watchdog!" 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$waspAutoUpdate" = "true" ]; then
                    waspAutoUpdateMenu="Disable"
                else
                    waspAutoUpdateMenu="Enable"
                fi
                if [ "$waspAllowDbReset" = "true" ]; then
                    waspAllowDbResetMenu="Forbid"
                else
                    waspAllowDbResetMenu="Allow"
                fi

                CHOICE=$(
                    whiptail --title "SWARM - WASP" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$waspAutoUpdateMenu WASP AutoUpdater" \
                    "2)" "$waspAllowDbResetMenu WASP database reset" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$waspAutoUpdate" = "true" ]; then
                            waspAutoUpdate=false
                            waspAutoUpdateMenu="disabled"
                        else
                            waspAutoUpdate=true
                            waspAutoUpdateMenu="enabled"
                        fi
                        sudo sed -i 's/^waspAutoUpdate=.*/waspAutoUpdate='$waspAutoUpdate'/' $swarmConfigs/swarm.cfg
                        whiptail --title "Watchdog - WASP" --msgbox "WASP AutoUpdater $waspAutoUpdateMenu!" 8 65
                    ;;
                    "2)")
                        if [ "$waspAllowDbReset" = "true" ]; then
                            waspAllowDbReset=false
                            waspAllowDbResetMenu="disabled"
                        else
                            waspAllowDbReset=true
                            waspAllowDbResetMenu="enabled"
                        fi
                        sudo sed -i 's/^waspAllowDbReset=.*/waspAllowDbReset='$waspAllowDbReset'/' $swarmConfigs/swarm.cfg
                        whiptail --title "SWARM - WASP" --msgbox "Delete WASP database $waspAllowDbResetMenu for Watchdog!" 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "SWARM - INX" --menu "\nChoose an option" 24 65 0 \
                    "1)" "INX-Indexer" \
                    "2)" "INX-MQTT" \
                    "3)" "INX-Participation" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$shimmerInxIndexerAutoUpdate" = "true" ]; then
                                shimmerInxIndexerAutoUpdateMenu="Disable"
                            else
                                shimmerInxIndexerAutoUpdateMenu="Enable"
                            fi
                            if [ "$shimmerInxIndexerAllowDbReset" = "true" ]; then
                                shimmerInxIndexerAllowDbResetMenu="Forbid"
                            else
                                shimmerInxIndexerAllowDbResetMenu="Allow"
                            fi
                            if [ "$shimmerInxIndexerServiceStatusCheck" = "true" ]; then
                                shimmerInxIndexerServiceStatusCheckMenu="Disable"
                            else
                                shimmerInxIndexerServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "Watchdog - INX [SHIMMER]" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$shimmerInxIndexerAutoUpdateMenu INX-Indexer AutoUpdater" \
                                "2)" "$shimmerInxIndexerAllowDbResetMenu INX-Indexer database reset" \
                                "3)" "$shimmerInxIndexerServiceStatusCheckMenu INX-Indexer service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$shimmerInxIndexerAutoUpdate" = "true" ]; then
                                        shimmerInxIndexerAutoUpdate=false
                                        shimmerInxIndexerAutoUpdateMenu="disabled"
                                    else
                                        shimmerInxIndexerAutoUpdate=true
                                        shimmerInxIndexerAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxIndexerAutoUpdate=.*/shimmerInxIndexerAutoUpdate='$shimmerInxIndexerAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Indexer - Watchdog" --msgbox "INX-Indexer AutoUpdater $shimmerInxIndexerAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$shimmerInxIndexerAllowDbReset" = "true" ]; then
                                        shimmerInxIndexerAllowDbReset=false
                                        shimmerInxIndexerAllowDbResetMenu="disabled"
                                    else
                                        shimmerInxIndexerAllowDbReset=true
                                        shimmerInxIndexerAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxIndexerAllowDbReset=.*/shimmerInxIndexerAllowDbReset='$shimmerInxIndexerAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Indexer - Watchdog" --msgbox "Delete INX-Indexer database $shimmerInxIndexerAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$shimmerInxIndexerServiceStatusCheck" = "true" ]; then
                                        shimmerInxIndexerServiceStatusCheck=false
                                        shimmerInxIndexerServiceStatusCheckMenu="disabled"
                                    else
                                        shimmerInxIndexerServiceStatusCheck=true
                                        shimmerInxIndexerServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^inxIndexerServiceStatusCheck=.*/inxIndexerServiceStatusCheck='$shimmerInxIndexerServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Indexer - Watchdog" --msgbox "Watchdog INX-Indexer service check $shimmerInxIndexerServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "2)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$shimmerInxMqttAutoUpdate" = "true" ]; then
                                shimmerInxMqttAutoUpdateMenu="Disable"
                            else
                                shimmerInxMqttAutoUpdateMenu="Enable"
                            fi
                            if [ "$shimmerInxMqttServiceStatusCheck" = "true" ]; then
                                shimmerInxMqttServiceStatusCheckMenu="Disable"
                            else
                                shimmerInxMqttServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "[SHIMMER] INX-MQTT - Watchdog" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$shimmerInxMqttAutoUpdateMenu INX-MQTT AutoUpdater" \
                                "2)" "$shimmerInxMqttServiceStatusCheckMenu INX-MQTT service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$shimmerInxMqttAutoUpdate" = "true" ]; then
                                        shimmerInxMqttAutoUpdate=false
                                        shimmerInxMqttAutoUpdateMenu="disabled"
                                    else
                                        shimmerInxMqttAutoUpdate=true
                                        shimmerInxMqttAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxMqttAutoUpdate=.*/shimmerInxMqttAutoUpdate='$shimmerInxMqttAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-MQTT - Watchdog" --msgbox "INX-MQTT AutoUpdater $shimmerInxMqttAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$shimmerInxMqttServiceStatusCheck" = "true" ]; then
                                        shimmerInxMqttServiceStatusCheck=false
                                        shimmerInxMqttServiceStatusCheckMenu="disabled"
                                    else
                                        shimmerInxMqttServiceStatusCheck=true
                                        shimmerInxMqttServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxMqttServiceStatusCheck=.*/shimmerInxMqttServiceStatusCheck='$shimmerInxMqttServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-MQTT - Watchdog" --msgbox "Watchdog INX-MQTT service check $shimmerInxMqttServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "3)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/swarm.cfg
                            if [ "$shimmerInxParticipationAutoUpdate" = "true" ]; then
                                shimmerInxParticipationAutoUpdateMenu="Disable"
                            else
                                shimmerInxParticipationAutoUpdateMenu="Enable"
                            fi
                            if [ "$shimmerInxParticipationAllowDbReset" = "true" ]; then
                                shimmerInxParticipationAllowDbResetMenu="Forbid"
                            else
                                shimmerInxParticipationAllowDbResetMenu="Allow"
                            fi
                            if [ "$shimmerInxParticipationServiceStatusCheck" = "true" ]; then
                                shimmerInxParticipationServiceStatusCheckMenu="Disable"
                            else
                                shimmerInxParticipationServiceStatusCheckMenu="Enable"
                            fi

                            CHOICE=$(
                                whiptail --title "[SHIMMER] INX-Participation - Watchdog" --menu "\nChoose an option" 24 65 0 \
                                "1)" "$shimmerInxParticipationAutoUpdateMenu INX-Participation AutoUpdater" \
                                "2)" "$shimmerInxParticipationAllowDbResetMenu INX-Participation database reset" \
                                "3)" "$shimmerInxParticipationServiceStatusCheckMenu INX-Participation service status check" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    if [ "$shimmerInxParticipationAutoUpdate" = "true" ]; then
                                        shimmerInxParticipationAutoUpdate=false
                                        shimmerInxParticipationAutoUpdateMenu="disabled"
                                    else
                                        shimmerInxParticipationAutoUpdate=true
                                        shimmerInxParticipationAutoUpdateMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxParticipationAutoUpdate=.*/shimmerInxParticipationAutoUpdate='$shimmerInxParticipationAutoUpdate'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Participation - Watchdog" --msgbox "INX-Participation AutoUpdater $shimmerInxParticipationAutoUpdateMenu!" 8 65
                                ;;
                                "2)")
                                    if [ "$shimmerInxParticipationAllowDbReset" = "true" ]; then
                                        shimmerInxParticipationAllowDbReset=false
                                        shimmerInxParticipationAllowDbResetMenu="disabled"
                                    else
                                        shimmerInxParticipationAllowDbReset=true
                                        shimmerInxParticipationAllowDbResetMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxParticipationAllowDbReset=.*/shimmerInxParticipationAllowDbReset='$shimmerInxParticipationAllowDbReset'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Participation - Watchdog" --msgbox "Delete INX-Participation database $shimmerInxParticipationAllowDbResetMenu for Watchdog!" 8 65
                                ;;
                                "3)")
                                    if [ "$shimmerInxParticipationServiceStatusCheck" = "true" ]; then
                                        shimmerInxParticipationServiceStatusCheck=false
                                        shimmerInxParticipationServiceStatusCheckMenu="disabled"
                                    else
                                        shimmerInxParticipationServiceStatusCheck=true
                                        shimmerInxParticipationServiceStatusCheckMenu="enabled"
                                    fi
                                    sudo sed -i 's/^shimmerInxParticipationServiceStatusCheck=.*/shimmerInxParticipationServiceStatusCheck='$shimmerInxParticipationServiceStatusCheck'/' $swarmConfigs/swarm.cfg
                                    whiptail --title "[SHIMMER] INX-Participation - Watchdog" --msgbox "Watchdog INX-Participation service check $shimmerInxParticipationServiceStatusCheckMenu!" 8 65
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/swarm.cfg
                if [ "$telegramNotifications" = "true" ]; then
                    telegramNotificationsStatus="Disable"
                else
                    telegramNotificationsStatus="Enable"
                fi
                CHOICE=$(
                    whiptail --title "SWARM - Telegram Notifications" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$telegramNotificationsStatus Telegram Notifications" \
                    "2)" "Set Telegram Bot Token" \
                    "3)" "Set Telegram Channel ID" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$telegramNotifications" = "true" ]; then
                            telegramText="[$HOSTNAME] Watchdog Telegram notifications via SWARM disabled."
                            source $watchdogModules/watchdogTelegram
                            telegramNotifications=false
                            sudo sed -i 's/^telegramNotifications=.*/telegramNotifications=false/' $swarmConfigs/swarm.cfg
                            whiptail --title "SWARM - Telegram Notifications" --msgbox "Telegram notification for Watchdog disabled." 8 65
                        else
                            telegramNotifications=true
                            sudo sed -i 's/^telegramNotifications=.*/telegramNotifications=true/' $swarmConfigs/swarm.cfg
                            telegramText="[$HOSTNAME] Watchdog Telegram notifications via SWARM enabled."
                            source $watchdogModules/watchdogTelegram
                            whiptail --title "SWARM - Telegram Notifications" --msgbox "Telegram notification for Watchdog enabled." 8 65
                        fi
                    ;;
                    "2)")
                        currentTelegramBotToken="$telegramBotToken"
                        telegramBotToken=$(whiptail --inputbox "\nEnter your Telegram Bot Token" 10 65 $telegramBotToken --title "SWARM - Telegram Notifications" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$exitStatus" != "1" ] && [ "$currentTelegramBotToken" != "$telegramBotToken" ]; then
                            sudo sed -i 's~^telegramBotToken=.*~telegramBotToken="'$telegramBotToken'"~' $swarmConfigs/swarm.cfg
                            whiptail --title "SWARM - Telegram Notifications" --msgbox "New Telegram bot token successfully set." 8 65
                        fi
                    ;;
                    "3)")
                        currentTelegramChannelId="$telegramChannelId"
                        telegramChannelId=$(whiptail --inputbox "\nEnter your Telegram Channel ID" 10 65 $telegramChannelId --title "SWARM - Telegram Notifications" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$exitStatus" != "1" ] && [ "$currentTelegramChannelId" != "$telegramChannelId" ]; then
                            sudo sed -i 's~^telegramChannelId=.*~telegramChannelId="'$telegramChannelId'"~' $swarmConfigs/swarm.cfg
                            whiptail --title "SWARM - Telegram Notifications" --msgbox "New Telegram channel ID successfully set." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "7)")
            if (whiptail --title "Watchdog - Update" --yesno --defaultno "Do you really want to update Watchdog?" 8 65); then
                ( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
                ( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1
                whiptail --title "Watchdog - Update" --msgbox "Watchdog cronjob updated." 8 65
            fi
        ;;
    esac
done
exitCode=0