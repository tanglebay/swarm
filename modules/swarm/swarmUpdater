#!/bin/bash

if [ "$swarmManualUpdate" = "true" ]; then
    if [ ! -z "$swarmUpdateAuthUser" ] && [ ! -z "$swarmUpdateAuthPwd" ]; then
        {
            echo 0
            echo 10
            if [ ! -d "$swarmTmp" ]; then
                sudo mkdir -p $swarmTmp/v$latestSwarmVersion > /dev/null 2>&1
            fi
            echo 20
            sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
            sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1
            echo 30
            sudo wget -q -O $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz https://$swarmUpdateAuthUser:$swarmUpdateAuthPwd@tanglebay.com/download/swarm/update/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz
            if [ -s "$swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz" ]; then
                ( cd $swarmTmp/v$latestSwarmVersion ; sudo tar -xzf $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz ) > /dev/null 2>&1
                if [ -f "$swarmTmp/v$latestSwarmVersion/swarm" ]; then
                    swarmUpdated=true
                    sudo cp -rf $swarmTmp/v$latestSwarmVersion/*.* $swarmHome > /dev/null 2>&1

                    # currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
                    # ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
                    # ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1
                    sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1
                    echo 40

                    # Load new env
                    source /var/lib/swarm/environment

                    source $swarmModules/swarmParser

                    echo 45
                    ( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
                    ( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1

                    echo 50

                    if [ -f "/usr/bin/hornet" ]; then
                        if [ -f "/etc/apt/sources.list.d/hornet.list" ]; then
                            sudo rm -rf /etc/apt/sources.list.d/hornet.list > /dev/null 2>&1
                            sudo apt-get -qq update > /dev/null 2>&1
                        fi
                        # source $swarmConfigs/hornet.cfg
                        source $hornetModules/hornetParser
                        if [ "$restartHornet" = "true" ]; then
                            sudo systemctl restart hornet > /dev/null 2>&1
                            unset restartHornet
                        fi
                    fi
                    echo 55
                    if [ -f "/usr/bin/hornet-shimmer" ]; then
                        # source $swarmConfigs/hornet.cfg
                        source $hornetShimmerModules/hornetShimmerParser
                        if [ "$restartHornetShimmer" = "true" ]; then
                            sudo systemctl restart hornet-shimmer > /dev/null 2>&1
                            unset restartHornetShimmer
                        fi
                    fi
                    echo 60
                    if [ -f "/usr/bin/bee" ]; then
                        beeIgnorePeersUpdate=true
                        source $beeModules/beeParser
                        if [ "$restartBee" = "true" ]; then
                            sudo systemctl restart bee > /dev/null 2>&1
                        fi
                        unset beeIgnorePeersUpdate
                    fi
                    echo 65
                    if [ -f "/usr/bin/bee-shimmer" ]; then
                        beeShimmerIgnorePeersUpdate=true
                        source $beeShimmerModules/beeShimmerParser
                        if [ "$restartBeeShimmer" = "true" ]; then
                            sudo systemctl restart bee-shimmer > /dev/null 2>&1
                        fi
                        unset beeShimmerIgnorePeersUpdate
                    fi
                    echo 70
                    if [ -f "/usr/bin/goshimmer" ]; then
                        # source $swarmConfigs/hornet.cfg
                        source $goshimmerModules/goshimmerParser
                        if [ "$restartGoshimmer" = "true" ]; then
                            sudo systemctl restart goshimmer
                            unset restartGoshimmer
                        fi
                    fi
                    echo 80
                    if [ -f "/usr/bin/wasp" ]; then
                        source $waspModules/waspParser
                        if [ "$restartWasp" = "true" ]; then
                            sudo systemctl restart wasp
                            unset restartWasp
                        fi
                    fi
                    echo 90
                    source $proxyModules/proxyAutomaticDeployment
                fi
            fi
            echo 100
        } | whiptail --gauge "Updating SWARM..." 6 65 0
        if [ "$swarmUpdated" = "true" ]; then
            whiptail --title "SWARM Menu" --msgbox "SWARM successfully updated." 8 65
            unset swarmUpdated
            clear
            exit 0
        else
            unset swarmUpdated
            whiptail --title "SWARM Menu" --msgbox "SWARM update failed." 8 65
        fi
    fi
else
    if [ ! -z "$swarmUpdateAuthUser" ] && [ ! -z "$swarmUpdateAuthPwd" ]; then
        if [ ! -d "$swarmTmp" ]; then
            sudo mkdir -p $swarmTmp > /dev/null 2>&1
        fi

        sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
        sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1

        sudo wget -q -O $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz https://$swarmUpdateAuthUser:$swarmUpdateAuthPwd@tanglebay.com/download/swarm/update/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz
        if [ -s "$swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz" ]; then
            ( cd $swarmTmp/v$latestSwarmVersion ; sudo tar -xzf $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz ) > /dev/null 2>&1
            if [ -f "$swarmTmp/v$latestSwarmVersion/swarm" ]; then
                sudo cp -rf $swarmTmp/v$latestSwarmVersion/*.* $swarmHome > /dev/null 2>&1
                source $swarmModules/swarmUpdaterAfter
            fi
        fi

        # currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
        # ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
        # ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1

        
    fi
fi