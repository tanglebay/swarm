#!/bin/bash

if [ "$swarmManualUpdate" = "true" ]; then
    if [ ! -z "$swarmAuthUser" ] && [ ! -z "$swarmAuthPwd" ]; then
        source $swarmModules/swarmAuth
        if [ "$swarmAuth" = "200" ]; then
            {
                echo 0
                echo 10
                if [ ! -d "$swarmTmp" ]; then
                    sudo mkdir -p $swarmTmp/v$latestSwarmVersion > /dev/null 2>&1
                fi
                echo 20
                sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
                if [ -f "$swarmLogs/githubVersion" ]; then
                    sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1
                fi

                echo 30
                swarmRemoteChecksum=$(curl --max-time 5 -Ls https://$swarmAuthUser:$swarmAuthPwd@$swarmUrl/download/swarm/v$latestSwarmVersion/checksum.txt)
                sudo wget -q -O $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz https://$swarmAuthUser:$swarmAuthPwd@$swarmUrl/download/swarm/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz
                swarmChecksum=$(shasum -a 512 $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz | awk '{ print $1 }')
                if [ "$swarmChecksum" = "$swarmRemoteChecksum" ]; then
                    ( cd $swarmTmp/v$latestSwarmVersion ; sudo tar -xzf $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz ) > /dev/null 2>&1
                    if [ -f "$swarmTmp/v$latestSwarmVersion/swarm/update.lock" ]; then
                        sudo rm -rf $swarmHome > /dev/null 2>&1
                        sudo mv -f $swarmTmp/v$latestSwarmVersion/swarm /var/lib > /dev/null 2>&1

                        sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1
                        echo 40

                        # Load new env
                        source /var/lib/swarm/environment

                        source $swarmModules/swarmParser

                        echo 45
                        ( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
                        ( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1

                        echo 50
                        # Remove Hornet apt
                        if [ -f "/etc/apt/sources.list.d/hornet.list" ] || [ -f "/etc/apt/sources.list.d/hornet.list.distUpgrade" ]; then
                            sudo rm -rf /etc/apt/sources.list.d/hornet* > /dev/null 2>&1
                            sudo apt-get -qq update > /dev/null 2>&1
                        fi

                        if [ -f "/usr/bin/iota-hornet" ]; then
                            # source $swarmConfigs/hornet.cfg
                            source $iotaHornetModules/hornetParser
                            if [ "$restartIotaHornet" = "true" ]; then
                                sudo systemctl restart iota-hornet > /dev/null 2>&1
                                unset restartIotaHornet
                            fi
                        fi
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            # source $swarmConfigs/hornet.cfg
                            source $shimmerHornetModules/hornetParser
                            if [ "$restartShimmerHornet" = "true" ]; then
                                sudo systemctl restart shimmer-hornet > /dev/null 2>&1
                                unset restartShimmerHornet
                            fi
                        fi
                        echo 55
                        if [ -f "/usr/bin/iota-bee" ]; then
                            iotaBeeIgnorePeersUpdate=true
                            source $iotaBeeModules/beeParser
                            if [ "$restartIotaBee" = "true" ]; then
                                sudo systemctl restart iota-bee > /dev/null 2>&1
                            fi
                            unset iotaBeeIgnorePeersUpdate
                        fi
                        if [ -f "/usr/bin/shimmer-bee" ]; then
                            shimmerBeeIgnorePeersUpdate=true
                            source $shimmerBeeModules/beeParser
                            if [ "$restartShimmerBee" = "true" ]; then
                                sudo systemctl restart shimmer-bee > /dev/null 2>&1
                            fi
                            unset shimmerBeeIgnorePeersUpdate
                        fi
                        echo 60
                        if [ -f "/usr/bin/iota-inx-dashboard" ]; then
                            source $iotaInxDashboardModules/inxDashboardParser
                            if [ "$restartIotaInxDashboard" = "true" ]; then
                                sudo systemctl restart iota-inx-dashboard > /dev/null 2>&1
                                unset restartIotaInxDashboard
                            fi
                        fi
                        if [ -f "/usr/bin/iota-inx-indexer" ]; then
                            source $iotaInxIndexerModules/inxIndexerParser
                            if [ "$restartIotaInxIndexer" = "true" ]; then
                                sudo systemctl restart iota-inx-indexer > /dev/null 2>&1
                                unset restartIotaInxIndexer
                            fi
                        fi
                        if [ -f "/usr/bin/iota-inx-mqtt" ]; then
                            source $iotaInxMqttModules/inxMqttParser
                            if [ "$restartIotaInxMqtt" = "true" ]; then
                                sudo systemctl restart iota-iinx-mqtt > /dev/null 2>&1
                                unset restartIotaInxMqtt
                            fi
                        fi
                        if [ -f "/usr/bin/iota-iinx-participation" ]; then
                            source $iotaInxParticipationModules/inxParticipationParser
                            if [ "$restartIotaInxParticipation" = "true" ]; then
                                sudo systemctl restart iota-iinx-participation > /dev/null 2>&1
                                unset restartIotaInxParticipation
                            fi
                        fi
                        echo 65
                        if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
                            source $shimmerInxDashboardModules/inxDashboardParser
                            if [ "$restartShimmerInxDashboard" = "true" ]; then
                                sudo systemctl restart shimmer-inx-dashboard > /dev/null 2>&1
                                unset restartShimmerInxDashboard
                            fi
                        fi
                        if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
                            source $shimmerInxIndexerModules/inxIndexerParser
                            if [ "$restartShimmerInxIndexer" = "true" ]; then
                                sudo systemctl restart shimmer-inx-indexer > /dev/null 2>&1
                                unset restartShimmerInxIndexer
                            fi
                        fi
                        if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
                            source $shimmerInxMqttModules/inxMqttParser
                            if [ "$restartShimmerInxMqtt" = "true" ]; then
                                sudo systemctl restart shimmer-inx-mqtt > /dev/null 2>&1
                                unset restartShimmerInxMqtt
                            fi
                        fi
                        if [ -f "/usr/bin/shimmer-inx-participation" ]; then
                            source $shimmerInxParticipationModules/inxParticipationParser
                            if [ "$restartShimmerInxParticipation" = "true" ]; then
                                sudo systemctl restart shimmer-inx-participation > /dev/null 2>&1
                                unset restartShimmerInxParticipation
                            fi
                        fi
                        echo 70
                        if [ -f "/usr/bin/goshimmer" ]; then
                            # source $swarmConfigs/hornet.cfg
                            source $goshimmerModules/goshimmerParser
                            if [ "$restartGoshimmer" = "true" ]; then
                                sudo systemctl restart goshimmer > /dev/null 2>&1
                                unset restartGoshimmer
                            fi
                        fi
                        echo 75
                        if [ -f "/usr/bin/wasp" ]; then
                            source $waspModules/waspParser
                            if [ "$restartWasp" = "true" ]; then
                                sudo systemctl restart wasp > /dev/null 2>&1
                                unset restartWasp
                            fi
                        fi
                        echo 90
                        source $proxyModules/proxyAutomaticDeployment
                    fi
                fi
                echo 100
            } | whiptail --gauge "Updating SWARM..." 6 65 0
        fi
        if [ -f "$swarmHome/update.lock" ]; then
            swarmUpdated=true
            source $proxyModules/proxySwarmEndpoint
            sudo rm -rf $swarmHome/update.lock > /dev/null 2>&1
        fi
        if [ "$swarmUpdated" = "true" ]; then
            swarmChecksum=$(shasum -a 512 $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz | awk '{ print $1 }')
            whiptail --title "SWARM Menu" --msgbox "\nSWARM successfully updated.\n\nChecksum: $swarmChecksum" 14 65
            unset swarmUpdated swarmChecksum
            if [ -d "$swarmTmp" ]; then
                sudo rm -rf $swarmTmp > /dev/null 2>&1
            fi
            clear
            exit 0
        else
            if [ -d "$swarmTmp" ]; then
                sudo rm -rf $swarmTmp > /dev/null 2>&1
            fi
            unset swarmUpdated
            whiptail --title "SWARM Menu" --msgbox "SWARM update failed." 8 65
        fi
        unset checkSwarmUpdateAuth swarmChkSum swarmUpdateChkSum
    fi
else
    if [ ! -z "$swarmAuthUser" ] && [ ! -z "$swarmAuthPwd" ]; then
        if [ "$swarmAuth" = "200" ]; then
            if [ ! -d "$swarmTmp/v$latestSwarmVersion" ]; then
                sudo mkdir -p $swarmTmp/v$latestSwarmVersion > /dev/null 2>&1
            fi

            sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
            if [ -f "$swarmLogs/githubVersion" ]; then
                sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1
            fi

            swarmRemoteChecksum=$(curl --max-time 5 -Ls https://$swarmAuthUser:$swarmAuthPwd@$swarmUrl/download/swarm/v$latestSwarmVersion/checksum.txt)
            sudo wget -q -O $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz https://$swarmUpdateAuthUser:$swarmAuthPwd@$swarmUrl/download/swarm/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz
            swarmChecksum=$(shasum -a 512 $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz | awk '{ print $1 }')
            if [ "$swarmChecksum" = "$swarmRemoteChecksum" ]; then
                ( cd $swarmTmp/v$latestSwarmVersion ; sudo tar -xzf $swarmTmp/v$latestSwarmVersion/swarm-v$latestSwarmVersion.tar.gz ) > /dev/null 2>&1
                if [ -f "$swarmTmp/v$latestSwarmVersion/swarm/update.lock" ]; then
                    sudo rm -rf $swarmHome > /dev/null 2>&1
                    sudo mv -f $swarmTmp/v$latestSwarmVersion/swarm /var/lib > /dev/null 2>&1
                    source $swarmModules/swarmUpdaterAfter
                fi
                if [ -d "$swarmTmp" ]; then
                    sudo rm -rf $swarmTmp > /dev/null 2>&1
                fi
            fi
        # currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
        # ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
        # ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1
        fi
        unset swarmAuth swarmRemoteChecksum
    fi
fi