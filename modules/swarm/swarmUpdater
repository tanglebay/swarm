#!/bin/bash

if [ "$swarmManualUpdate" = "true" ]; then
    {
        echo 0
        echo 10
        if [ ! -d "$swarmTmp" ]; then
            sudo mkdir -p $swarmTmp > /dev/null 2>&1
        fi
        echo 20
        sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
        sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1
        echo 30
        currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
        ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
        ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1
        sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1
        echo 40

        # Load new env
        source /var/lib/swarm/environment

        source $swarmModules/swarmParser

        echo 50

        if [ -f "/usr/bin/hornet" ]; then
            # source $swarmConfigs/hornet.cfg
            source $hornetModules/hornetParser
            if [ "$restartHornet" = "true" ]; then
                sudo systemctl restart hornet
                unset restartHornet
            fi
        fi
        echo 55
        if [ -f "/usr/bin/hornet-shimmer" ]; then
            # source $swarmConfigs/hornet.cfg
            source $hornetShimmerModules/hornetShimmerParser
            if [ "$restartHornetShimmer" = "true" ]; then
                sudo systemctl restart hornet-shimmer
                unset restartHornetShimmer
            fi
        fi
        echo 60
        if [ -f "/usr/bin/bee" ]; then
            beeIgnorePeersUpdate=true
            source $beeModules/beeParser
            if [ "$restartBee" = "true" ]; then
                sudo systemctl restart bee
                unset restartBee
                touch /tmp/beeRestart
            fi
            unset beeIgnorePeersUpdate
        fi
        echo 70
        if [ -f "/usr/bin/goshimmer" ]; then
            # source $swarmConfigs/hornet.cfg
            source $goshimmerModules/goshimmerParser
            if [ "$restartGoshimmer" = "true" ]; then
                sudo systemctl restart goshimmer
                unset restartGoshimmer
            fi
        fi
        echo 80
        if [ -f "/usr/bin/wasp" ]; then
            source $waspModules/waspParser
            if [ "$restartWasp" = "true" ]; then
                sudo systemctl restart wasp
                unset restartWasp
            fi
        fi
        echo 90
        source $proxyModules/proxyAutomaticDeployment
        echo 100

    } | whiptail --gauge "Updating SWARM..." 6 65 0
    whiptail --title "SWARM Menu" --msgbox "SWARM successfully updated!" 8 65
    clear
    exit 0
else
    if [ ! -d "$swarmTmp" ]; then
        sudo mkdir -p $swarmTmp > /dev/null 2>&1
    fi

    sudo cp -rf $swarmConfigs/*.cfg $swarmTmp/ > /dev/null 2>&1
    sudo cp -rf $swarmLogs/githubVersion $swarmTmp/ > /dev/null 2>&1

    currentBranch=$( cd $swarmHome ; git rev-parse --abbrev-ref HEAD )
    ( cd $swarmHome ; sudo git pull ) > /dev/null 2>&1
    ( cd $swarmHome ; sudo git reset --hard origin/$currentBranch ) > /dev/null 2>&1

    source $swarmModules/swarmUpdaterAfter
fi