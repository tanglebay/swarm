#!/bin/bash

source $swarmLogs/githubVersion

# Get Service Status
if [ -f "/usr/bin/hornet" ]; then
    hornetStatus="$(systemctl show -p ActiveState --value hornet)"
fi
if [ -f "/usr/bin/hornet-shimmer" ]; then
    hornetShimmerStatus="$(systemctl show -p ActiveState --value hornet-shimmer)"
fi
if [ -f "/usr/bin/bee" ]; then
    beeStatus="$(systemctl show -p ActiveState --value bee)"
fi
if [ -f "/usr/bin/bee-shimmer" ]; then
    beeShimmerStatus="$(systemctl show -p ActiveState --value bee-shimmer)"
fi
if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
fi
if [ -f "/usr/bin/wasp" ]; then
    waspStatus="$(systemctl show -p ActiveState --value wasp)"
fi
if [ -f "/usr/bin/inx-indexer" ]; then
    inxIndexerStatus="$(systemctl show -p ActiveState --value inx-indexer)"
fi
if [ -f "/usr/bin/inx-mqtt" ]; then
    inxMqttStatus="$(systemctl show -p ActiveState --value inx-mqtt)"
fi
if [ -f "/usr/bin/inx-participation" ]; then
    inxParticipationStatus="$(systemctl show -p ActiveState --value inx-participation)"
fi

# Hornet Version
if [ -f "/usr/bin/hornet" ]; then
    hornetVersion=$(/usr/bin/hornet -v | awk '{ print $2 }')
    if [ -z "$hornetVersion" ]; then
        hornetVersion="N/A"
    else
        if [ "$hornetVersion" != "$latestHornetVersion" ] && [ ! -z "$latestHornetVersion" ]; then
            hornetVersion="$hornetVersion (new version \"v$latestHornetVersion\" available!)"
        fi
    fi
else
    hornetVersion="N/A"
fi

# Hornet Shimmer Version
if [ -f "/usr/bin/hornet-shimmer" ]; then
    hornetShimmerVersion=$(/usr/bin/hornet-shimmer -v | awk '{ print $2 }')
    if [ -z "$hornetShimmerVersion" ]; then
        hornetShimmerVersion="N/A"
    else
        if [ "$hornetShimmerVersion" != "$latestHornetShimmerVersion" ] && [ ! -z "$latestHornetShimmerVersion" ]; then
            hornetShimmerVersion="$hornetShimmerVersion (new version \"v$latestHornetShimmerVersion\" available!)"
        fi
    fi
else
    hornetShimmerVersion="N/A"
fi

# Bee version
if [ -f "/usr/bin/bee" ]; then
    beeVersion=$(/usr/bin/bee -v | tr -d 'v"')
    if [[ $beeVersion = *rc[0-9]* ]]; then
        beeVersion=$(echo $beeVersion | cut -f1,2 -d"-")
    else
        beeVersion=$(echo $beeVersion | cut -f1 -d"-")
    fi
    if [ -z "$beeVersion" ]; then
        beeVersion="N/A"
    else
        if [ "$beeVersion" != "$latestBeeVersion" ] && [ ! -z "$latestBeeVersion" ]; then
            beeVersion="$beeVersion (new version \"v$latestBeeVersion\" available!"
        fi
    fi
else
    beeVersion="N/A"
fi

# Bee Shimmer version
if [ -f "/usr/bin/bee-shimmer" ]; then
    beeShimmerVersion=$(/usr/bin/bee-shimmer -v | tr -d 'v"')
    if [[ $beeShimmerVersion = *rc[0-9]* ]]; then
        beeShimmerVersion=$(echo $beeShimmerVersion | cut -f1,2 -d"-")
    else
        beeShimmerVersion=$(echo $beeShimmerVersion | cut -f1 -d"-")
    fi
    if [ -z "$beeShimmerVersion" ]; then
        beeShimmerVersion="N/A"
    else
        if [ "$beeShimmerVersion" != "$latestBeeShimmerVersion" ] && [ ! -z "$latestBeeShimmerVersion" ]; then
            beeShimmerVersion="$beeShimmerVersion (new version \"v$latestBeeShimmerVersion\" available!"
        fi
    fi
else
    beeShimmerVersion="N/A"
fi

# GoShimmer version
if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerVersion=$(cd $goshimmerHome ; /usr/bin/goshimmer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$goshimmerVersion" ]; then
        goshimmerVersion="N/A"
    else
        if [ "$goshimmerVersion" != "$latestGoshimmerVersion" ] && [ ! -z "$latestGoshimmerVersion" ]; then
            goshimmerVersion="$goshimmerVersion (new version \"v$latestGoshimmerVersion\" available!"
        fi
    fi
else
    goshimmerVersion="N/A"
fi

# Wasp version
if [ -f "/usr/bin/wasp" ]; then
    waspVersion=$(cd $waspHome ; /usr/bin/wasp -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$waspVersion" ]; then
        waspVersion="N/A"
    else
        if [ "$waspVersion" != "$latestWaspVersion" ] && [ ! -z "$latestWaspVersion" ]; then
            waspVersion="$waspVersion (new version \"v$latestWaspVersion\" available!"
        fi
    fi
else
    waspVersion="N/A"
fi

# INX-Indexer version
if [ -f "/usr/bin/inx-indexer" ]; then
    inxIndexerVersion=$(cd $inxIndexerHome ; /usr/bin/inx-indexer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$inxIndexerVersion" ]; then
        inxIndexerVersion="N/A"
    else
        if [ "$inxIndexerVersion" != "$latestInxIndexerVersion" ] && [ ! -z "$latestInxIndexerVersion" ]; then
            inxIndexerVersion="$inxIndexerVersion (new version \"v$latestInxIndexerVersion\" available!"
        fi
    fi
else
    inxIndexerVersion="N/A"
fi

# INX-MQTT version
if [ -f "/usr/bin/inx-mqtt" ]; then
    inxMqttVersion=$(cd $inxMqttHome ; /usr/bin/inx-mqtt -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$inxMqttVersion" ]; then
        inxMqttVersion="N/A"
    else
        if [ "$inxMqttVersion" != "$latestInxMqttVersion" ] && [ ! -z "$latestInxMqttVersion" ]; then
            inxMqttVersion="$inxMqttVersion (new version \"v$latestInxMqttVersion\" available!"
        fi
    fi
else
    inxMqttVersion="N/A"
fi

# INX-Participation version
if [ -f "/usr/bin/inx-participation" ]; then
    inxParticipationVersion=$(cd $inxParticipationHome ; /usr/bin/inx-participation -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$inxParticipationVersion" ]; then
        inxParticipationVersion="N/A"
    else
        if [ "$inxParticipationVersion" != "$latestInxParticipationVersion" ] && [ ! -z "$latestInxParticipationVersion" ]; then
            inxParticipationVersion="$inxParticipationVersion (new version \"v$latestInxParticipationVersion\" available!"
        fi
    fi
else
    inxParticipationVersion="N/A"
fi

# Hornet DB size
if [ -d "$hornetHome/${hornetNetwork}db" ]; then
    getCurrentDbSize="$(du -sb $hornetHome/${hornetNetwork}db | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentHornetDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentHornetDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentHornetDbSize="N/A"
fi

# Hornet Shimmer DB size
if [ -d "$hornetShimmerHome/$hornetShimmerNetwork/database" ]; then
    getCurrentDbSize="$(du -sb $hornetShimmerHome/$hornetShimmerNetwork/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentHornetShimmerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentHornetShimmerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentHornetShimmerDbSize="N/A"
fi

# Bee DB size
if [ -d "$beeHome/storage" ]; then
    getCurrentDbSize="$(du -sb $beeHome/storage | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentBeeDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentBeeDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentBeeDbSize="N/A"
fi

# Bee Shimmer DB size
if [ -d "$beeShimmerHome/storage" ]; then
    getCurrentDbSize="$(du -sb $beeShimmerHome/storage | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentBeeShimmerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentBeeShimmerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentBeeShimmerDbSize="N/A"
fi

# Goshimmer DB size
if [ -d "$goshimmerHome/mainnetdb" ]; then
    getCurrentDbSize="$(du -sb $goshimmerHome/mainnetdb | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentGoshimmerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentGoshimmerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentGoshimmerDbSize="N/A"
fi

# WASP DB size
if [ -d "$waspHome/waspdb" ]; then
    getCurrentDbSize="$(du -sb $waspHome/waspdb | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentWaspDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentWaspDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentWaspDbSize="N/A"
fi

# INX-Indexer DB size
if [ -d "$inxIndexerHome/database" ]; then
    getCurrentDbSize="$(du -sb $inxIndexerHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentInxIndexerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentInxIndexerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentInxIndexerDbSize="N/A"
fi

# INX-Participation DB size
if [ -d "$inxParticipationHome/database" ]; then
    getCurrentDbSize="$(du -sb $inxParticipationHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentInxParticipationDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentInxParticipationDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentInxParticipationDbSize="N/A"
fi

if [ -f "/usr/bin/hornet" ]; then
    hornetAppInfo="Hornet (IOTA)\nStatus: $hornetStatus\nVersion: $hornetVersion\nDatabase: $currentHornetDbSize\n\n"
fi

if [ -f "/usr/bin/hornet-shimmer" ]; then
    hornetShimmerAppInfo="Hornet (Shimmer)\nStatus: $hornetShimmerStatus\nVersion: $hornetShimmerVersion\nDatabase: $currentHornetShimmerDbSize\n\n"
fi

if [ -f "/usr/bin/bee" ]; then
    beeAppInfo="Bee (IOTA)\nStatus: $beeStatus\nVersion: $beeVersion\nDatabase: $currentBeeDbSize\n\n"
fi

if [ -f "/usr/bin/bee-shimmer" ]; then
    beeShimmerAppInfo="Bee (Shimmer)\nStatus: $beeShimmerStatus\nVersion: $beeShimmerVersion\nDatabase: $currentBeeShimmerDbSize\n\n"
fi

if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerAppInfo="GoShimmer\nStatus: $goshimmerStatus\nVersion: $goshimmerVersion\nDatabase: $currentGoshimmerDbSize\n\n"
fi

if [ -f "/usr/bin/wasp" ]; then
    waspAppInfo="WASP\nStatus: $waspStatus\nVersion: $waspVersion\nDatabase: $currentWaspDbSize\n\n"
fi

if [ -f "/usr/bin/inx-indexer" ]; then
    inxIndexerAppInfo="INX-Indexer\nStatus: $inxIndexerStatus\nVersion: $inxIndexerVersion\nDatabase: $currentInxIndexerDbSize\n\n"
fi

if [ -f "/usr/bin/inx-mqtt" ]; then
    inxMqttAppInfo="INX-MQTT\nStatus: $inxMqttStatus\nVersion: $inxMqttVersion\n\n"
fi

if [ -f "/usr/bin/inx-participation" ]; then
    inxParticipationAppInfo="INX-Participation\nStatus: $inxParticipationStatus\nVersion: $inxParticipationVersion\nDatabase: $currentInxParticipationDbSize\n\n"
fi

# OUTPUT
whiptail --scrolltext --title "SWARM - App Info" --msgbox "\n${hornetAppInfo}${hornetShimmerAppInfo}${beeAppInfo}${beeShimmerAppInfo}${goshimmerAppInfo}${waspAppInfo}${inxIndexerAppInfo}${inxMqttAppInfo}${inxParticipationAppInfo}" 24 65
