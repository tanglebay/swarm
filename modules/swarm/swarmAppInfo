#!/bin/bash

source $swarmConfigs/latest-versions.cfg

# Get Service Status
if [ -f "/usr/bin/iota-hornet" ]; then
    iotaHornetStatus="$(systemctl show -p ActiveState --value iota-hornet)"
fi
if [ -f "/usr/bin/shimmer-hornet" ]; then
    shimmerHornetStatus="$(systemctl show -p ActiveState --value shimmer-hornet)"
fi
if [ -f "/usr/bin/iota-bee" ]; then
    iotaBeeStatus="$(systemctl show -p ActiveState --value iota-bee)"
fi
if [ -f "/usr/bin/shimmer-bee" ]; then
    shimmerBeeStatus="$(systemctl show -p ActiveState --value shimmer-bee)"
fi
if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
fi
if [ -f "/usr/bin/wasp" ]; then
    waspStatus="$(systemctl show -p ActiveState --value wasp)"
fi
if [ -f "/usr/bin/iota-inx-dashboard" ]; then
    iotaInxIndexerStatus="$(systemctl show -p ActiveState --value iota-inx-dashboard)"
fi
if [ -f "/usr/bin/iota-inx-indexer" ]; then
    iotaInxIndexerStatus="$(systemctl show -p ActiveState --value iota-inx-indexer)"
fi
if [ -f "/usr/bin/iota-inx-mqtt" ]; then
    iotaInxMqttStatus="$(systemctl show -p ActiveState --value iota-inx-mqtt)"
fi
if [ -f "/usr/bin/iota-inx-participation" ]; then
    iotaInxParticipationStatus="$(systemctl show -p ActiveState --value iota-inx-participation)"
fi
if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
    shimmerInxIndexerStatus="$(systemctl show -p ActiveState --value shimmer-inx-dashboard)"
fi
if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    shimmerInxIndexerStatus="$(systemctl show -p ActiveState --value shimmer-inx-indexer)"
fi
if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
    shimmerInxMqttStatus="$(systemctl show -p ActiveState --value shimmer-inx-mqtt)"
fi
if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    shimmerInxParticipationStatus="$(systemctl show -p ActiveState --value shimmer-inx-participation)"
fi

# Hornet Version
if [ -f "/usr/bin/iota-hornet" ]; then
    iotaHornetVersionInfo=$(/usr/bin/iota-hornet -v | awk '{ print $2 }')
    if [ -z "$iotaHornetVersionInfo" ]; then
        iotaHornetVersionInfo="N/A"
    else
        if [ "$iotaHornetVersionInfo" != "$latestIotaHornetVersion" ] && [ ! -z "$latestIotaHornetVersion" ]; then
            iotaHornetVersionInfo="$iotaHornetVersionInfo (new version \"v$latestIotaHornetVersion\" available!)"
        fi
    fi
else
    hornetVersionInfo="N/A"
fi

# Hornet Shimmer Version
if [ -f "/usr/bin/shimmer-hornet" ]; then
    shimmerHornetVersionInfo=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
    if [ -z "$shimmerHornetVersionInfo" ]; then
        shimmerHornetVersionInfo="N/A"
    else
        if [ "$shimmerHornetVersionInfo" != "$latestShimmerHornetVersion" ] && [ ! -z "$latestShimmerHornetVersion" ]; then
            shimmerHornetVersionInfo="$shimmerHornetVersionInfo (new version \"v$latestShimmerHornetVersion\" available!)"
        fi
    fi
else
    shimmerHornetVersionInfo="N/A"
fi

# Bee version
if [ -f "/usr/bin/iota-bee" ]; then
    iotaBeeVersionInfo=$(/usr/bin/iota-bee -v | tr -d 'v"')
    if [[ $iotaBeeVersionInfo = *rc[0-9]* ]]; then
        iotaBeeVersionInfo=$(echo $iotaBeeVersionInfo | cut -f1,2 -d"-")
    else
        iotaBeeVersionInfo=$(echo $iotaBeeVersionInfo | cut -f1 -d"-")
    fi
    if [ -z "$iotaBeeVersionInfo" ]; then
        iotaBeeVersionInfo="N/A"
    else
        if [ "$iotaBeeVersionInfo" != "$latestIotaBeeVersion" ] && [ ! -z "$latestIotaBeeVersion" ]; then
            iotaBeeVersionInfo="$iotaBeeVersionInfo (new version \"v$latestIotaBeeVersion\" available!"
        fi
    fi
else
    iotaBeeVersionInfo="N/A"
fi

# Bee Shimmer version
if [ -f "/usr/bin/shimmer-bee" ]; then
    shimmerBeeVersionInfo=$(/usr/bin/shimmer-bee -v | tr -d 'v"')
    if [[ $shimmerBeeVersion = *rc[0-9]* ]]; then
        shimmerBeeVersionInfo=$(echo $shimmerBeeVersionInfo | cut -f1,2 -d"-")
    else
        shimmerBeeVersionInfo=$(echo $shimmerBeeVersionInfo | cut -f1 -d"-")
    fi
    if [ -z "$shimmerBeeVersionInfo" ]; then
        shimmerBeeVersionInfo="N/A"
    else
        if [ "$shimmerBeeVersionInfo" != "$latestShimmerBeeVersion" ] && [ ! -z "$latestShimmerBeeVersion" ]; then
            shimmerBeeVersionInfo="$shimmerBeeVersionInfo (new version \"v$latestShimmerBeeVersion\" available!"
        fi
    fi
else
    shimmerBeeVersionInfo="N/A"
fi

# GoShimmer version
if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerVersionInfo=$(cd $goshimmerHome ; /usr/bin/goshimmer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$goshimmerVersionInfo" ]; then
        goshimmerVersionInfo="N/A"
    else
        if [ "$goshimmerVersionInfo" != "$latestGoshimmerVersion" ] && [ ! -z "$latestGoshimmerVersion" ]; then
            goshimmerVersionInfo="$goshimmerVersionInfo (new version \"v$latestGoshimmerVersion\" available!"
        fi
    fi
else
    goshimmerVersionInfo="N/A"
fi

# Wasp version
if [ -f "/usr/bin/wasp" ]; then
    waspVersionInfo=$(cd $waspHome ; /usr/bin/wasp -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$waspVersionInfo" ]; then
        waspVersionInfo="N/A"
    else
        if [ "$waspVersionInfo" != "$latestWaspVersion" ] && [ ! -z "$latestWaspVersion" ]; then
            waspVersionInfo="$waspVersionInfo (new version \"v$latestWaspVersion\" available!"
        fi
    fi
else
    waspVersionInfo="N/A"
fi

# INX-Dashboard (IOTA) version
if [ -f "/usr/bin/iota-inx-dashboard" ]; then
    iotaInxDashboardVersion=$(cd $iotaInxDashboardHome ; /usr/bin/iota-inx-indexer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$iotaInxDashboardVersionInfo" ]; then
        iotaInxDashboardVersionInfo="N/A"
    else
        if [ "$iotaInxDashboardVersionInfo" != "$latestIotaInxDashboardVersion" ] && [ ! -z "$latestIotaInxDashboardVersion" ]; then
            iotaInxDashboardVersionInfo="$iotaInxDashboardVersionInfo (new version \"v$latestIotaInxDashboardVersion\" available!"
        fi
    fi
else
    iotaInxDashboardVersionInfo="N/A"
fi

# INX-Indexer (IOTA) version
if [ -f "/usr/bin/iota-inx-indexer" ]; then
    iotaInxIndexerVersionInfo=$(cd $iotaInxIndexerHome ; /usr/bin/iota-inx-indexer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$iotaInxIndexerVersionInfo" ]; then
        iotaInxIndexerVersionInfo="N/A"
    else
        if [ "$iotaInxIndexerVersionInfo" != "$latestIotaInxIndexerVersion" ] && [ ! -z "$latestIotaInxIndexerVersion" ]; then
            iotaInxIndexerVersionInfo="$iotaInxIndexerVersionInfo (new version \"v$latestIotaInxIndexerVersion\" available!"
        fi
    fi
else
    iotaInxIndexerVersionInfo="N/A"
fi

# INX-MQTT (IOTA) version
if [ -f "/usr/bin/iota-inx-mqtt" ]; then
    iotaInxMqttVersionInfo=$(cd $iotaInxMqttHome ; /usr/bin/iota-inx-mqtt -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$iotaInxMqttVersionInfo" ]; then
        iotaInxMqttVersionInfo="N/A"
    else
        if [ "$iotaInxMqttVersionInfo" != "$latestIotaInxMqttVersion" ] && [ ! -z "$latestIotaInxMqttVersion" ]; then
            iotaInxMqttVersionInfo="$iotaInxMqttVersionInfo (new version \"v$latestIotaInxMqttVersion\" available!"
        fi
    fi
else
    iotaInxMqttVersionInfo="N/A"
fi

# INX-Participation (IOTA) version
if [ -f "/usr/bin/iota-inx-participation" ]; then
    iotaInxParticipationVersionInfo=$(cd $iotaInxParticipationHome ; /usr/bin/iota-inx-participation -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$iotaInxParticipationVersionInfo" ]; then
        iotaInxParticipationVersionInfo="N/A"
    else
        if [ "$iotaInxParticipationVersionInfo" != "$latestIotaInxParticipationVersion" ] && [ ! -z "$latestIotaInxParticipationVersion" ]; then
            iotaInxParticipationVersionInfo="$iotaInxParticipationVersionInfo (new version \"v$latestIotaInxParticipationVersion\" available!"
        fi
    fi
else
    iotaInxParticipationVersionInfo="N/A"
fi

# INX-Dashboard (Shimmer) version
if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
    shimmerInxDashboardVersionInfo=$(cd $shimmerInxDashboardHome ; /usr/bin/shimmer-inx-indexer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$shimmerInxDashboardVersionInfo" ]; then
        shimmerInxDashboardVersionInfo="N/A"
    else
        if [ "$shimmerInxDashboardVersionInfo" != "$latestShimmerInxDashboardVersion" ] && [ ! -z "$latestShimmerInxDashboardVersion" ]; then
            shimmerInxDashboardVersionInfo="$shimmerInxDashboardVersionInfo (new version \"v$latestShimmerInxDashboardVersion\" available!"
        fi
    fi
else
    shimmerInxDashboardVersionInfo="N/A"
fi

# INX-Indexer (Shimmer) version
if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    shimmerInxIndexerVersionInfo=$(cd $shimmerInxIndexerHome ; /usr/bin/shimmer-inx-indexer -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$shimmerInxIndexerVersionInfo" ]; then
        shimmerInxIndexerVersionInfo="N/A"
    else
        if [ "$shimmerInxIndexerVersionInfo" != "$latestShimmerInxIndexerVersion" ] && [ ! -z "$latestShimmerInxIndexerVersion" ]; then
            shimmerInxIndexerVersionInfo="$shimmerInxIndexerVersionInfo (new version \"v$latestShimmerInxIndexerVersion\" available!"
        fi
    fi
else
    shimmerInxIndexerVersionInfo="N/A"
fi

# INX-MQTT (Shimmer) version
if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
    shimmerInxMqttVersionInfo=$(cd $shimmerInxMqttHome ; /usr/bin/shimmer-inx-mqtt -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$shimmerInxMqttVersionInfo" ]; then
        shimmerInxMqttVersionInfo="N/A"
    else
        if [ "$shimmerInxMqttVersionInfo" != "$latestShimmerInxMqttVersion" ] && [ ! -z "$latestShimmerInxMqttVersion" ]; then
            shimmerInxMqttVersionInfo="$shimmerInxMqttVersionInfo (new version \"v$latestShimmerInxMqttVersion\" available!"
        fi
    fi
else
    shimmerInxMqttVersionInfo="N/A"
fi

# INX-Participation (Shimmer) version
if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    shimmerInxParticipationVersionInfo=$(cd $shimmerInxParticipationHome ; /usr/bin/shimmer-inx-participation -v | awk '{print $2}' | tr -d 'v')
    if [ -z "$shimmerInxParticipationVersionInfo" ]; then
        shimmerInxParticipationVersionInfo="N/A"
    else
        if [ "$shimmerInxParticipationVersionInfo" != "$latestShimmerInxParticipationVersion" ] && [ ! -z "$latestShimmerInxParticipationVersion" ]; then
            shimmerInxParticipationVersionInfo="$shimmerInxParticipationVersionInfo (new version \"v$latestShimmerInxParticipationVersion\" available!"
        fi
    fi
else
    shimmerInxParticipationVersionInfo="N/A"
fi

# Hornet DB size
if [ -d "$iotaHornetHome/${iotaHornetNetwork}db" ]; then
    getCurrentDbSize="$(du -sb $iotaHornetHome/${iotaHornetNetwork}db | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentIotaHornetDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentIotaHornetDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentIotaHornetDbSize="N/A"
fi

# Hornet Shimmer DB size
if [ -d "$shimmerHornetHome/$shimmerHornetNetwork/database" ]; then
    getCurrentDbSize="$(du -sb $shimmerHornetHome/$shimmerHornetNetwork/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentShimmerHornetDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentShimmerHornetDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentShimmerHornetDbSize="N/A"
fi

# Bee DB size
if [ -d "$iotaBeeHome/storage" ]; then
    getCurrentDbSize="$(du -sb $iotaBeeHome/storage | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentIotaBeeDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentIotaBeeDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentIotaBeeDbSize="N/A"
fi

# Bee Shimmer DB size
if [ -d "$shimmerBeeHome/storage" ]; then
    getCurrentDbSize="$(du -sb $shimmerBeeHome/storage | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentShimmerBeeDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentShimmerBeeDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentShimmerBeeDbSize="N/A"
fi

# Goshimmer DB size
if [ -d "$goshimmerHome/mainnetdb" ]; then
    getCurrentDbSize="$(du -sb $goshimmerHome/mainnetdb | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentGoshimmerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentGoshimmerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentGoshimmerDbSize="N/A"
fi

# WASP DB size
if [ -d "$waspHome/waspdb" ]; then
    getCurrentDbSize="$(du -sb $waspHome/waspdb | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentWaspDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentWaspDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentWaspDbSize="N/A"
fi

# INX-Indexer (IOTA) DB size
if [ -d "$iotaInxIndexerHome/database" ]; then
    getCurrentDbSize="$(du -sb $iotaInxIndexerHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentIotaInxIndexerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentIotaInxIndexerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentIotaInxIndexerDbSize="N/A"
fi

# INX-Participation (IOTA) DB size
if [ -d "$iotaInxParticipationHome/database" ]; then
    getCurrentDbSize="$(du -sb $iotaInxParticipationHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentInxParticipationDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentInxParticipationDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentInxParticipationDbSize="N/A"
fi

# INX-Indexer (Shimmer) DB size
if [ -d "$shimmerInxIndexerHome/database" ]; then
    getCurrentDbSize="$(du -sb $shimmerInxIndexerHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentShimmerInxIndexerDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentShimmerInxIndexerDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentShimmerInxIndexerDbSize="N/A"
fi

# INX-Participation (Shimmer) DB size
if [ -d "$shimmerInxParticipationHome/database" ]; then
    getCurrentDbSize="$(du -sb $shimmerInxParticipationHome/database | cut -f1)"
    let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
    if [ $getCurrentDbSizeInMb -gt 999 ]; then
        let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
        currentShimmerInxParticipationDbSize="${getCurrentDbSizeInGb} GB"
    else
        currentShimmerInxParticipationDbSize="${getCurrentDbSizeInMb} MB"
    fi
else
    currentShimmerInxParticipationDbSize="N/A"
fi

if [ -f "/usr/bin/iota-hornet" ]; then
    hornetAppInfo="Hornet (IOTA)\nStatus: $iotaHornetStatus\nVersion: $iotaHornetVersionInfo\nDatabase: $currentIotaHornetDbSize\n\n"
fi

if [ -f "/usr/bin/shimmer-hornet" ]; then
    shimmerHornetAppInfo="Hornet (Shimmer)\nStatus: $shimmerHornetStatus\nVersion: $shimmerHornetVersionInfo\nDatabase: $currentShimmerHornetDbSize\n\n"
fi

if [ -f "/usr/bin/iota-bee" ]; then
    beeAppInfo="Bee (IOTA)\nStatus: $iotaBeeStatus\nVersion: $iotaBeeVersionInfo\nDatabase: $currentIotaBeeDbSize\n\n"
fi

if [ -f "/usr/bin/shimmer-bee" ]; then
    shimmerBeeAppInfo="Bee (Shimmer)\nStatus: $shimmerBeeStatus\nVersion: $shimmerBeeVersionInfo\nDatabase: $currentShimmerBeeDbSize\n\n"
fi

if [ -f "/usr/bin/goshimmer" ]; then
    goshimmerAppInfo="GoShimmer\nStatus: $goshimmerStatus\nVersion: $goshimmerVersionInfo\nDatabase: $currentGoshimmerDbSize\n\n"
fi

if [ -f "/usr/bin/wasp" ]; then
    waspAppInfo="WASP\nStatus: $waspStatus\nVersion: $waspVersionInfo\nDatabase: $currentWaspDbSize\n\n"
fi

if [ -f "/usr/bin/iota-inx-dashboard" ]; then
    iotaInxDashboardAppInfo="INX-Dashboard (IOTA)\nStatus: $iotaInxDashboardStatus\nVersion: $iotaInxDashboardVersionInfo\n\n"
fi

if [ -f "/usr/bin/iota-inx-indexer" ]; then
    iotaInxIndexerAppInfo="INX-Indexer (IOTA)\nStatus: $iotaInxIndexerStatus\nVersion: $iotaInxIndexerVersionInfo\nDatabase: $currentInxIndexerDbSize\n\n"
fi

if [ -f "/usr/bin/iota-inx-mqtt" ]; then
    iotaInxMqttAppInfo="INX-MQTT (IOTA)\nStatus: $iotaInxMqttStatus\nVersion: $iotaInxMqttVersionInfo\n\n"
fi

if [ -f "/usr/bin/iota-inx-participation" ]; then
    iotaInxParticipationAppInfo="INX-Participation (IOTA)\nStatus: $iotaInxParticipationStatus\nVersion: $iotaInxParticipationVersionInfo\nDatabase: $currentIotaInxParticipationDbSize\n\n"
fi

if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
    shimmerInxDashboardAppInfo="INX-Dashboard (Shimmer)\nStatus: $shimmerInxDashboardStatus\nVersion: $shimmerInxDashboardVersionInfo\n\n"
fi

if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    shimmerInxIndexerAppInfo="INX-Indexer (Shimmer)\nStatus: $shimmerInxIndexerStatus\nVersion: $shimmerInxIndexerVersionInfo\nDatabase: $currentInxIndexerDbSize\n\n"
fi

if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
    shimmerInxMqttAppInfo="INX-MQTT (Shimmer)\nStatus: $shimmerInxMqttStatus\nVersion: $shimmerInxMqttVersionInfo\n\n"
fi

if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    shimmerInxParticipationAppInfo="INX-Participation (Shimmer)\nStatus: $shimmerInxParticipationStatus\nVersion: $shimmerInxParticipationVersionInfo\nDatabase: $currentIotaInxParticipationDbSize\n\n"
fi

# OUTPUT
whiptail --scrolltext --title "SWARM - App Info" --msgbox "\n${iotaHornetAppInfo}${shimmerHornetAppInfo}${iotaBeeAppInfo}${shimmerBeeAppInfo}${goshimmerAppInfo}${waspAppInfo}${iotaInxDashboardAppInfo}${iotaInxIndexerAppInfo}${iotaInxMqttAppInfo}${iotaInxParticipationAppInfo}${shimmerInxDashboardAppInfo}${shimmerInxIndexerAppInfo}${shimmerInxMqttAppInfo}${shimmerInxParticipationAppInfo}" 24 65
