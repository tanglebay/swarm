#!/bin/bash
source $swarmConfigs/swarm.cfg

# Watchdog
# crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled > /dev/null 2>&1

if [ "$hornetAutoUpdate" = "true" ]; then
    hornetAutoUpdateStatus="enabled"
else
    hornetAutoUpdateStatus="disabled"
fi

if [ "$hornetShimmerAutoUpdate" = "true" ]; then
    hornetShimmerAutoUpdateStatus="enabled"
else
    hornetShimmerAutoUpdateStatus="disabled"
fi

if [ "$beeAutoUpdate" = "true" ]; then
    beeAutoUpdateStatus="enabled"
else
    beeAutoUpdateStatus="disabled"
fi

if [ "$beeShimmerAutoUpdate" = "true" ]; then
    beeShimmerAutoUpdateStatus="enabled"
else
    beeShimmerAutoUpdateStatus="disabled"
fi

if [ "$goshimmerAutoUpdate" = "true" ]; then
    goshimmerAutoUpdateStatus="enabled"
else
    goshimmerAutoUpdateStatus="disabled"
fi

if [ "$waspAutoUpdate" = "true" ]; then
    waspAutoUpdateStatus="enabled"
else
    waspAutoUpdateStatus="disabled"
fi

if [ "$inxIndexerAutoUpdate" = "true" ]; then
    inxIndexerAutoUpdateStatus="enabled"
else
    inxIndexerAutoUpdateStatus="disabled"
fi

if [ "$inxMqttAutoUpdate" = "true" ]; then
    inxMqttAutoUpdateStatus="enabled"
else
    inxMqttAutoUpdateStatus="disabled"
fi

if [ "$inxParticipationAutoUpdate" = "true" ]; then
    inxParticipationAutoUpdateStatus="enabled"
else
    inxParticipationAutoUpdateStatus="disabled"
fi

# Sync Check
if [ "$hornetCheckSync" = "true" ]; then
    hornetCheckSyncStatus="enabled"
else
    hornetCheckSyncStatus="disabled"
fi

if [ "$hornetShimmerCheckSync" = "true" ]; then
    hornetShimmerCheckSyncStatus="enabled"
else
    hornetShimmerCheckSyncStatus="disabled"
fi

if [ "$beeCheckSync" = "true" ]; then
    beeCheckSyncStatus="enabled"
else
    beeCheckSyncStatus="disabled"
fi

if [ "$beeShimmerCheckSync" = "true" ]; then
    beeShimmerCheckSyncStatus="enabled"
else
    beeShimmerCheckSyncStatus="disabled"
fi

if [ "$goshimmerCheckSync" = "true" ]; then
    goshimmerCheckSyncStatus="enabled"
else
    goshimmerCheckSyncStatus="disabled"
fi

# DB Reset
if [ "$hornetAllowDbReset" = "true" ]; then
    hornetAllowDbResetStatus="enabled"
else
    hornetAllowDbResetStatus="disabled"
fi

if [ "$hornetShimmerAllowDbReset" = "true" ]; then
    hornetShimmerAllowDbResetStatus="enabled"
else
    hornetShimmerAllowDbResetStatus="disabled"
fi

if [ "$beeAllowDbReset" = "true" ]; then
    beeAllowDbResetStatus="enabled"
else
    beeAllowDbResetStatus="disabled"
fi

if [ "$beeShimmerAllowDbReset" = "true" ]; then
    beeShimmerAllowDbResetStatus="enabled"
else
    beeShimmerAllowDbResetStatus="disabled"
fi

if [ "$goshimmerAllowDbReset" = "true" ]; then
    goshimmerAllowDbResetStatus="enabled"
else
    goshimmerAllowDbResetStatus="disabled"
fi

if [ "$waspAllowDbReset" = "true" ]; then
    waspAllowDbResetStatus="enabled"
else
    waspAllowDbResetStatus="disabled"
fi

if [ "$inxIndexerAllowDbReset" = "true" ]; then
    inxIndexerAllowDbResetStatus="enabled"
else
    inxIndexerAllowDbResetStatus="disabled"
fi

if [ "$inxParticipationAllowDbReset" = "true" ]; then
    inxIndexerAllowDbResetStatus="enabled"
else
    inxIndexerAllowDbResetStatus="disabled"
fi

if [ "$goshimmerAllowDbDownload" = "true" ]; then
    goshimmerAllowDbDownloadStatus="enabled"
else
    goshimmerAllowDbDownloadStatus="disabled"
fi

# Service Check
if [ "$hornetServiceStatusCheck" = "true" ]; then
    hornetServiceStatusCheckStatus="enabled"
else
    hornetServiceStatusCheckStatus="disabled"
fi

if [ "$hornetShimmerServiceStatusCheck" = "true" ]; then
    hornetShimmerServiceStatusCheckStatus="enabled"
else
    hornetShimmerServiceStatusCheckStatus="disabled"
fi

if [ "$beeServiceStatusCheck" = "true" ]; then
    beeServiceStatusCheckStatus="enabled"
else
    beeServiceStatusCheckStatus="disabled"
fi

if [ "$beeShimmerServiceStatusCheck" = "true" ]; then
    beeShimmerServiceStatusCheckStatus="enabled"
else
    beeShimmerServiceStatusCheckStatus="disabled"
fi

if [ "$goshimmerServiceStatusCheck" = "true" ]; then
    goshimmerServiceStatusCheckStatus="enabled"
else
    goshimmerServiceStatusCheckStatus="disabled"
fi

if [ "$waspServiceStatusCheck" = "true" ]; then
    waspServiceStatusCheckStatus="enabled"
else
    waspServiceStatusCheckStatus="disabled"
fi

if [ "$inxIndexerServiceStatusCheck" = "true" ]; then
    inxIndexerServiceStatusCheckStatus="enabled"
else
    inxIndexerServiceStatusCheckStatus="disabled"
fi

if [ "$inxMqttServiceStatusCheck" = "true" ]; then
    inxMqttServiceStatusCheckStatus="enabled"
else
    inxMqttServiceStatusCheckStatus="disabled"
fi

if [ "$inxParticipationServiceStatusCheck" = "true" ]; then
    inxParticipationServiceStatusCheckStatus="enabled"
else
    inxParticipationServiceStatusCheckStatus="disabled"
fi

# Log Pruning
if [ "$swarmLogRotation" = "true" ]; then
    swarmLogRotation=enabled
else
    swarmLogRotation=disabled
fi

if [ "$swarmAutoUpdate" = "true" ]; then
    swarmAutoUpdateStatus=enabled
else
    swarmAutoUpdateStatus=disabled
fi

if [ "$ufw" = "true" ]; then
    firewallStatus=$(ufw status | grep -o "inactive")
    if [ "$firewallStatus" = "inactive" ]; then
        firewall=disabled
    else
        firewall=enabled
    fi
fi

if [ "$telegramNotifications" = "true" ] && [ ! -z "$telegramBotToken" ] && [ ! -z "$telegramChannelId" ]; then
    telegramNotifiactionsStatus=enabled
else
    telegramNotifiactionsStatus=disabled
fi

if [ -f "/usr/bin/hornet" ]; then
    swarmInfoHornet="\nHornet Autoupdater: $hornetAutoUpdateStatus\nHornet Sync-check: $hornetCheckSyncStatus\nMax unsync: $hornetMaxMilestones milestones\nHornet DB-Reset: $hornetAllowDbResetStatus\nHornet service check: $hornetServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/hornet-shimmer" ]; then
    swarmInfoHornetShimmer="\nHornet-Shimmer Autoupdater: $hornetShimmerAutoUpdateStatus\nHornet-Shimmer Sync-check: $hornetShimmerCheckSyncStatus\nMax unsync: $hornetShimmerMaxMilestones milestones\nHornet-Shimmer DB-Reset: $hornetShimmerAllowDbResetStatus\n$hornetShimmerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/bee" ]; then
    swarmInfoBee="\nBee Autoupdater: $beeAutoUpdateStatus\nBee Sync-check: $beeCheckSyncStatus\nMax unsync: $beeMaxMilestones milestones\nBee DB-Reset: $beeAllowDbResetStatus\n$beeServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/bee-shimmer" ]; then
    swarmInfoBeeShimmer="\nBee-Shimmer Autoupdater: $beeShimmerAutoUpdateStatus\nBee-Shimmer Sync-check: $beeShimmerCheckSyncStatus\nMax unsync: $beeShimmerMaxMilestones milestones\nBee-Shimmer DB-Reset: $beeShimmerAllowDbResetStatus\n$beeShimmerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/goshimmer" ]; then
    swarmInfoGoshimmer="\nGoShimmer Autoupdater: $goshimmerAutoUpdateStatus\nGoShimmer Sync-check: $goshimmerCheckSyncStatus\nGoShimmer DB download: $goshimmerAllowDbDownloadStatus\nGoShimmer DB-Reset: $goshimmerAllowDbResetStatus\n$goshimmerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/wasp" ]; then
    swarmInfoWasp="\nWasp Autoupdater: $waspAutoUpdateStatus\nWasp Service Check: $inxIndexerServiceStatusCheck\nWasp DB-Reset: $waspAllowDbResetStatus\n$waspServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/inx-indexer" ]; then
    swarmInfoInxIndexer="\nINX-Indexer Autoupdater: $inxIndexerAutoUpdateStatus\nINX-Indexer DB-Reset: $inxIndexerAllowDbResetStatus\nINX-Indexer Service Check: $inxIndexerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/inx-mqtt" ]; then
    swarmInfoInxMqtt="\nINX-MQTT Autoupdater: $inxMqttAutoUpdateStatus\nINX-MQTT Service Check: $inxMqttServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/inx-participation" ]; then
    swarmInfoInxParticipation="\nINX-Participation Autoupdater: $inxParticipationAutoUpdateStatus\nINX-Participation DB-Reset: $inxParticipationAllowDbResetStatus\nINX-Participation Service Check: $inxParticipationServiceStatusCheckStatus\n"
fi

if [ "$swarmInfo" = "true" ]; then
    if [ "$watchdogStatus" = "enabled" ]; then
        # OUTPUT
        whiptail --scrolltext --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nTelegram Notifications: $telegramNotifiactionsStatus\n\nSWARM updater: $swarmAutoUpdateStatus\nLog rotation: $swarmLogRotation\nMax log size: ${swarmLogSize} MB\n\nFirewall: $firewall\n${swarmInfoHornet}${swarmInfoHornetShimmer}${swarmInfoBee}${swarmInfoBeeShimmer}${swarmInfoGoshimmer}${swarmInfoWasp}${swarmInfoInxIndexer}${swarmInfoInxMqtt}${swarmInfoInxParticipation}" 24 65
    else
        # OUTPUT
        whiptail --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nWatchdog: $watchdogStatus\nFirewall: $firewall" 14 65
    fi
fi
