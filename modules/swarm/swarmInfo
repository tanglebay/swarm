#!/bin/bash
source $swarmConfigs/swarm.cfg

# Watchdog
# crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled > /dev/null 2>&1

if [ "$iotaHornetAutoUpdate" = "true" ]; then
    iotaHornetAutoUpdateStatus="enabled"
else
    iotaHornetAutoUpdateStatus="disabled"
fi

if [ "$shimmerHornetAutoUpdate" = "true" ]; then
    shimmerHornetAutoUpdateStatus="enabled"
else
    shimmerHornetAutoUpdateStatus="disabled"
fi

if [ "$iotaBeeAutoUpdate" = "true" ]; then
    iotaBeeAutoUpdateStatus="enabled"
else
    iotaBeeAutoUpdateStatus="disabled"
fi

if [ "$shimmerBeeAutoUpdate" = "true" ]; then
    shimmerBeeAutoUpdateStatus="enabled"
else
    shimmerBeeAutoUpdateStatus="disabled"
fi

if [ "$goshimmerAutoUpdate" = "true" ]; then
    goshimmerAutoUpdateStatus="enabled"
else
    goshimmerAutoUpdateStatus="disabled"
fi

if [ "$waspAutoUpdate" = "true" ]; then
    waspAutoUpdateStatus="enabled"
else
    waspAutoUpdateStatus="disabled"
fi

if [ "$iotaInxDashboardAutoUpdate" = "true" ]; then
    iotaInxDashboardAutoUpdateStatus="enabled"
else
    iotaInxDashboardAutoUpdateStatus="disabled"
fi

if [ "$iotaInxIndexerAutoUpdate" = "true" ]; then
    iotaInxIndexerAutoUpdateStatus="enabled"
else
    iotaInxIndexerAutoUpdateStatus="disabled"
fi

if [ "$iotaInxMqttAutoUpdate" = "true" ]; then
    iotaInxMqttAutoUpdateStatus="enabled"
else
    iotaInxMqttAutoUpdateStatus="disabled"
fi

if [ "$iotaInxParticipationAutoUpdate" = "true" ]; then
    iotaInxParticipationAutoUpdateStatus="enabled"
else
    iotaInxParticipationAutoUpdateStatus="disabled"
fi

if [ "$shimmerInxDashboardAutoUpdate" = "true" ]; then
    shimmerInxDashboardAutoUpdateStatus="enabled"
else
    shimmerInxDashboardAutoUpdateStatus="disabled"
fi

if [ "$shimmerInxIndexerAutoUpdate" = "true" ]; then
    shimmerInxIndexerAutoUpdateStatus="enabled"
else
    shimmerInxIndexerAutoUpdateStatus="disabled"
fi

if [ "$shimmerInxMqttAutoUpdate" = "true" ]; then
    shimmerInxMqttAutoUpdateStatus="enabled"
else
    shimmerInxMqttAutoUpdateStatus="disabled"
fi

if [ "$shimmerInxParticipationAutoUpdate" = "true" ]; then
    shimmerInxParticipationAutoUpdateStatus="enabled"
else
    shimmerInxParticipationAutoUpdateStatus="disabled"
fi

# Sync Check
if [ "$iotaHornetCheckSync" = "true" ]; then
    iotaHornetCheckSyncStatus="enabled"
else
    iotaHornetCheckSyncStatus="disabled"
fi

if [ "$shimmerHornetCheckSync" = "true" ]; then
    shimmerHornetCheckSyncStatus="enabled"
else
    shimmerHornetCheckSyncStatus="disabled"
fi

if [ "$iotaBeeCheckSync" = "true" ]; then
    iotaBeeCheckSyncStatus="enabled"
else
    iotaBeeCheckSyncStatus="disabled"
fi

if [ "$shimmerBeeCheckSync" = "true" ]; then
    shimmerBeeCheckSyncStatus="enabled"
else
    shimmerBeeCheckSyncStatus="disabled"
fi

if [ "$goshimmerCheckSync" = "true" ]; then
    goshimmerCheckSyncStatus="enabled"
else
    goshimmerCheckSyncStatus="disabled"
fi

# DB Reset
if [ "$iotaHornetAllowDbReset" = "true" ]; then
    iotaHornetAllowDbResetStatus="enabled"
else
    iotaHornetAllowDbResetStatus="disabled"
fi

if [ "$shimmerHornetAllowDbReset" = "true" ]; then
    shimmerHornetAllowDbResetStatus="enabled"
else
    shimmerHornetAllowDbResetStatus="disabled"
fi

if [ "$iotaBeeAllowDbReset" = "true" ]; then
    iotaBeeAllowDbResetStatus="enabled"
else
    iotaBeeAllowDbResetStatus="disabled"
fi

if [ "$shimmerBeeAllowDbReset" = "true" ]; then
    shimmerBeeAllowDbResetStatus="enabled"
else
    shimmerBeeAllowDbResetStatus="disabled"
fi

if [ "$goshimmerAllowDbReset" = "true" ]; then
    goshimmerAllowDbResetStatus="enabled"
else
    goshimmerAllowDbResetStatus="disabled"
fi

if [ "$waspAllowDbReset" = "true" ]; then
    waspAllowDbResetStatus="enabled"
else
    waspAllowDbResetStatus="disabled"
fi

if [ "$iotaInxIndexerAllowDbReset" = "true" ]; then
    iotaInxIndexerAllowDbResetStatus="enabled"
else
    iotaInxIndexerAllowDbResetStatus="disabled"
fi

if [ "$iotaInxParticipationAllowDbReset" = "true" ]; then
    iotaInxParticipationAllowDbResetStatus="enabled"
else
    iotaInxParticipationAllowDbResetStatus="disabled"
fi

if [ "$shimmerInxIndexerAllowDbReset" = "true" ]; then
    shimmerInxIndexerAllowDbResetStatus="enabled"
else
    shimmerInxIndexerAllowDbResetStatus="disabled"
fi

if [ "$shimmerInxParticipationAllowDbReset" = "true" ]; then
    shimmerInxParticipationAllowDbResetStatus="enabled"
else
    shimmerInxParticipationAllowDbResetStatus="disabled"
fi

if [ "$goshimmerAllowDbDownload" = "true" ]; then
    goshimmerAllowDbDownloadStatus="enabled"
else
    goshimmerAllowDbDownloadStatus="disabled"
fi

# Service Check
if [ "$iotaHornetServiceStatusCheck" = "true" ]; then
    iotaHornetServiceStatusCheckStatus="enabled"
else
    iotaHornetServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerHornetServiceStatusCheck" = "true" ]; then
    shimmerHornetServiceStatusCheckStatus="enabled"
else
    shimmerHornetServiceStatusCheckStatus="disabled"
fi

if [ "$iotaBeeServiceStatusCheck" = "true" ]; then
    iotaBeeServiceStatusCheckStatus="enabled"
else
    iotaBeeServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerBeeServiceStatusCheck" = "true" ]; then
    shimmerBeeServiceStatusCheckStatus="enabled"
else
    shimmerBeeServiceStatusCheckStatus="disabled"
fi

if [ "$goshimmerServiceStatusCheck" = "true" ]; then
    goshimmerServiceStatusCheckStatus="enabled"
else
    goshimmerServiceStatusCheckStatus="disabled"
fi

if [ "$waspServiceStatusCheck" = "true" ]; then
    waspServiceStatusCheckStatus="enabled"
else
    waspServiceStatusCheckStatus="disabled"
fi

if [ "$iotaInxDashboardServiceStatusCheck" = "true" ]; then
    iotaInxDashboardServiceStatusCheckStatus="enabled"
else
    iotaInxDashboardServiceStatusCheckStatus="disabled"
fi

if [ "$iotaInxIndexerServiceStatusCheck" = "true" ]; then
    iotaInxIndexerServiceStatusCheckStatus="enabled"
else
    iotaInxIndexerServiceStatusCheckStatus="disabled"
fi

if [ "$iotaInxMqttServiceStatusCheck" = "true" ]; then
    iotaInxMqttServiceStatusCheckStatus="enabled"
else
    iotaInxMqttServiceStatusCheckStatus="disabled"
fi

if [ "$iotaInxParticipationServiceStatusCheck" = "true" ]; then
    iotaInxParticipationServiceStatusCheckStatus="enabled"
else
    iotaInxParticipationServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerInxDashboardServiceStatusCheck" = "true" ]; then
    shimmerInxDashboardServiceStatusCheckStatus="enabled"
else
    shimmerInxDashboardServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerInxIndexerServiceStatusCheck" = "true" ]; then
    shimmerInxIndexerServiceStatusCheckStatus="enabled"
else
    shimmerInxIndexerServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerInxMqttServiceStatusCheck" = "true" ]; then
    shimmerInxMqttServiceStatusCheckStatus="enabled"
else
    shimmerInxMqttServiceStatusCheckStatus="disabled"
fi

if [ "$shimmerInxParticipationServiceStatusCheck" = "true" ]; then
    shimmerInxParticipationServiceStatusCheckStatus="enabled"
else
    shimmerInxParticipationServiceStatusCheckStatus="disabled"
fi

# Log Pruning
if [ "$swarmLogRotation" = "true" ]; then
    swarmLogRotation=enabled
else
    swarmLogRotation=disabled
fi

if [ "$swarmAutoUpdate" = "true" ]; then
    swarmAutoUpdateStatus=enabled
else
    swarmAutoUpdateStatus=disabled
fi

if [ "$ufw" = "true" ]; then
    firewallStatus=$(ufw status | grep -o "inactive")
    if [ "$firewallStatus" = "inactive" ]; then
        firewall=disabled
    else
        firewall=enabled
    fi
fi

if [ "$telegramNotifications" = "true" ] && [ ! -z "$telegramBotToken" ] && [ ! -z "$telegramChannelId" ]; then
    telegramNotifiactionsStatus=enabled
else
    telegramNotifiactionsStatus=disabled
fi

if [ -f "/usr/bin/iota-hornet" ]; then
    swarmInfoHornet="\nHornet (IOTA) Autoupdater: $iotaHornetAutoUpdateStatus\nHornet (IOTA) Sync-check: $iotaHornetCheckSyncStatus\nMax unsync: $iotaHornetMaxMilestones milestones\nHornet (IOTA) DB-Reset: $iotaHornetAllowDbResetStatus\nHornet (IOTA) service check: $iotaHornetServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-hornet" ]; then
    swarmInfoHornetShimmer="\nHornet (Shimmer) Autoupdater: $shimmerHornetAutoUpdateStatus\nHornet (Shimmer) Sync-check: $shimmerHornetCheckSyncStatus\nMax unsync: $shimmerHornetMaxMilestones milestones\nHornet (Shimmer) DB-Reset: $shimmerHornetAllowDbResetStatus\n$shimmerHornetServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/iota-bee" ]; then
    swarmInfoBee="\nBee (IOTA) Autoupdater: $iotaBeeAutoUpdateStatus\nBee (IOTA) Sync-check: $iotaBeeCheckSyncStatus\nMax unsync: $iotaBeeMaxMilestones milestones\nBee (IOTA) DB-Reset: $iotaBeeAllowDbResetStatus\n$iotaBeeServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-bee" ]; then
    swarmInfoBeeShimmer="\nBee (Shimmer) Autoupdater: $shimmerBeeAutoUpdateStatus\nBee (Shimmer) Sync-check: $shimmerBeeCheckSyncStatus\nMax unsync: $shimmerBeeMaxMilestones milestones\nBee (Shimmer) DB-Reset: $shimmerBeeAllowDbResetStatus\n$shimmerBeeServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/goshimmer" ]; then
    swarmInfoGoshimmer="\nGoShimmer Autoupdater: $goshimmerAutoUpdateStatus\nGoShimmer Sync-check: $goshimmerCheckSyncStatus\nGoShimmer DB download: $goshimmerAllowDbDownloadStatus\nGoShimmer DB-Reset: $goshimmerAllowDbResetStatus\n$goshimmerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/wasp" ]; then
    swarmInfoWasp="\nWasp Autoupdater: $waspAutoUpdateStatus\nWasp Service Check: $iotaInxIndexerServiceStatusCheck\nWasp DB-Reset: $waspAllowDbResetStatus\n$waspServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/iota-inx-dashboard" ]; then
    swarmInfoIotaInxDashboard="\nINX-Dashboard (IOTA) Autoupdater: $iotaInxDashboardAutoUpdateStatus\nINX-Dashboard (IOTA) Service Check: $iotaInxDashboardServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/iota-inx-indexer" ]; then
    swarmInfoIotaInxIndexer="\nINX-Indexer (IOTA) Autoupdater: $iotaInxIndexerAutoUpdateStatus\nINX-Indexer (IOTA) DB-Reset: $iotaInxIndexerAllowDbResetStatus\nINX-Indexer (IOTA) Service Check: $iotaInxIndexerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/iota-inx-mqtt" ]; then
    swarmInfoIotaInxMqtt="\nINX-MQTT (IOTA) Autoupdater: $iotaInxMqttAutoUpdateStatus\nINX-MQTT (IOTA) Service Check: $iotaInxMqttServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/iota-inx-participation" ]; then
    swarmInfoIotaInxParticipation="\nINX-Participation (IOTA) Autoupdater: $iotaInxParticipationAutoUpdateStatus\nINX-Participation (IOTA) DB-Reset: $iotaInxParticipationAllowDbResetStatus\nINX-Participation (IOTA) Service Check: $iotaInxParticipationServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
    swarmInfoShimmerInxDashboard="\nINX-Dashboard (Shimmer) Autoupdater: $shimmerInxDashboardAutoUpdateStatus\nINX-Dashboard (Shimmer) Service Check: $shimmerInxDashboardServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    swarmInfoShimmerInxIndexer="\nINX-Indexer (Shimmer) Autoupdater: $shimmerInxIndexerAutoUpdateStatus\nINX-Indexer (Shimmer) DB-Reset: $shimmerInxIndexerAllowDbResetStatus\nINX-Indexer (Shimmer) Service Check: $shimmerInxIndexerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
    swarmInfoShimmerInxMqtt="\nINX-MQTT (Shimmer) Autoupdater: $shimmerInxMqttAutoUpdateStatus\nINX-MQTT (Shimmer) Service Check: $shimmerInxMqttServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    swarmInfoShimmerInxParticipation="\nINX-Participation (Shimmer) Autoupdater: $shimmerInxParticipationAutoUpdateStatus\nINX-Participation (Shimmer) DB-Reset: $shimmerInxParticipationAllowDbResetStatus\nINX-Participation (Shimmer) Service Check: $shimmerInxParticipationServiceStatusCheckStatus\n"
fi

if [ "$swarmInfo" = "true" ]; then
        # OUTPUT
        whiptail --scrolltext --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nTelegram Notifications: $telegramNotifiactionsStatus\n\nSWARM updater: $swarmAutoUpdateStatus\nLog rotation: $swarmLogRotation\nMax log size: ${swarmLogSize} MB\n\nFirewall: $firewall\n${swarmInfoIotaHornet}${swarmInfoShimmerHornet}${swarmInfoIotaBee}${swarmInfoShimmerBee}${swarmInfoGoshimmer}${swarmInfoWasp}${swarmInfoIotaInxDashboard}${swarmInfoIotaInxIndexer}${swarmInfoIotaInxMqtt}${swarmInfoIotaInxParticipation}${swarmInfoShimmerInxDashboard}${swarmInfoShimmerInxIndexer}${swarmInfoShimmerInxMqtt}${swarmInfoShimmerInxParticipation}" 24 65
fi
