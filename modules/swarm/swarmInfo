#!/bin/bash
source $swarmConfigs/swarm.cfg

if [ "$iotaHornetAutoUpdate" = "true" ]; then
    iotaHornetAutoUpdateStatus="✓"
else
    iotaHornetAutoUpdateStatus="X"
fi

if [ "$shimmerHornetAutoUpdate" = "true" ]; then
    shimmerHornetAutoUpdateStatus="✓"
else
    shimmerHornetAutoUpdateStatus="X"
fi

if [ "$goshimmerAutoUpdate" = "true" ]; then
    goshimmerAutoUpdateStatus="✓"
else
    goshimmerAutoUpdateStatus="X"
fi

if [ "$waspAutoUpdate" = "true" ]; then
    waspAutoUpdateStatus="✓"
else
    waspAutoUpdateStatus="X"
fi

if [ "$shimmerInxIndexerAutoUpdate" = "true" ]; then
    shimmerInxIndexerAutoUpdateStatus="✓"
else
    shimmerInxIndexerAutoUpdateStatus="X"
fi

if [ "$shimmerInxMqttAutoUpdate" = "true" ]; then
    shimmerInxMqttAutoUpdateStatus="✓"
else
    shimmerInxMqttAutoUpdateStatus="X"
fi

if [ "$shimmerInxParticipationAutoUpdate" = "true" ]; then
    shimmerInxParticipationAutoUpdateStatus="✓"
else
    shimmerInxParticipationAutoUpdateStatus="X"
fi

# DB Reset
if [ "$iotaHornetAllowDbReset" = "true" ]; then
    hornetAllowDbResetStatus="✓"
else
    hornetAllowDbResetStatus="X"
fi

if [ "$shimmerHornetAllowDbReset" = "true" ]; then
    shimmerHornetAllowDbResetStatus="✓"
else
    shimmerHornetAllowDbResetStatus="X"
fi

if [ "$iotaBeeAllowDbReset" = "true" ]; then
    iotaBeeAllowDbResetStatus="✓"
else
    iotaBeeAllowDbResetStatus="X"
fi

if [ "$iotaShimmerBeeAllowDbReset" = "true" ]; then
    shimmerBeeAllowDbResetStatus="✓"
else
    shimmerBeeAllowDbResetStatus="X"
fi

if [ "$goshimmerAllowDbReset" = "true" ]; then
    goshimmerAllowDbResetStatus="✓"
else
    goshimmerAllowDbResetStatus="X"
fi

if [ "$waspAllowDbReset" = "true" ]; then
    waspAllowDbResetStatus="✓"
else
    waspAllowDbResetStatus="X"
fi

if [ "$shimmerInxIndexerAllowDbReset" = "true" ]; then
    shimmerInxIndexerAllowDbResetStatus="✓"
else
    shimmerInxIndexerAllowDbResetStatus="X"
fi

if [ "$shimmerInxParticipationAllowDbReset" = "true" ]; then
    shimmerInxParticipationAllowDbResetStatus="✓"
else
    shimmerInxParticipationAllowDbResetStatus="X"
fi

if [ "$goshimmerAllowDbDownload" = "true" ]; then
    goshimmerAllowDbDownloadStatus="✓"
else
    goshimmerAllowDbDownloadStatus="X"
fi

# Service Check
if [ "$iotaHornetServiceStatusCheck" = "true" ]; then
    hornetServiceStatusCheckStatus="✓"
else
    hornetServiceStatusCheckStatus="X"
fi

if [ "$shimmerHornetServiceStatusCheck" = "true" ]; then
    shimmerHornetServiceStatusCheckStatus="✓"
else
    shimmerHornetServiceStatusCheckStatus="X"
fi

if [ "$goshimmerServiceStatusCheck" = "true" ]; then
    goshimmerServiceStatusCheckStatus="✓"
else
    goshimmerServiceStatusCheckStatus="X"
fi

if [ "$waspServiceStatusCheck" = "true" ]; then
    waspServiceStatusCheckStatus="✓"
else
    waspServiceStatusCheckStatus="X"
fi

if [ "$shimmerInxIndexerServiceStatusCheck" = "true" ]; then
    shimmerInxIndexerServiceStatusCheckStatus="✓"
else
    shimmerInxIndexerServiceStatusCheckStatus="X"
fi

if [ "$shimmerInxMqttServiceStatusCheck" = "true" ]; then
    shimmerInxMqttServiceStatusCheckStatus="✓"
else
    shimmerInxMqttServiceStatusCheckStatus="X"
fi

if [ "$shimmerInxParticipationServiceStatusCheck" = "true" ]; then
    shimmerInxParticipationServiceStatusCheckStatus="✓"
else
    shimmerInxParticipationServiceStatusCheckStatus="X"
fi

# Log Pruning
if [ "$swarmLogRotation" = "true" ]; then
    swarmLogRotation="✓"
else
    swarmLogRotation="X"
fi

if [ "$swarmAutoUpdate" = "true" ]; then
    swarmAutoUpdateStatus="✓"
else
    swarmAutoUpdateStatus="X"
fi

if [ "$ufw" = "true" ]; then
    firewallStatus=$(ufw status | grep -o "inactive")
    if [ "$firewallStatus" = "inactive" ]; then
        firewall="X"
    else
        firewall="✓"
    fi
fi

if [ "$telegramNotifications" = "true" ] && [ ! -z "$telegramBotToken" ] && [ ! -z "$telegramChannelId" ]; then
    telegramNotifiactionsStatus="✓"
else
    telegramNotifiactionsStatus="X"
fi

if [ -f "/usr/bin/iota-hornet" ]; then
    swarmInfoIotaHornet="\nHornet Autoupdater: $iotaHornetAutoUpdateStatus\nHornet Sync-check: $iotaHornetCheckSyncStatus\nMax unsync: $iotaHornetMaxMilestones milestones\nHornet DB-Reset: $iotaHornetAllowDbResetStatus\nHornet service check: $iotaHornetServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-hornet" ]; then
    swarmInfoShimmerHornet="\nHornet-Shimmer Autoupdater: $shimmerHornetAutoUpdateStatus\nHornet-Shimmer Sync-check: $shimmerHornetCheckSyncStatus\nMax unsync: $shimmerHornetMaxMilestones milestones\nHornet-Shimmer DB-Reset: $shimmerHornetAllowDbResetStatus\n$shimmerHornetServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/goshimmer" ]; then
    swarmInfoGoshimmer="\nGoShimmer Autoupdater: $goshimmerAutoUpdateStatus\nGoShimmer Sync-check: $goshimmerCheckSyncStatus\nGoShimmer DB download: $goshimmerAllowDbDownloadStatus\nGoShimmer DB-Reset: $goshimmerAllowDbResetStatus\n$goshimmerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/wasp" ]; then
    swarmInfoWasp="\nWasp Autoupdater: $waspAutoUpdateStatus\nWasp Service Check: $shimmerInxIndexerServiceStatusCheck\nWasp DB-Reset: $waspAllowDbResetStatus\n$waspServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    swarmInfoShimmerInxIndexer="\nINX-Indexer Autoupdater: $shimmerInxIndexerAutoUpdateStatus\nINX-Indexer DB-Reset: $shimmerInxIndexerAllowDbResetStatus\nINX-Indexer Service Check: $shimmerInxIndexerServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
    swarmInfoShimmerInxMqtt="\nINX-MQTT Autoupdater: $shimmerInxMqttAutoUpdateStatus\nINX-MQTT Service Check: $shimmerInxMqttServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    swarmInfoShimmerInxParticipation="\nINX-Participation Autoupdater: $shimmerInxParticipationAutoUpdateStatus\nINX-Participation DB-Reset: $shimmerInxParticipationAllowDbResetStatus\nINX-Participation Service Check: $shimmerInxParticipationServiceStatusCheckStatus\n"
fi

if [ -f "/usr/bin/shimmer-inx-poi" ]; then
    swarmInfoShimmerInxPoi="\nINX-POI Autoupdater: $shimmerInxPoiAutoUpdateStatus\nINX-POI Service Check: $shimmerInxPoiServiceStatusCheckStatus\n"
fi


if [ "$swarmInfo" = "true" ]; then
        # OUTPUT
        whiptail --scrolltext --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nTelegram Notifications: $telegramNotifiactionsStatus\n\nSWARM updater: $swarmAutoUpdateStatus\nLog rotation: $swarmLogRotation\nMax log size: ${swarmLogSize} MB\n\nFirewall: $firewall\n${swarmInfoIotaHornet}${swarmInfoShimmerHornet}${swarmInfoGoshimmer}${swarmInfoWasp}${swarmInfoShimmerInxIndexer}${swarmInfoShimmerInxMqtt}${swarmInfoShimmerInxParticipation}${swarmInfoShimmerInxPoi}" 24 65
fi
