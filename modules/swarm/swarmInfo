#!/bin/bash
source $swarmConfigs/swarm.cfg

# Watchdog
crontab -l | grep -q "$watchdogCronCmd" && watchdogStatus=enabled || watchdogStatus=disabled > /dev/null 2>&1

if [ "$hornetAutoUpdate" = "true" ]; then
    hornetAutoUpdateStatus=enabled
else
    hornetAutoUpdateStatus=disabled
fi

if [ "$hornetShimmerAutoUpdate" = "true" ]; then
    hornetShimmerAutoUpdateStatus=enabled
else
    hornetShimmerAutoUpdateStatus=disabled
fi

if [ "$beeAutoUpdate" = "true" ]; then
    beeAutoUpdateStatus=enabled
else
    beeAutoUpdateStatus=disabled
fi

if [ "$beeShimmerAutoUpdate" = "true" ]; then
    beeShimmerAutoUpdateStatus=enabled
else
    beeShimmerAutoUpdateStatus=disabled
fi

if [ "$goshimmerAutoUpdate" = "true" ]; then
    goshimmerAutoUpdateStatus=enabled
else
    goshimmerAutoUpdateStatus=disabled
fi

# Sync Check
if [ "$hornetCheckSync" = "true" ]; then
    hornetCheckSyncStatus=enabled
else
    hornetCheckSyncStatus=disabled
fi

if [ "$hornetShimmerCheckSync" = "true" ]; then
    hornetShimmerCheckSyncStatus=enabled
else
    hornetShimmerCheckSyncStatus=disabled
fi

if [ "$beeCheckSync" = "true" ]; then
    beeCheckSyncStatus=enabled
else
    beeCheckSyncStatus=disabled
fi

if [ "$beeShimmerCheckSync" = "true" ]; then
    beeShimmerCheckSyncStatus=enabled
else
    beeShimmerCheckSyncStatus=disabled
fi

if [ "$goshimmerCheckSync" = "true" ]; then
    goshimmerCheckSyncStatus=enabled
else
    goshimmerCheckSyncStatus=disabled
fi

# DB Reset
if [ "$hornetAllowDbReset" = "true" ]; then
    hornetAllowDbResetStatus=enabled
else
    hornetAllowDbResetStatus=disabled
fi

if [ "$hornetShimmerAllowDbReset" = "true" ]; then
    hornetShimmerAllowDbResetStatus=enabled
else
    hornetShimmerAllowDbResetStatus=disabled
fi

if [ "$beeAllowDbReset" = "true" ]; then
    beeAllowDbResetStatus=enabled
else
    beeAllowDbResetStatus=disabled
fi

if [ "$beeShimmerAllowDbReset" = "true" ]; then
    beeShimmerAllowDbResetStatus=enabled
else
    beeShimmerAllowDbResetStatus=disabled
fi

if [ "$goshimmerAllowDbReset" = "true" ]; then
    goshimmerAllowDbResetStatus=enabled
else
    goshimmerAllowDbResetStatus=disabled
fi

if [ "$goshimmerAllowDbDownload" = "true" ]; then
    goshimmerAllowDbDownloadStatus=enabled
else
    goshimmerAllowDbDownloadStatus=disabled
fi

# Log Pruning
if [ "$swarmLogRotation" = "true" ]; then
    swarmLogRotation=enabled
else
    swarmLogRotation=disabled
fi

if [ "$swarmAutoUpdate" = "true" ]; then
    swarmAutoUpdateStatus=enabled
else
    swarmAutoUpdateStatus=disabled
fi

if [ "$ufw" = "true" ]; then
    firewallStatus=$(ufw status | grep -o "inactive")
    if [ "$firewallStatus" = "inactive" ]; then
        firewall=disabled
    else
        firewall=enabled
    fi
fi

if [ "$telegramNotifications" = "true" ] && [ ! -z "$telegramBotToken" ] && [ ! -z "$telegramChannelId" ]; then
    telegramNotifiactionsStatus=enabled
else
    telegramNotifiactionsStatus=disabled
fi

if [ "$swarmInfo" = "true" ]; then
    if [ "$watchdogStatus" = "enabled" ]; then
        # OUTPUT
        whiptail --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nWatchdog: $watchdogStatus\nTelegram Notifications: $telegramNotifiactionsStatus\n\nSWARM updater: $swarmAutoUpdateStatus\nLog rotation: $swarmLogRotation\nMax log size: ${swarmLogSize} MB\n\nHornet Autoupdater: $hornetAutoUpdateStatus\nHornet Sync-check: $hornetCheckSyncStatus\nMax unsync: $hornetMaxMilestones milestones\nHornet DB-Reset: $hornetAllowDbResetStatus\n\nHornet-Shimmer Autoupdater: $hornetShimmerAutoUpdateStatus\nHornet-Shimmer Sync-check: $hornetShimmerCheckSyncStatus\nMax unsync: $hornetShimmerMaxMilestones milestones\nHornet-Shimmer DB-Reset: $hornetShimmerAllowDbResetStatus\n\nBee Autoupdater: $beeAutoUpdateStatus\nBee Sync-check: $beeCheckSyncStatus\nMax unsync: $beeMaxMilestones milestones\nBee DB-Reset: $beeAllowDbResetStatus\n\nBee-Shimmer Autoupdater: $beeShimmerAutoUpdateStatus\nBee-Shimmer Sync-check: $beeShimmerCheckSyncStatus\nMax unsync: $beeShimmerMaxMilestones milestones\nBee-Shimmer DB-Reset: $beeShimmerAllowDbResetStatus\n\nGoShimmer Autoupdater: $goshimmerAutoUpdateStatus\nGoShimmer Sync-check: $goshimmerCheckSyncStatus\nGoShimmer DB download: $goshimmerAllowDbDownloadStatus\nGoShimmer DB-Reset: $goshimmerAllowDbResetStatus\n\nFirewall: $firewall" 40 65
    else
        # OUTPUT
        whiptail --title "SWARM Info [v$version]" --msgbox "Theme: \"$swarmTheme\"\n\nWatchdog: $watchdogStatus\nFirewall: $firewall" 14 65
    fi
fi
