#!/bin/bash

# Load new env
source /var/lib/swarm/environment

sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1

source $swarmModules/swarmParser

( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1

# Remove hornet apt source
if [ -f "/etc/apt/sources.list.d/hornet.list" ] || [ -f "/etc/apt/sources.list.d/hornet.list.distUpgrade" ]; then
    sudo rm -rf /etc/apt/sources.list.d/hornet* > /dev/null 2>&1
    sudo apt-get -qq update > /dev/null 2>&1
fi

if [ -f "/usr/bin/hornet" ]; then
    source $hornetModules/hornetParser
    if [ "$restartHornet" = "true" ]; then
        sudo systemctl restart hornet > /dev/null 2>&1
        unset restartHornet
    fi
fi
if [ -f "/usr/bin/bee" ]; then
    beeIgnorePeersUpdate=true
    source $beeModules/beeParser
    if [ "$restartBee" = "true" ]; then
        sudo systemctl restart bee > /dev/null 2>&1
        unset restartBee
    fi
    unset beeIgnorePeersUpdate
fi

if [ -f "/usr/bin/iota-inx-dashboard" ]; then
    source $iotaInxDashboardModules/iotaInxDashboardParser
    if [ "$restartIotaInxDashboard" = "true" ]; then
        sudo systemctl restart iota-inx-dashboard > /dev/null 2>&1
        unset restartIotaInxDashboard
    fi
fi
if [ -f "/usr/bin/iota-inx-indexer" ]; then
    source $iotaInxIndexerModules/iotaInxIndexerParser
    if [ "$restartIotaInxIndexer" = "true" ]; then
        sudo systemctl restart iota-inx-indexer > /dev/null 2>&1
        unset restartIotaInxIndexer
    fi
fi
if [ -f "/usr/bin/iota-inx-mqtt" ]; then
    source $iotaInxMqttModules/iotaInxMqttParser
    if [ "$restartIotaInxMqtt" = "true" ]; then
        sudo systemctl restart iota-inx-mqtt > /dev/null 2>&1
        unset restartInxMqtt
    fi
fi
if [ -f "/usr/bin/iota-inx-participation" ]; then
    source $iotaInxParticipationModules/iotaInxParticipationParser
    if [ "$restartIotaInxParticipation" = "true" ]; then
        sudo systemctl restart iota-inx-participation > /dev/null 2>&1
        unset restartIotaInxParticipation
    fi
fi

######################################################################

if [ -f "/usr/bin/hornet-shimmer" ]; then
    source $shimmerHornetModules/shimmerHornetParser
    if [ "$restartHornetShimmer" = "true" ]; then
        sudo systemctl restart hornet-shimmer > /dev/null 2>&1
        unset restartHornetShimmer
    fi
fi

if [ -f "/usr/bin/bee-shimmer" ]; then
    shimmerBeeIgnorePeersUpdate=true
    source $shimmerBeeModules/shimmerBeeParser
    if [ "$restartBeeShimmer" = "true" ]; then
        sudo systemctl restart bee-shimmer > /dev/null 2>&1
        unset restartBeeShimmer
    fi
    unset shimmerBeeIgnorePeersUpdate
fi

if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
    source $shimmerInxDashboardModules/shimmerInxDashboardParser
    if [ "$restartShimmerInxDashboard" = "true" ]; then
        sudo systemctl restart shimmer-inx-dashboard > /dev/null 2>&1
        unset restartShimmerInxDashboard
    fi
fi
if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
    source $shimmerInxIndexerModules/shimmerInxIndexerParser
    if [ "$restartShimmerInxIndexer" = "true" ]; then
        sudo systemctl restart shimmer-inx-indexer > /dev/null 2>&1
        unset restartShimmerInxIndexer
    fi
fi
if [ -f "/usr/bin/inx-mqtt" ]; then
    source $shimmerInxMqttModules/shimmerInxMqttParser
    if [ "$restartShimmerInxMqtt" = "true" ]; then
        sudo systemctl restart shimmer-inx-mqtt > /dev/null 2>&1
        unset restartInxMqtt
    fi
fi
if [ -f "/usr/bin/shimmer-inx-participation" ]; then
    source $shimmerInxParticipationModules/shimmerInxParticipationParser
    if [ "$restartShimmerInxParticipation" = "true" ]; then
        sudo systemctl restart shimmer-inx-participation > /dev/null 2>&1
        unset restartShimmerInxParticipation
    fi
fi

#######################################################################

if [ -f "/usr/bin/goshimmer" ]; then
    source $goshimmerModules/goshimmerParser
    if [ "$restartGoshimmer" = "true" ]; then
        sudo systemctl restart goshimmer > /dev/null 2>&1
        unset restartGoshimmer
    fi
fi
if [ -f "/usr/bin/wasp" ]; then
    source $waspModules/waspParser
    if [ "$restartWasp" = "true" ]; then
        sudo systemctl restart wasp > /dev/null 2>&1
        unset restartWasp
    fi
fi

source $proxyModules/proxyAutomaticDeployment

source $proxyModules/proxySwarmEndpoint
