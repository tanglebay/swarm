#!/bin/bash

# Load new env
source /var/lib/swarm/environment

sudo chmod +x $swarmHome/swarm $swarmPlugins/watchdog > /dev/null 2>&1

source $swarmModules/swarmParser

( crontab -l | grep -v -F "$watchdogCronCmd" ) | crontab - > /dev/null 2>&1
( crontab -l | grep -v -F "$watchdogCronCmd" ; echo "$watchdogCronJob" ) | crontab - > /dev/null 2>&1

# Remove hornet apt source
if [ -f "/etc/apt/sources.list.d/hornet.list" ] || [ -f "/etc/apt/sources.list.d/hornet.list.distUpgrade" ]; then
    sudo rm -rf /etc/apt/sources.list.d/hornet* > /dev/null 2>&1
    sudo apt-get -qq update > /dev/null 2>&1
fi

if [ -f "/usr/bin/hornet" ]; then
    source $hornetModules/hornetParser
    if [ "$restartHornet" = "true" ]; then
        sudo systemctl restart hornet > /dev/null 2>&1
        unset restartHornet
    fi
fi
if [ -f "/usr/bin/hornet-shimmer" ]; then
    source $hornetShimmerModules/hornetShimmerParser
    if [ "$restartHornetShimmer" = "true" ]; then
        sudo systemctl restart hornet-shimmer > /dev/null 2>&1
        unset restartHornetShimmer
    fi
fi
if [ -f "/usr/bin/bee" ]; then
    beeIgnorePeersUpdate=true
    source $beeModules/beeParser
    if [ "$restartBee" = "true" ]; then
        sudo systemctl restart bee > /dev/null 2>&1
        unset restartBee
    fi
    unset beeIgnorePeersUpdate
fi
if [ -f "/usr/bin/bee-shimmer" ]; then
    beeShimmerIgnorePeersUpdate=true
    source $beeShimmerModules/beeShimmerParser
    if [ "$restartBeeShimmer" = "true" ]; then
        sudo systemctl restart bee-shimmer > /dev/null 2>&1
        unset restartBeeShimmer
    fi
    unset beeShimmerIgnorePeersUpdate
fi
if [ -f "/usr/bin/goshimmer" ]; then
    source $goshimmerModules/goshimmerParser
    if [ "$restartGoshimmer" = "true" ]; then
        sudo systemctl restart goshimmer > /dev/null 2>&1
        unset restartGoshimmer
    fi
fi
if [ -f "/usr/bin/wasp" ]; then
    source $waspModules/waspParser
    if [ "$restartWasp" = "true" ]; then
        sudo systemctl restart wasp > /dev/null 2>&1
        unset restartWasp
    fi
fi
if [ -f "/usr/bin/inx-indexer" ]; then
    source $inxIndexerModules/inxIndexerParser
    if [ "$restartInxIndexer" = "true" ]; then
        sudo systemctl restart inx-indexer > /dev/null 2>&1
        unset restartInxIndexer
    fi
fi
if [ -f "/usr/bin/inx-mqtt" ]; then
    source $inxMqttModules/inxMqttParser
    if [ "$restartInxMqtt" = "true" ]; then
        sudo systemctl restart inx-mqtt > /dev/null 2>&1
        unset restartInxMqtt
    fi
fi
if [ -f "/usr/bin/inx-participation" ]; then
    source $inxParticipationModules/inxParticipationParser
    if [ "$restartInxParticipation" = "true" ]; then
        sudo systemctl restart inx-participation > /dev/null 2>&1
        unset restartInxParticipation
    fi
fi

source $proxyModules/proxyAutomaticDeployment

source $swarmHome/version
swarmEndpointVersion=$(cat /var/www/html/swarm.json |jq '.swarm.version' | tr -d '"')
if [ "$swarmEndpointVersion" != "$version" ] || [ -z "$swarmEndpointVersion" ] || [ "$swarmEndpointVersion" = "null" ]; then
    echo "{\"swarm\":{\"version\":\"$version\"}}" > /var/www/swarm.json
fi
unset swarmEndpointVersion
