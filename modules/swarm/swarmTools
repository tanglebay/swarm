#!/bin/bash
while [ $exitCode -lt 1 ]; do
    CHOICE=$(
        whiptail --title "SWARM - Plugins" --menu "\nChoose an option" 14 65 0 \
        "1)" "Perform system updates" \
        "2)" "Manage System Firewall" \
        "3)" "Secure SSH server (login)" \
        "4)" "Show Server IP4/IP6" \
        "5)" "GoShimmer Remover" 3>&2 2>&1 1>&3
    )
    exitStatus=$?
    if [ "$exitStatus" = "1" ]; then
        exitCode=1
    fi
    case $CHOICE in
        "1)")
            if (whiptail --title "System Updates" --yesno --defaultno "Do you really want to perform a system update?" 8 65); then
                TEXT_RESET='\e[0m'
                TEXT_YELLOW='\e[0;33m'
                clean
                sudo apt-get update
                echo ""
                echo -e $TEXT_YELLOW 
                echo "APT updates finished."
                echo -e $TEXT_RESET
                echo ""
                sudo apt dist-upgrade -y
                echo ""
                echo -e $TEXT_YELLOW
                echo "APT distributive upgrades finished."
                echo -e $TEXT_RESET
                echo ""
                sudo apt upgrade -y
                echo ""
                echo -e $TEXT_YELLOW
                echo "APT upgrades finished."
                echo -e $TEXT_RESET
                echo ""
                sudo apt autoremove -y
                echo ""
                echo -e $TEXT_YELLOW
                echo "APT auto remove finished."
                echo -e $TEXT_RESET
                echo ""
                sudo apt autoclean -y
                echo ""
                echo -e $TEXT_YELLOW
                echo "APT auto clean finished."
                echo -e $TEXT_RESET
                echo ""
                sleep 2
                if [ -f /var/run/reboot-required ]; then
                    if (whiptail --title "System Updates" --yesno --defaultno "It is recommended to reboot the system, do you want to reboot the system now?" 8 65); then
                        sudo reboot
                        exit 0
                    fi
                else
                    whiptail --title "System Updates" --msgbox "System updates successfully performed!" 8 65
                fi
                unset TEXT_RESET TEXT_YELLOW
            fi
        ;;
        "2)")
            if [ "$ufw" = "true" ]; then
                firewallStatus=$(ufw status | grep -o "inactive")
                if [ "$firewallStatus" = "inactive" ]; then
                    firewall=disabled
                else
                    firewall=enabled
                fi
                CHOICE=$(
                    whiptail --title "System Firewall" --menu "\nFirewall: $firewall\n\nChoose an option" 16 65 0 \
                    "1)" "Enable Firewall" \
                    "2)" "Disable Firewall" 3>&2 2>&1 1>&3
                )
                case $CHOICE in
                    "1)")
                        sudo ufw default deny incoming > /dev/null 2>&1
                        sshPort=$(sudo grep "Port [0-9]" /etc/ssh/sshd_config | awk  '{print $2}')
                        if [ $sshPort -eq $sshPort ]; then
                            sudo ufw limit $sshPort/tcp > /dev/null 2>&1
                            sudo ufw --force enable > /dev/null 2>&1
                            whiptail --title "System Firewall" --msgbox "Firewall successfully activated!" 8 65
                        else
                            sshPort=$(whiptail --inputbox "\nPlease enter your SSH port" 10 65 --title "System Firewall" 3>&1 1>&2 2>&3)
                            if [ $sshPort -eq $sshPort ]; then
                                sudo ufw limit $sshPort/tcp > /dev/null 2>&1
                                sudo ufw --force enable > /dev/null 2>&1
                                whiptail --title "System Firewall" --msgbox "Firewall successfully activated!" 8 65
                            else
                                whiptail --title "System Firewall" --msgbox "Firewall could not be activated because no valid SSH port was specified/found!" 8 65
                            fi
                        fi
                    ;;
                    "2)")
                        sudo ufw disable > /dev/null 2>&1
                        whiptail --title "System Firewall" --msgbox "Firewall successfully deactivated!" 8 65
                    ;;
                esac
            fi
        ;;
        "3)")
            if (whiptail --title "SWARM - SSH" --yesno --defaultno "Do you want to run the SSH hardening setup?" 8 65); then
                currentSshPort=$(grep ^\#Port /etc/ssh/sshd_config | awk '{ print $2 }')
                if [ -z "$currentSshPort" ]; then
                    currentSshPort=$(grep ^Port /etc/ssh/sshd_config | awk '{ print $2 }')
                fi
                sshUsername=$(whiptail --inputbox "\nPlease enter the user for the SSH login" 10 65 --title "SWARM - SSH" 3>&1 1>&2 2>&3)
                if id $sshUsername >/dev/null 2>&1; then
                    # Deploy sshd config template
                    sudo cat $swarmTemplates/swarm/sshd.config > /etc/ssh/sshd_config
                    # SSH port
                    sshPort=$(whiptail --inputbox "\nPlease enter the new SSH port" 10 65 $currentSshPort --title "SWARM - SSH" 3>&1 1>&2 2>&3)
                    if [ $sshPort -eq $sshPort ] 2>/dev/null && [ $currentSshPort -ne $sshPort ] 2>/dev/null; then
                        sudo sed -i 's/^Port.*/Port '$sshPort'/' /etc/ssh/sshd_config
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete limit $currentSshPort/tcp > /dev/null 2>&1
                            sudo ufw limit $sshPort/tcp > /dev/null 2>&1
                        fi
                    else
                        sshPort=$currentSshPort
                        sudo ufw limit $sshPort/tcp > /dev/null 2>&1
                    fi
                    # root login
                    if [ "$sshUsername" = "root" ]; then
                        sshRootLogin="permitted"
                        sudo sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
                    else
                        sshRootLogin="prohibited"
                        sudo sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
                    fi
                    # SSH key user
                    if [ "$sshUsername" = "root" ]; then
                        sshUserPath="/root/.ssh"
                    else
                        sshUserPath="/home/$sshUsername/.ssh"
                    fi
                    if [ -f "$sshUserPath/authorized_keys" ]; then
                        if (whiptail --title "SWARM - SSH" --yesno --defaultno "Do you want to update the auth key?" 8 65); then
                            sshPubKey=$(whiptail --inputbox "\nPlease enter your ed25519 public key" 10 65 --title "SWARM - SSH" 3>&1 1>&2 2>&3)
                            if [[ $sshPubKey = *ssh-ed25519* ]]; then
                                sudo echo $sshPubKey > $sshUserPath/authorized_keys
                                sshPubKeyInfo="\nSSH public key: \"$sshPubKey\""
                            else
                                sudo sed -i 's/^PubkeyAuthentication.*/PubkeyAuthentication no/' /etc/ssh/sshd_config
                                sudo sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
                                sshPubKeyInfo="\nSSH public key: *no valid public key*"
                            fi
                        else
                            sshPubKeyInfo="\nSSH public key: *not changed*"
                        fi
                    else
                        sshPubKey=$(whiptail --inputbox "\nPlease enter your ed25519 public key" 10 65 --title "SWARM - SSH" 3>&1 1>&2 2>&3)
                        if [[ $sshPubKey = *ssh-ed25519* ]]; then
                            if [ ! -d "$sshUserPath" ]; then
                                sudo mkdir -p $sshUserPath
                                sudo chmod 700 $sshUserPath
                                sudo chown $sshUsername:$sshUsername $sshUserPath
                            fi
                            echo $sshPubKey > $sshUserPath/authorized_keys
                            sudo chmod 400 $sshUserPath/authorized_keys
                            sudo chown $sshUsername:$sshUsername $sshUserPath/authorized_keys
                            sshPubKeyInfo="\nSSH public key: \"$sshPubKey\""
                        else
                            sudo sed -i 's/^PubkeyAuthentication.*/PubkeyAuthentication no/' /etc/ssh/sshd_config
                            sudo sed -i 's/^PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
                            sshPubKeyInfo="\nSSH public key: *no valid public key*\n\nSSH login is not secure, please enable SSH public key authentication!"
                        fi
                    fi
                    sudo systemctl restart sshd > /dev/null 2>&1
                    whiptail --title "SWARM - SSH" --msgbox "\nThe following SSH settings were applied:\n\nSSH Port: $sshPort\nSSH User: $sshUsername\nRoot login: $sshRootLogin\n$sshPubKeyInfo" 18 65
                else
                    whiptail --title "SWARM - SSH" --msgbox "\nAborted! The user \"$sshUsername\" does not exist." 10 65
                fi
            fi
        ;;
        "4)")
            ip4=$(hostname -I | cut -d " " -f 1)
            ip6=$(hostname -I | cut -d " " -f 2)
            whiptail --title "SWARM Menu" --msgbox "\nNetwork Addresses\n\nIPv4: $ip4\nIPv6: $ip6" 12 65
        ;;
        "5)")
            if [ -f "/usr/bin/goshimmer" ]; then
                if (whiptail --title "SWARM [-] Tools" --yesno --defaultno "Do you want to remove GoShimmer?" 8 65); then
                    source $swarmModule/swarmGoshimmerRemoval
                fi
            else
                whiptail --title "SWARM [-] Tools" --msgbox "\nAborted! GoShimmer not found." 10 65
            fi
    esac
done
exitCode=0