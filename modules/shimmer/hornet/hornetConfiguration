#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $shimmerHornetModules/hornetConfigs
    CHOICE=$(
        whiptail --title "Hornet-Shimmer - Configurations" --menu "\nChoose an option" 28 65 0 \
        "1)" "Dashboard" \
        "2)" "API & JWT" \
        "3)" "Node Alias" \
        "4)" "DB Pruning" \
        "5)" "Proof of Work" \
        "6)" "Local Snapshots" \
        "7)" "Enable Plugins" \
        "8)" "Disable Plugins" \
        "9)" "P2P Identity" \
        "10)" "Database Revalidation" \
        "11)" "Gossip Port" \
        "12)" "Autopeering Port" \
        "13)" "Unknown Peers Limit" \
        "14)" "IOTA Network" \
        "15)" "Hornet release Channel" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartShimmerHornet" = "true" ] && [ -f "/usr/bin/shimmer-hornet" ]; then
            if (whiptail --title "Hornet-Shimmer Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $shimmerHornetModules/hornetParser
                    echo 50
                    sudo systemctl restart shimmer-hornet > /dev/null 2>&1
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartShimmerHornet
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet-Shimmer - Dashboard" --menu "\nChoose an option" 16 65 0 \
                    "1)" "Dashboard Username" \
                    "2)" "Dashboard Password" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            shimmerHornetUsername=$(whiptail --inputbox "\nDefine a username for the dashboard login" 10 65 $shimmerHornetUsername --title "Hornet-Shimmer - Dashboard" 3>&1 1>&2 2>&3)
                            exitStatus=$?
                            if [ $exitStatus != 1 ]; then
                                if [ ! -z "$shimmerHornetUsername" ]; then
                                    source $shimmerHornetConfigParsers/hornetDashboardUsername
                                    if [ "$newShimmerHornetUsername" = "true" ]; then
                                        sudo sed -i 's/^shimmerHornetUsername=.*/shimmerHornetUsername="'$shimmerHornetUsername'"/' $swarmConfigs/shimmer-hornet.cfg
                                        whiptail --title "Hornet-Shimmer - Dashboard" --msgbox "New username \"$shimmerHornetUsername\" applied!" 8 65
                                        unset newShimmerHornetUsername
                                    else
                                        whiptail --title "Hornet-Shimmer - Dashboard" --msgbox "No username change detected." 8 65
                                    fi
                                else
                                    whiptail --title "Hornet-Shimmer - Dashboard" --msgbox "No valid username, please try again." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet-Shimmer - Dashboard" --msgbox "Please install Hornet (Shimmer) first." 8 65
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetDashboardPwdGen
                        else
                            whiptail --title "Hornet-Shimmer - Dashboard" --msgbox "Please install Hornet (Shimmer) first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet-Shimmer - API & JWT" --menu "\nChoose an option" 20 65 0 \
                    "1)" "API Routes" \
                    "2)" "Generate new JWT token" \
                    "3)" "Show all JWT token" \
                    "4)" "Revoke all JWT token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        shimmerHornetApiRoutes="$shimmerHornetApiProtectedRoutes"
                        source $shimmerHornetModules/hornetApiRoutes
                        shimmerHornetApiRoutes=$(whiptail --title "Hornet-Shimmer - API routes" --checklist "\nSelect (using the spacebar) the Hornet API routes that you want to protect. All routes not selected will be public:" 28 65 11 \
                            "/health" "" $shimmerHornetApiRoutesHealth \
                            "/api/v2/info" "" $shimmerHornetApiRoutesInfo \
                            "/api/v2/tips" "" $shimmerHornetApiRoutesTips \
                            "/api/v2/blocks*" "" $shimmerHornetApiRoutesBlocks \
                            "/api/v2/transactions*" "" $shimmerHornetApiRoutesTransactions \
                            "/api/v2/milestones*" "" $shimmerHornetApiRoutesMilestones \
                            "/api/v2/outputs*" "" $shimmerHornetApiRoutesOutputs \
                            "/api/v2/addresses*" "" $shimmerHornetApiRoutesAddresses \
                            "/api/v2/treasury" "" $shimmerHornetApiRoutesTreasury \
                            "/api/v2/receipts*" "" $shimmerHornetApiRoutesReceipts \
                            "/api/plugins/debug/v1/*" "" $shimmerHornetApiRoutesDebug \
                            "/api/plugins/indexer/v1/*" "" $shimmerHornetApiRoutesIndexer \
                            "/api/plugins/mqtt/v1" "" $shimmerHornetApiRoutesMqtt \
                            "/api/plugins/participation/v2/events*" "" $shimmerHornetApiRoutesParticipationEvents \
                            "/api/plugins/participation/v2/outputs*" "" $shimmerHornetApiRoutesParticipationOutputs \
                            "/api/plugins/participation/v2/addresses*" "" $shimmerHornetApiRoutesParticipationAddresses 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        shimmerHornetApiRoutes=$(echo $shimmerHornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            shimmerHornetUpdateApiRoutes=true
                            source $shimmerHornetModules/hornetApiRoutes
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetConfigParsers/hornetApiPublicRoutes
                            fi
                            unset shimmerHornetUpdateApiRoutes
                        fi
                        unset shimmerHornetApiRoutes
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet-Shimmer - API & JWT" --yesno --defaultno "Are you sure you want to generate a new JWT token?" 8 65); then
                                shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api | awk '{ print $5 }')
                                if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                    sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    echo $shimmerHornetApiJwtToken >> $swarmLogs/shimmerHornetJwtToken.log
                                    clear
                                    echo ""
                                    echo $shimmerHornetApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Hornet-Shimmer - API & JWT" --msgbox "Error generating JWT token, please try again later." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet-Shimmer - API & JWT" --msgbox "Please install Hornet (Shimmer) first." 8 65
                        fi
                    ;;
                    "3)")
                        if [ -f "$swarmLogs/shimmerHornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/shimmerHornetJwtToken.log
                        else
                            whiptail --title "Hornet-Shimmer - API & JWT" --msgbox "No JWT token log found, please generate one first." 8 65
                        fi
                    ;;
                    "4)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet (Shimmer) - API & JWT" --yesno --defaultno "Are you sure you want to revoke all JWT tokens?" 8 65); then
                                hornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sudo sed -i 's~^shimmerHornetApiJwtSalt=.*~shimmerHornetApiJwtSalt="'$shimmerHornetApiJwtSalt'"~' $swarmConfigs/shimmer-hornet.cfg
                                {
                                    echo 0
                                    echo 15
                                    source $shimmerHornetConfigParsers/hornetApiJwtSalt
                                    echo 30
                                    sudo rm -rf $swarmLogs/shimmerHornetJwt.log
                                    echo 45
                                    source $shimmerHornetConfigParsers/hornetIdentity
                                    echo 60
                                    sudo systemctl restart shimmer-hornet 2>/dev/null
                                    echo 75
                                    shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                        sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all JWT tokens will be revoked..." 8 65 0
                            fi
                        else
                            whiptail --title "Hornet (Shimmer) - API & JWT" --msgbox "Please install Hornet (Shimmer) first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            if [ -f "/usr/bin/shimmer-hornet" ]; then
                shimmerHornetAlias=$(whiptail --inputbox "\nDefine an alias of your node in the dashboard" 10 65 $shimmerHornetAlias --title "Hornet-Shimmer - Alias" 3>&1 1>&2 2>&3)
                if [ ! -z "$shimmerHornetAlias" ]; then
                    source $shimmerHornetConfigParsers/hornetAlias
                    if [ "$newShimmerHornetAlias" = "true" ]; then
                        sudo sed -i 's~^shimmerHornetAlias=.*~shimmerHornetAlias="'$shimmerHornetAlias'"~' $swarmConfigs/shimmer-hornet.cfg
                        whiptail --title "Hornet-Shimmer - Alias" --msgbox "New alias \"$shimmerHornetAlias\" applied!" 8 65
                        unset newShimmerHornetAlias
                    else
                        whiptail --title "Hornet-Shimmer - Alias" --msgbox "No node alias change detected!" 8 65
                    fi
                fi
            else
                whiptail --title "Hornet-Shimmer - Alias" --msgbox "Please install Hornet (Shimmer) first." 8 65
            fi
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet Pruning
                if [ "$shimmerHornetPruningEnabled" = "true" ]; then
                    shimmerHornetPruningEnabledStatus=enabled
                else
                    shimmerHornetPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet-Shimmer - Pruning" --menu "\nStatus: $shimmerHornetPruningEnabledStatus\n\nChoose an option" 20 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$shimmerHornetPruning" = "true" ]; then
                            shimmerHornetPruningStatus=enabled
                        else
                            shimmerHornetPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet-Shimmer - Pruning" --menu "\nStatus: $shimmerHornetPruningEnabledStatus\n\nChoose an option" 16 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                shimmerHornetPruningEnabled=true
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetPruningEnabled
                                fi
                                sudo sed -i 's/^shimmerHornetPruningEnabeld=.*/shimmerHornetPruningEnabled='$shimmerHornetPruningEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Pruning" --msgbox "Pruning was successfully activated!" 8 65
                            ;;
                            "2)")
                                shimmerHornetPruningEnabled=false
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetPruningEnabled
                                fi
                                sudo sed -i 's/^shimmerHornetPruningEnabled=.*/shimmerHornetPruningEnabled='$shimmerHornetPruningEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Pruning" --msgbox "Pruning was successfully deactivated!" 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        shimmerHornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $shimmerHornetPruningDatabaseSize --title "Hornet-Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningDatabaseSize=${shimmerHornetPruningDatabaseSize//[!0-9]/}
                            if [ ! -z "$shimmerHornetPruningDatabaseSize" ] && [ $shimmerHornetPruningDatabaseSize -eq $shimmerHornetPruningDatabaseSize ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetPruningDatabaseSize
                                fi
                                sudo sed -i 's/^shimmerHornetPruningDatabaseSize=.*/shimmerHornetPruningDatabaseSize='$shimmerHornetPruningDatabaseSize'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Pruning" --msgbox "Pruning of the database set to ${shimmerHornetPruningDatabaseSize}GB!" 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentShimmerHornetPruningCooldownTime=$shimmerHornetPruningCooldownTime
                        shimmerHornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $shimmerHornetPruningCooldownTime --title "Hornet-Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningCooldownTime=${shimmerHornetPruningCooldownTime//[!0-9]/}
                            if [ $shimmerHornetPruningCooldownTime -gt 0 ] && [ $shimmerHornetPruningCooldownTime -lt 60 ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetPruningCooldownTime
                                fi
                                sudo sed -i 's/^shimmerHornetPruningCooldownTime=.*/shimmerHornetPruningCooldownTime='$shimmerHornetPruningCooldownTime'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Pruning" --msgbox "Pruning cooldown time set to ${shimmerHornetPruningCooldownTime} minutes!" 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        shimmerHornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $shimmerHornetPruningPercentage --title "Hornet-Shimmer - Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetPruningPercentage" ] && [ $shimmerHornetPruningPercentage -eq $shimmerHornetPruningPercentage ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetPruningPercentage
                                fi
                                sudo sed -i 's/^shimmerHornetPruningPercentage=.*/shimmerHornetPruningPercentage='$shimmerHornetPruningPercentage'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Pruning" --msgbox "Pruning percentage set to ${shimmerHornetPruningPercentage}%!" 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            source $swarmConfigs/shimmer-hornet.cfg
            if [ "$shimmerHornetPowEnabled" = "true" ]; then
                shimmerHornetPowEnabledStatus=enabled
            else
                shimmerHornetPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet-Shimmer - PoW" --menu "\nPOW: $shimmerHornetPowEnabledStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    shimmerHornetPowEnabled=true
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetPowEnabled
                        source $shimmerHornetConfigParsers/hornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet-Shimmer - PoW" --msgbox "PoW has been enabled!" 8 65
                ;;
                "2)")
                    shimmerHornetPowEnabled=false
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetPowEnabled
                        source $shimmerHornetConfigParsers/hornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet-Shimmer - PoW" --msgbox "PoW has been disabeld!!" 8 65
                ;;
            esac
        ;;
        "6)")
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetSnapshotInterval=$shimmerHornetSnapshotInterval
            shimmerHornetSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $shimmerHornetSnapshotInterval --title "Hornet-Shimmer - Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerHornetSnapshotInterval" ] && [ $shimmerHornetSnapshotInterval -eq $shimmerHornetSnapshotInterval ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetSnapshotInterval
                    fi
                    if [ "$currentShimmerHornetSnapshotInterval" != "$shimmerHornetSnapshotInterval" ]; then
                        sudo sed -i 's/^shimmerHornetSnapshotInterval=.*/shimmerHornetSnapshotInterval='$shimmerHornetSnapshotInterval'/' $swarmConfigs/shimmer-hornet.cfg
                        whiptail --title "Hornet-Shimmer - Snapshots" --msgbox "Snapshot interval changed to $shimmerHornetSnapshotInterval milestones!" 8 65
                    else
                        whiptail --title "Hornet-Shimmer - Snapshots" --msgbox "No new snapshot interval detected!" 8 65
                    fi
                fi
            fi
        ;;
        "7)")
            useShimmerHornetEnablePlugins=true
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetEnablePlugins=$shimmerHornetEnablePlugins
            source $shimmerHornetModules/hornetPlugins
            shimmerHornetEnablePlugins=$(whiptail --title "Hornet-Shimmer - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be activated:" 20 78 5 \
                "INX" "plugin to run sub-plugins" $shimmerHornetPluginInx \
                "Autopeering" "plugin for automatic peering" $shimmerHornetPluginAutopeering \
                "Participation" "plugin for voting/staking" $shimmerHornetPluginParticipation \
                "MQTT" "plugin to stream messages" $shimmerHornetPluginMqtt \
                "Prometheus" "plugin is used for metrics e.g. in Grafana" $shimmerHornetPluginPrometheus 3>&1 1>&2 2>&3)
            exitStatus=$?
            shimmerHornetEnablePlugins=$(echo $shimmerHornetEnablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$shimmerHornetEnablePlugins" ] || [[ $shimmerHornetEnablePlugins = *autopeering* ]] || [[ $shimmerHornetEnablePlugins = *inx* ]] || [[ $shimmerHornetEnablePlugins = *participation* ]] || [[ $shimmerHornetEnablePlugins = *mqtt* ]] || [[ $shimmerHornetEnablePlugins = *prometheus* ]]; then
                if [ "$shimmerHornetEnablePlugins" != "$currentShimmerHornetEnablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetEnablePlugins
                    fi
                    sudo sed -i 's/^shimmerHornetEnablePlugins=.*/shimmerHornetEnablePlugins="'$shimmerHornetEnablePlugins'"/' $swarmConfigs/shimmer-hornet.cfg
                    if [ ! -z "$shimmerHornetEnablePlugins" ]; then
                        whiptail --title "Hornet-Shimmer - Plugins" --msgbox "The following plugins are enabled:\n$shimmerHornetEnablePlugins" 14 65
                    else
                        whiptail --title "Hornet-Shimmer - Plugins" --msgbox "There are no plugins enabled for Hornet!" 8 65
                    fi
                fi
                unset shimmerHornetEnablePlugins
            fi
            unset useShimmerHornetEnablePlugins
        ;;
        "8)")
            useShimmerHornetDisablePlugins=true
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetDisablePlugins=$shimmerHornetDisablePlugins
            source $shimmerHornetModules/hornetPlugins
            shimmerHornetDisablePlugins=$(whiptail --title "Hornet-Shimmer - Plugins" --checklist "\nSelect (with spacebar) the Hornet plugins to be deactivated:" 10 78 1 \
                "Warpsync" "plugin to sync more faster" $shimmerHornetPluginWarpsync 3>&1 1>&2 2>&3)
            exitStatus=$?
            shimmerHornetDisablePlugins=$(echo $shimmerHornetDisablePlugins | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
            if [ -z "$shimmerHornetDisablePlugins" ] || [[ $shimmerHornetDisablePlugins = *warpsync* ]]; then
                if [ "$shimmerHornetDisablePlugins" != "$currentShimmerHornetDisablePlugins" ] && [ "$exitStatus" != "1" ]; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetDisablePlugins
                    fi
                    sudo sed -i 's/^shimmerHornetDisablePlugins=.*/shimmerHornetDisablePlugins="'$shimmerHornetDisablePlugins'"/' $swarmConfigs/shimmer-hornet.cfg
                    if [ ! -z "$shimmerHornetDisablePlugins" ]; then
                        whiptail --title "Hornet-Shimmer - Plugins" --msgbox "The following plugins are disabled:\n$shimmerHornetDisablePlugins" 14 65
                    else
                        whiptail --title "Hornet-Shimmer - Plugins" --msgbox "There are no plugins disabled for Hornet!" 8 65
                    fi
                fi
            else
                unset shimmerHornetDisablePlugins
            fi
            unset useShimmerHornetDisablePlugins
        ;;
        "9)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                shimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet-Shimmer - Identity" --menu "\nChoose an option" 18 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetIdentity=$shimmerHornetIdentity
                        shimmerHornetIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet-Shimmer - Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$shimmerHornetIdentity" != "$currentShimmerHornetIdentity" ] && [ ! -z "$shimmerHornetIdentity" ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/hornetIdentity
                                fi
                                sudo sed -i 's~^shimmerHornetIdentity=.*~shimmerHornetIdentity="'$shimmerHornetIdentity'"~' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet-Shimmer - Identity" --msgbox "The following Identity key was set: \n$shimmerHornetIdentity!" 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet-Shimmer - Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                                unset shimmerHornetIdentity
                                sudo rm -rf $shimmerHornetHome/$shimmerHornetNetwork/p2pstore/identity.key 2>/dev/null
                                source $shimmerHornetConfigParsers/hornetIdentity
                                whiptail --title "Hornet-Shimmer - Identity" --msgbox "The following p2pIdentity key was set: \n$shimmerHornetIdentity" 12 65
                                source $swarmConfigs/shimmer-hornet.cfg
                            fi
                        else
                            whiptail --title "Hornet-Shimmer - Identity" --msgbox "Please install Hornet (Shimmer) first." 12 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "10)")
            source $swarmConfigs/shimmer-hornet.cfg
            if [ "$shimmerHornetAutoRevalidation" = "true" ]; then
                shimmerHornetAutoRevalidationStatus=enabled
            else
                shimmerHornetAutoRevalidationStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet-Shimmer - DB Revalidation" --menu "\nDatabase Revalidation: $shimmerHornetAutoRevalidationStatus\n\nChoose an option" 16 65 0 \
                "1)" "Enable DB revalidation" \
                "2)" "Disable DB revalidation" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    shimmerHornetAutoRevalidation=true
                    sudo sed -i 's/^shimmerHornetAutoRevalidation=.*/shimmerHornetAutoRevalidation=true/' $swarmConfigs/shimmer-hornet.cfg
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetAutoRevalidation
                    fi
                    whiptail --title "Hornet-Shimmer - DB Revalidation" --msgbox "Hornet DB Revalidation enabled!" 8 65
                ;;
                "2)")
                    shimmerHornetAutoRevalidation=false
                    sudo sed -i 's/^shimmerHornetAutoRevalidation=.*/shimmerHornetAutoRevalidation=false/' $swarmConfigs/shimmer-hornet.cfg
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetAutoRevalidation
                    fi
                    whiptail --title "Hornet-Shimmer - DB Revalidation" --msgbox "Hornet DB Revalidation disabled!" 8 65
                ;;
            esac
        ;;
        "11)")
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetGossipPort=$shimmerHornetGossipPort
            shimmerHornetGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $shimmerHornetGossipPort --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerHornetGossipPort" ] && [ "$currentShimmerHornetGossipPort" != "$shimmerHornetGossipPort" ] && [ $shimmerHornetGossipPort -eq $shimmerHornetGossipPort ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete allow $currentShimmerHornetGossipPort/tcp > /dev/null 2>&1
                            sudo ufw allow $shimmerHornetGossipPort/tcp > /dev/null 2>&1
                        fi
                        source $shimmerHornetConfigParsers/hornetGossipPort
                    fi
                    sudo sed -i 's/^shimmerHornetGossipPort=.*/shimmerHornetGossipPort='$shimmerHornetGossipPort'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet-Shimmer - Gossip" --msgbox "Gossip port set to \"$shimmerHornetGossipPort/tcp\"!" 8 65
                    restartShimmerHornet=true
                fi
            fi
        ;;
        "12)")
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetAutopeeringPort=$shimmerHornetAutopeeringPort
            shimmerHornetAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $shimmerHornetAutopeeringPort --title "Hornet-Shimmer - Autopeering" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerHornetAutopeeringPort" ] && [ "$currentShimmerHornetAutopeeringPort" != "$shimmerHornetAutopeeringPort" ] && [ $shimmerHornetAutopeeringPort -eq $shimmerHornetAutopeeringPort ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        if [ "$ufw" = "true" ]; then
                            sudo ufw delete allow $currentShimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                            sudo ufw allow $shimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                        fi
                        source $shimmerHornetConfigParsers/hornetAutopeeringPort
                    fi
                    sudo sed -i 's/^shimmerHornetAutopeeringPort=.*/shimmerHornetAutopeeringPort='$shimmerHornetAutopeeringPort'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet-Shimmer - Autopeering" --msgbox "Autopeering port set to \"$shimmerHornetAutopeeringPort/udp\"!" 8 65
                fi
            fi
        ;;
        "13)")
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetUnknownPeersLimit=$shimmerHornetUnknownPeersLimit
            shimmerHornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentShimmerHornetUnknownPeersLimit --title "Hornet - Gossip" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ "$currentShimmerHornetUnknownPeersLimit" != "$shimmerHornetUnknownPeersLimit" ] && [ $shimmerHornetUnknownPeersLimit -eq $shimmerHornetUnknownPeersLimit ] && [ ! -z "$shimmerHornetUnknownPeersLimit" ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/hornetGossipUnknownPeersLimit
                    fi
                    sudo sed -i 's/^shimmerHornetUnknownPeersLimit=.*/shimmerHornetUnknownPeersLimit='$shimmerHornetUnknownPeersLimit'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet-Shimmer - Gossip" --msgbox "Maximum of unknown neighbors set to \"$shimmerHornetUnknownPeersLimit\"." 8 65
                fi
            fi
        ;;
        "14)")
            source $shimmerHornetModules/hornetConfigs
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet-Shimmer - Network" --menu "\nCurrent network: $shimmerHornetNetwork\n\nChoose an option" 18 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Comnet (dev)" \
                "3)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet-Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentShimmerHornetNetwork=$shimmerHornetNetwork
                        shimmerHornetNetwork=mainnet
                        sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetNetwork
                        fi
                    fi
                ;;
                "2)")
                    if [ "comnetOnline" = "true" ]; then
                        if (whiptail --title "Hornet-Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to comnet (the old database will be deleted)?" 8 65); then
                            currentShimmerHornetNetwork=$shimmerHornetNetwork
                            shimmerHornetNetwork=comnet
                            sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetModules/hornetNetwork
                            fi
                        fi
                    else
                        whiptail --title "Hornet-Shimmer - Network" --msgbox "The Comnet is currently unavailable, please try again later." 8 65
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet-Shimmer - Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentShimmerHornetNetwork=$shimmerHornetNetwork
                        shimmerHornetNetwork=testnet
                        sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetNetwork
                        fi
                    fi
                ;;
            esac
        ;;
        "15)")
            source $swarmConfigs/shimmer-hornet.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet-Shimmer - Release" --menu "\nSet \"stable\" for official release or \"beta\"/\"alpha\" for releases under development\n\nChoose an option" 16 65 0 \
                "1)" "Stable Release Channel (default)" \
                "2)" "Beta Release Channel" \
                "3)" "Alpha Release Channel" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet-Shimmer - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (Hornet-Shimmer will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=stable
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetReleaseChannel
                            source $shimmerHornetModules/hornetParser
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet-Shimmer - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"beta\" (Hornet-Shimmer will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=beta
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetReleaseChannel
                            source $shimmerHornetModules/hornetParser
                        fi
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet-Shimmer - Release" --yesno --defaultno "Are you sure you want to change the release channel to \"alpha\" (Hornet-Shimmer will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=alpha
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/hornetReleaseChannel
                            source $shimmerHornetModules/hornetParser
                        fi
                    fi
                ;;
            esac
        ;;
    esac
done
sudo chown -R hornet:hornet $shimmerHornetHome/*.json
exitCode=0