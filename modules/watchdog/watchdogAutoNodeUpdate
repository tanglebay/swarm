#!/bin/bash
source $swarmConfigs/latest-versions.cfg

if [ "$timeFrame" = "$watchdogUpdateNumber" ] || [ "$timeFrame" = "$watchdogUpdateNumber2" ]; then
    if [ "$iotaHornetAutoUpdate" = "true" ] && [ -f "/usr/bin/iota-hornet" ]; then
        source $iotaHornetModules/iotaHornetVersion
        currentIotaHornetVersion="$iotaHornetVersion"
        if [ "$(printf '%s\n' "$latestIotaHornetVersion" "$iotaHornetVersion" | sort -V | head -n1)" != "$latestIotaHornetVersion" ] && [ ! -z "$latestIotaHornetVersion" ]; then
            source $iotaHornetModules/iotaHornetInstaller
            source $iotaHornetModules/iotaHornetVersion
            if [ "$currentIotaHornetVersion" != "$iotaHornetVersion" ] || [ "$iotaHornetUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $iotaHornetModules/iotaHornetParser
                if [ "$restartIotaHornet" = "true" ]; then
                    sudo systemctl restart iota-hornet > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestIotaHornetVersion) of Hornet [IOTA] installed. Checksum: $iotaHornetChecksum" >> $swarmLogs/swarm.log
                telegramText="Host: $HOSTNAME%0AApp: Hornet (IOTA)%0A%0AAction: New Version <b>$latestIotaHornetVersion</b> installed.%0A%0AChecksum: $iotaHornetChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentIotaHornetVersion iotaHornetUpdated iotaHornetChecksum
    fi

    if [ "$shimmerHornetAutoUpdate" = "true" ] && [ -f "/usr/bin/shimmer-hornet" ]; then
        source $shimmerHornetModules/shimmerHornetVersion
        if [ "$(printf '%s\n' "$latestShimmerHornetVersion" "$shimmerHornetVersion" | sort -V | head -n1)" != "$latestShimmerHornetVersion" ] && [ ! -z "$latestShimmerHornetVersion" ]; then
            source $shimmerHornetModules/shimmerHornetInstaller
            newShimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
            if [ "$newShimmerHornetVersion" != "$shimmerHornetVersion" ] || [ "$shimmerHornetUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $shimmerHornetModules/shimmerHornetParser
                if [ "$restartShimmerHornet" = "true" ]; then
                    sudo systemctl restart shimmer-hornet > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestShimmerHornetVersion) of Hornet [SHIMMER] installed. Checksum: $shimmerHornetChecksum" >> $swarmLogs/swarm.log
                telegramText="Host: $HOSTNAME%0AApp: Hornet (Shimmer)%0A%0AAction: New Version <b>$latestShimmerHornetVersion</b> installed.%0A%0AChecksum: $shimmerHornetChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentShimmerHornetVersion shimmerHornetUpdated shimmerHornetChecksum
    fi
    
    # GoShimmer AutoUpdater
    if [ "$goshimmerAutoUpdate" = "true" ] && [ -f "/usr/bin/goshimmer" ] && [ ! -f "/tmp/goshimmer.lock" ]; then
        source $goshimmerModules/goshimmerVersion
        currentGoshimmerVersion="$goshimmerVersion"
        if [ "$(printf '%s\n' "$latestGoshimmerVersion" "$goshimmerVersion" | sort -V | head -n1)" != "$latestGoshimmerVersion" ] && [ ! -z "$latestGoshimmerVersion" ]; then
            goshimmerAllowDbDownload=false
            sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb
            source $goshimmerModules/goshimmerInstaller
            source $goshimmerModules/goshimmerVersion
            if [ "$currentGoshimmerVersion" != "$goshimmerVersion" ] || [ "$goshimmerUpdated" = "true" ]; then
                source $goshimmerModules/goshimmerParser
                if [ "$restartGoshimmer" = "true" ]; then
                    sudo systemctl restart goshimmer > /dev/null 2>&1
                    unset restartGoshimmer
                    sleep 5
                fi
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                echo "$restartDate [AUTOUPDATE] New version ($latestGoshimmerVersion) of GoShimmer installed. Checksum: $goshimmerChecksum" >> $swarmLogs/swarm.log
                telegramText="Host: $HOSTNAME%0AApp: GoShimmer%0A%0AAction: New Version <b>$latestGoshimmerVersion</b> installed.%0A%0AChecksum: $goshimmerChecksum"
                source $watchdogModules/watchdogTelegram
                unset goshimmerAllowDbDownload
            fi
        fi
        unset currentGoshimmerVersion goshimmerUpdated goshimmerChecksum
    fi

    # WASP AutoUpdater
    if [ "$waspAutoUpdate" = "true" ] && [ -f "/usr/bin/wasp" ]; then
        source $waspModules/waspVersion
        currentWaspVersion="$waspVersion"
        if [ "$(printf '%s\n' "$latestWaspVersion" "$waspVersion" | sort -V | head -n1)" != "$latestWaspVersion" ] && [ ! -z "$latestWaspVersion" ]; then
            source $waspModules/waspInstaller
            source $waspModules/waspVersion
            if [ "$currentWaspVersion" != "$waspVersion" ] || [ "$waspUpdated" = "true" ]; then
                source $waspModules/waspParser
                if [ "$restartWasp" = "true" ]; then
                    sudo systemctl restart wasp > /dev/null 2>&1
                    unset restartWasp
                    sleep 5
                fi
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                echo "$restartDate [AUTOUPDATE] New version ($latestWaspVersion) of WASP installed. Checksum: $waspChecksum" >> $swarmLogs/swarm.log
                telegramText="Host: $HOSTNAME%0AApp: Wasp%0A%0AAction: New Version <b>$latestWaspVersion</b> installed.%0A%0AChecksum: $waspChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentWaspVersion waspUpdated waspChecksum
    fi
fi
