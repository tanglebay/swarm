#!/bin/bash
source $swarmLogs/githubVersion

if [ "$timeFrame" = "$watchdogUpdateNumber" ] || [ "$timeFrame" = "$watchdogUpdateNumber2" ]; then
    if [ "$hornetAutoUpdate" = "true" ] && [ -f "/usr/bin/hornet" ]; then
        source $hornetModules/hornetVersion
        if [ "$hornetVersion" != "$latestHornetVersion" ]; then
            source $hornetModules/hornetInstaller

            newHornetVersion=$(/usr/bin/hornet -v | awk '{ print $2 }')
            if [ "$hornetVersion" != "$newHornetVersion" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $hornetModules/hornetParser
                sudo systemctl restart hornet
                echo "$restartDate [AUTOUPDATE] New Version ($latestHornetVersion) of Hornet installed and Hornet restarted." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestHornetVersion) of Hornet installed and Hornet restarted."
                source $watchdogModules/watchdogTelegram
            fi
        fi
    fi

    if [ "$hornetShimmerAutoUpdate" = "true" ] && [ -f "/usr/bin/hornet-shimmer" ]; then
        source $hornetShimmerModules/hornetShimmerVersion
        if [ "$hornetShimmerVersion" != "$latestHornetShimmerVersion" ]; then
            source $hornetShimmerModules/hornetShimmerInstaller

            newHornetShimmerVersion=$(/usr/bin/hornet-shimmer -v | awk '{ print $2 }')
            if [ "$hornetShimmerVersion" != "$newHornetShimmerVersion" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $hornetShimmerModules/hornetShimmerParser
                sudo systemctl restart hornet-shimmer
                echo "$restartDate [AUTOUPDATE] New Version ($latestHornetShimmerVersion) of Hornet-Shimmer installed and node restarted." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestHornetShimmerVersion) of Hornet-Shimmer installed and node restarted."
                source $watchdogModules/watchdogTelegram
            fi
        fi
    fi

    # Bee AutoUpdater
    if [ "$beeAutoUpdate" = "true" ] && [ -f "/usr/bin/bee" ]; then
        source $beeModules/beeVersion
        if [ "$beeVersion" != "$latestBeeVersion" ]; then
            source $beeModules/beeInstaller
            source $beeModules/beeParser
            if [ "$restartBee" = "true" ]; then
                sudo systemctl restart bee
                sleep 5
                unset restartBee
            fi
            if [ "$beeUpdated" = "true" ]; then
                source $beeModules/beeVersion
                if [ "$beeAutopeeringEnabled" = "true" ]; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw allow $beeAutopeeringPort/udp > /dev/null 2>&1
                    fi
                else
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $beeAutopeeringPort/udp > /dev/null 2>&1
                    fi
                fi
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                consoleLog="[AUTOUPDATE] New version ($latestBeeVersion) of Bee installed and Bee restarted."
                echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New version ($latestBeeVersion) of Bee installed and Bee restarted."
                source $watchdogModules/watchdogTelegram
                unset beeUpdated
            fi
        fi
    fi

    # Bee-Shimmer AutoUpdater
    if [ "$beeShimmerAutoUpdate" = "true" ] && [ -f "/usr/bin/bee-shimmer" ]; then
        source $beeShimmerModules/beeShimmerVersion
        if [ "$beeShimmerVersion" != "$latestBeeShimmerVersion" ]; then
            source $beeShimmerModules/beeShimmerInstaller
            source $beeShimmerModules/beeShimmerParser
            if [ "$restartBeeShimmer" = "true" ]; then
                sudo systemctl restart bee-shimmer
                sleep 5
                unset restartBeeShimmer
            fi
            if [ "$beeShimmerUpdated" = "true" ]; then
                source $beeShimmerModules/beeShimmerVersion
                if [ "$beeShimmerAutopeeringEnabled" = "true" ]; then
                    if [ "$ufw" = "true" ]; then
                        sudo ufw allow $beeShimmerAutopeeringPort/udp > /dev/null 2>&1
                    fi
                else
                    if [ "$ufw" = "true" ]; then
                        sudo ufw delete allow $beeShimmerAutopeeringPort/udp > /dev/null 2>&1
                    fi
                fi
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                consoleLog="[AUTOUPDATE] New version ($latestBeeShimmerVersion) of Bee-Shimmer installed and Bee-Shimmer restarted."
                echo "$restartDate $consoleLog" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New version ($latestBeeShimmerVersion) of Bee-Shimmer installed and Bee-Shimmer restarted."
                source $watchdogModules/watchdogTelegram
                unset beeUpdated
            fi
        fi
    fi

    # GoShimmer AutoUpdater
    if [ "$goshimmerAutoUpdate" = "true" ] && [ -f "/usr/bin/goshimmer" ] && [ ! -f "/tmp/goshimmer.lock" ]; then
        source $goshimmerModules/goshimmerVersion
        if [ "$goshimmerVersion" != "$latestGoshimmerVersion" ]; then
            goshimmerAllowDbDownload=false
            sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb
            source $goshimmerModules/goshimmerInstaller
            source $goshimmerModules/goshimmerParser
            if [ "$restartGoshimmer" = "true" ]; then
                sudo systemctl restart goshimmer
                unset restartGoshimmer
            fi
            if [ "$goshimmerUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                echo "$restartDate [AUTOUPDATE] New version ($latestGoshimmerVersion) of GoShimmer installed and GoShimmer restarted." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New version ($latestGoshimmerVersion) of GoShimmer installed and GoShimmer restarted."
                source $watchdogModules/watchdogTelegram
                unset goshimmerUpdated
            fi
            unset goshimmerAllowDbDownload
        fi
    fi

    # WASP AutoUpdater
    if [ "$waspAutoUpdate" = "true" ] && [ -f "/usr/bin/wasp" ]; then
        source $waspModules/waspVersion
        if [ "$waspVersion" != "$latestWaspVersion" ]; then
            source $waspModules/waspInstaller
            source $waspModules/waspParser
            if [ "$restartWaso" = "true" ]; then
                sudo systemctl restart wasp
                unset restartWasp
            fi
            if [ "$waspUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                echo "$restartDate [AUTOUPDATE] New version ($latestWaspVersion) of WASP installed and WASP restarted." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New version ($latestWaspVersion) of WASP installed and WASP restarted."
                source $watchdogModules/watchdogTelegram
                unset waspUpdated
            fi
        fi
    fi
fi
