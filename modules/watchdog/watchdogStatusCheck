#!/bin/bash
source $swarmConfigs/watchdog.cfg

# Hornet
if [ -n "$iotaHornetStatusCounter" ]; then
    if [ $iotaHornetStatusCounter -ne $iotaHornetStatusCounter ] 2>/dev/null; then
        iotaHornetStatusCounter=0
        sudo sed -i 's/^iotaHornetStatusCounter=.*/iotaHornetStatusCounter='$iotaHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    iotaHornetStatusCounter=0
    sudo sed -i 's/^iotaHornetStatusCounter=.*/iotaHornetStatusCounter='$iotaHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# Shimmer-Hornet
if [ -n "$shimmerHornetStatusCounter" ]; then
    if [ $shimmerHornetStatusCounter -ne $shimmerHornetStatusCounter ] 2>/dev/null; then
        shimmerHornetStatusCounter=0
        sudo sed -i 's/^shimmerHornetStatusCounter=.*/shimmerHornetStatusCounter='$shimmerHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    shimmerHornetStatusCounter=0
    sudo sed -i 's/^shimmerHornetStatusCounter=.*/shimmerHornetStatusCounter='$shimmerHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# GoShimmer
if [ -n "$goshimmerStatusCounter" ]; then
    if [ $goshimmerStatusCounter -ne $goshimmerStatusCounter ] 2>/dev/null; then
        goshimmerStatusCounter=0
        sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    goshimmerStatusCounter=0
    sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# Wasp
if [ -n "$waspStatusCounter" ]; then
    if [ $waspStatusCounter -ne $waspStatusCounter ] 2>/dev/null; then
        waspStatusCounter=0
        sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    waspStatusCounter=0
    sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# INX-Dashboard
if [ -n "$shimmerInxDashboardStatusCounter" ]; then
    if [ $shimmerInxDashboardStatusCounter -ne $shimmerInxDashboardStatusCounter ] 2>/dev/null; then
        shimmerInxDashboardStatusCounter=0
        sudo sed -i 's/^shimmerInxDashboardStatusCounter=.*/shimmerInxDashboardStatusCounter='$shimmerInxDashboardStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    shimmerInxDashboardStatusCounter=0
    sudo sed -i 's/^shimmerInxDashboardStatusCounter=.*/shimmerInxDashboardStatusCounter='$shimmerInxDashboardStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# INX-Indexer
if [ -n "$shimmerInxIndexerStatusCounter" ]; then
    if [ $shimmerInxIndexerStatusCounter -ne $shimmerInxIndexerStatusCounter ] 2>/dev/null; then
        shimmerInxIndexerStatusCounter=0
        sudo sed -i 's/^shimmerInxIndexerStatusCounter=.*/shimmerInxIndexerStatusCounter='$shimmerInxIndexerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    shimmerInxIndexerStatusCounter=0
    sudo sed -i 's/^shimmerInxIndexerStatusCounter=.*/shimmerInxIndexerStatusCounter='$shimmerInxIndexerStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# INX-Mqtt
if [ -n "$shimmerInxMqttStatusCounter" ]; then
    if [ $shimmerInxMqttStatusCounter -ne $shimmerInxMqttStatusCounter ] 2>/dev/null; then
        shimmerInxMqttStatusCounter=0
        sudo sed -i 's/^shimmerInxMqttStatusCounter=.*/shimmerInxMqttStatusCounter='$shimmerInxMqttStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    shimmerInxMqttStatusCounter=0
    sudo sed -i 's/^shimmerInxMqttStatusCounter=.*/shimmerInxMqttStatusCounter='$shimmerInxMqttStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

# INX-Participation
if [ -n "$shimmerInxParticipationStatusCounter" ]; then
    if [ $shimmerInxParticipationStatusCounter -ne $shimmerInxParticipationStatusCounter ] 2>/dev/null; then
        shimmerInxParticipationStatusCounter=0
        sudo sed -i 's/^shimmerInxParticipationStatusCounter=.*/shimmerInxParticipationStatusCounter='$shimmerInxParticipationStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    shimmerInxParticipationStatusCounter=0
    sudo sed -i 's/^shimmerInxParticipationStatusCounter=.*/shimmerInxParticipationStatusCounter='$shimmerInxParticipationStatusCounter'/' $swarmConfigs/watchdog.cfg
fi

################################################################################################################################################

# Hornet Status Check
if [ "$iotaHornetStatus" != "active" ] && [ -f "/usr/bin/iota-hornet" ] && [ "$iotaHornetServiceStatusCheck" = "true" ]; then
    if [ $iotaHornetStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop iota-hornet 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [[ $iotaHornetPlugins = *participation* ]] && [ $iotaHornetStatusCounter -ge 2 ] 2>/dev/null; then
            sudo rm -rf $iotaHornetHome/${iotaHornetNetwork}db/participation 2>/dev/null
        fi
        if [ $iotaHornetStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$iotaHornetAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL iota-hornet 2>/dev/null
                fi
                sudo rm -rf $iotaHornetHome/${iotaHornetNetwork}db $iotaHornetHome/snapshots/${iotaHornetNetwork}/*.bin
                echo "$restartDate [WACHTDOG] HORNET [IOTA] ${iotaHornetNetwork}DB deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] HORNET [IOTA] ${iotaHornetNetwork}DB deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            iotaHornetStatusCounter=0
        else
            let iotaHornetStatusCounter=$iotaHornetStatusCounter+1
        fi
        sudo systemctl start iota-hornet 2>/dev/null
        echo "$restartDate [WACHTDOG] HORNET [IOTA] node was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] HORNET [IOTA] node was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let iotaHornetStatusCounter=$iotaHornetStatusCounter+1
    fi
    sudo sed -i 's/^iotaHornetStatusCounter=.*/iotaHornetStatusCounter='$iotaHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $iotaHornetStatusCounter -gt 0 ] 2>/dev/null; then
        let iotaHornetStatusCounter=$iotaHornetStatusCounter-1
        sudo sed -i 's/^iotaHornetStatusCounter=.*/iotaHornetStatusCounter='$iotaHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# Shimmer-Hornet Status Check
if [ "$shimmerHornetStatus" != "active" ] && [ -f "/usr/bin/shimmer-hornet" ] && [ "$shimmerHornetServiceStatusCheck" = "true" ]; then
    if [ $shimmerHornetStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-hornet 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerHornetStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$shimmerHornetAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL shimmer-hornet 2>/dev/null
                fi
                sudo rm -rf $shimmerHornetHome/${shimmerHornetNetwork}/database $shimmerHornetHome/${shimmerHornetNetwork}/snapshots/*.bin
                echo "$restartDate [WACHTDOG] HORNET [Shimmer] ${shimmerHornetNetwork}DB deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] HORNET [Shimmer] ${shimmerHornetNetwork}DB deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            shimmerHornetStatusCounter=0
        else
            let shimmerHornetStatusCounter=$shimmerHornetStatusCounter+1
        fi
        sudo systemctl start shimmer-hornet 2>/dev/null
        echo "$restartDate [WACHTDOG] HORNET [Shimmer] node was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] HORNET [Shimmer] node was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerHornetStatusCounter=$shimmerHornetStatusCounter+1
    fi
    sudo sed -i 's/^shimmerHornetStatusCounter=.*/shimmerHornetStatusCounter='$shimmerHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerHornetStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerHornetStatusCounter=$shimmerHornetStatusCounter-1
        sudo sed -i 's/^shimmerHornetStatusCounter=.*/shimmerHornetStatusCounter='$shimmerHornetStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# GoShimmer Status Check
if [ "$goshimmerStatus" != "active" ] && [ -f "/usr/bin/goshimmer" ] && [ ! -f "/tmp/goshimmer.lock" ] && [ "$goshimmerServiceStatusCheck" = "true" ]; then
    if [ $goshimmerStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop goshimmer 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $goshimmerStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$goshimmerAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL goshimmer 2>/dev/null
                fi
                sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb 2>/dev/null
                source $goshimmerModules/goshimmerDbDownload
                echo "$restartDate [WACHTDOG] GOSHIMMER database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] GOSHIMMER database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            goshimmerStatusCounter=0
        else
            let goshimmerStatusCounter=$goshimmerStatusCounter+1
        fi
        sudo systemctl start goshimmer 2>/dev/null
        echo "$restartDate [WACHTDOG] GOSHIMMER node was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] GOSHIMMER node was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let goshimmerStatusCounter=$goshimmerStatusCounter+1
    fi
    sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $goshimmerStatusCounter -gt 0 ] 2>/dev/null; then
        let goshimmerStatusCounter=$goshimmerStatusCounter-1
        sudo sed -i 's/^goshimmerStatusCounter=.*/goshimmerStatusCounter='$goshimmerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# WASP Status Check
if [ "$waspStatus" != "active" ] && [ -f "/usr/bin/wasp" ] && [ "$waspServiceStatusCheck" = "true" ]; then
    if [ $waspStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop wasp 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $waspStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$waspAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL wasp 2>/dev/null
                fi
                sudo rm -rf $waspHome/waspdb
                echo "$restartDate [WACHTDOG] WASP database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] WASP database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            waspStatusCounter=0
        else
            let waspStatusCounter=$waspStatusCounter+1
        fi
        sudo systemctl start wasp 2>/dev/null
        echo "$restartDate [WACHTDOG] WASP node was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] WASP node was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let waspStatusCounter=$waspStatusCounter+1
    fi
    sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $waspStatusCounter -gt 0 ] 2>/dev/null; then
        let waspStatusCounter=$waspStatusCounter-1
        sudo sed -i 's/^waspStatusCounter=.*/waspStatusCounter='$waspStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# INX-Dashboard Status Check
if [ "$shimmerInxDashboardStatus" != "active" ] && [ -f "/usr/bin/shimmer-inx-dashboard" ] && [ "$shimmerInxDashboardServiceStatusCheck" = "true" ]; then
    if [ $shimmerInxDashboardStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-inx-dashboard 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerInxDashboardStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$shimmerInxDashboardAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL shimmer-inx-dashboard 2>/dev/null
                fi
                sudo rm -rf $shimmerInxDashboardHome/database
                echo "$restartDate [WACHTDOG] INX-Dashboard [SHIMMER] database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] INX-Dashboard [SHIMMER] database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            shimmerInxDashboardStatusCounter=0
        else
            let shimmerInxDashboardStatusCounter=$shimmerInxDashboardStatusCounter+1
        fi
        sudo systemctl start shimmer-inx-dashboard 2>/dev/null
        echo "$restartDate [WACHTDOG] INX-Dashboard [SHIMMER] was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] INX-Dashboard [SHIMMER] was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerInxDashboardStatusCounter=$shimmerInxDashboardStatusCounter+1
    fi
    sudo sed -i 's/^shimmerInxDashboardStatusCounter=.*/shimmerInxDashboardStatusCounter='$shimmerInxDashboardStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerInxIndexerStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerInxIndexerStatusCounter=$shimmerInxIndexerStatusCounter-1
        sudo sed -i 's/^shimmerInxIndexerStatusCounter=.*/shimmerInxIndexerStatusCounter='$shimmerInxIndexerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# INX-Indexer Status Check
if [ "$shimmerInxIndexerStatus" != "active" ] && [ -f "/usr/bin/shimmer-inx-indexer" ] && [ "$shimmerInxIndexerServiceStatusCheck" = "true" ]; then
    if [ $shimmerInxIndexerStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-inx-indexer 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerInxIndexerStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$shimmerInxIndexerAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL shimmer-inx-indexer 2>/dev/null
                fi
                sudo rm -rf $shimmerInxIndexerHome/database
                echo "$restartDate [WACHTDOG] INX-Indexer [SHIMMER] database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] INX-Indexer [SHIMMER] database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            shimmerInxIndexerStatusCounter=0
        else
            let shimmerInxIndexerStatusCounter=$shimmerInxIndexerStatusCounter+1
        fi
        sudo systemctl start shimmer-inx-indexer 2>/dev/null
        echo "$restartDate [WACHTDOG] INX-Indexer [SHIMMER] was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] INX-Indexer [SHIMMER] was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerInxIndexerStatusCounter=$shimmerInxIndexerStatusCounter+1
    fi
    sudo sed -i 's/^shimmerInxIndexerStatusCounter=.*/shimmerInxIndexerStatusCounter='$shimmerInxIndexerStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerInxIndexerStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerInxIndexerStatusCounter=$shimmerInxIndexerStatusCounter-1
        sudo sed -i 's/^shimmerInxIndexerStatusCounter=.*/shimmerInxIndexerStatusCounter='$shimmerInxIndexerStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# INX-Mqtt Status Check
if [ "$shimmerInxMqttStatus" != "active" ] && [ -f "/usr/bin/shimmer-inx-mqtt" ] && [ "$shimmerInxMqttServiceStatusCheck" = "true" ]; then
    if [ $shimmerInxMqttStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-inx-mqtt 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerInxMqttStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$shimmerInxMqttAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL shimmer-inx-mqtt 2>/dev/null
                fi
                sudo rm -rf $shimmerInxMqttHome/database
                echo "$restartDate [WACHTDOG] INX-MQTT [SHIMMER] database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] INX-MQTT [SHIMMER] database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            shimmerInxMqttStatusCounter=0
        else
            let shimmerInxMqttStatusCounter=$shimmerInxMqttStatusCounter+1
        fi
        sudo systemctl start shimmer-inx-mqtt 2>/dev/null
        echo "$restartDate [WACHTDOG] INX-MQTT [SHIMMER] was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] INX-MQTT [SHIMMER] was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerInxMqttStatusCounter=$shimmerInxMqttStatusCounter+1
    fi
    sudo sed -i 's/^shimmerInxMqttStatusCounter=.*/shimmerInxMqttStatusCounter='$shimmerInxMqttStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerInxMqttStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerInxMqttStatusCounter=$shimmerInxMqttStatusCounter-1
        sudo sed -i 's/^shimmerInxMqttStatusCounter=.*/shimmerInxMqttStatusCounter='$shimmerInxMqttStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# INX-Participation Status Check
if [ "$shimmerInxParticipationStatus" != "active" ] && [ -f "/usr/bin/shimmer-inx-participation" ] && [ "$shimmerInxParticipationServiceStatusCheck" = "true" ]; then
    if [ $shimmerInxParticipationStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-inx-participation 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerInxParticipationStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$shimmerInxParticipationAllowDbReset" = "true" ]; then
                if [ "$killall" = "true" ]; then
                    sudo killall -s SIGKILL shimmer-inx-participation 2>/dev/null
                fi
                sudo rm -rf $shimmerInxParticipationHome/database
                echo "$restartDate [WACHTDOG] INX-Participation [SHIMMER] database deleted because the maximum number of attempted restarts was reached." >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] INX-Participation [SHIMMER] database deleted because the maximum number of attempted restarts was reached."
                source $watchdogModules/watchdogTelegram
            fi
            shimmerInxParticipationStatusCounter=0
        else
            let shimmerInxParticipationStatusCounter=$shimmerInxParticipationStatusCounter+1
        fi
        sudo systemctl start shimmer-inx-participation 2>/dev/null
        echo "$restartDate [WACHTDOG] INX-Participation [SHIMMER] was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] INX-Participation [SHIMMER] was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerInxParticipationStatusCounter=$shimmerInxParticipationStatusCounter+1
    fi
    sudo sed -i 's/^shimmerInxParticipationStatusCounter=.*/shimmerInxParticipationStatusCounter='$shimmerInxParticipationStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerInxParticipationStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerInxParticipationStatusCounter=$shimmerInxParticipationStatusCounter-1
        sudo sed -i 's/^shimmerInxParticipationStatusCounter=.*/shimmerInxParticipationStatusCounter='$shimmerInxParticipationStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi

# INX-POI Status Check
if [ "$shimmerInxPoiStatus" != "active" ] && [ -f "/usr/bin/shimmer-inx-poi" ] && [ "$shimmerInxPoiServiceStatusCheck" = "true" ]; then
    if [ $shimmerInxPoiStatusCounter -ge 1 ] 2>/dev/null; then
        sudo systemctl stop shimmer-inx-poi 2>/dev/null
        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
        if [ $shimmerInxPoiStatusCounter -ge 3 ] 2>/dev/null; then
            if [ "$killall" = "true" ]; then
                sudo killall -s SIGKILL shimmer-inx-poi 2>/dev/null
            fi
            shimmerInxPoiStatusCounter=0
        else
            let shimmerInxPoiStatusCounter=$shimmerInxPoiStatusCounter+1
        fi
        sudo systemctl start shimmer-inx-poi 2>/dev/null
        echo "$restartDate [WACHTDOG] INX-POI [SHIMMER] was restarted because the service is not active." >> $swarmLogs/swarm.log
        telegramText="[$HOSTNAME] INX-POI [SHIMMER] was restarted because the service is not active."
        source $watchdogModules/watchdogTelegram
    else
        let shimmerInxPoiStatusCounter=$shimmerInxPoiStatusCounter+1
    fi
    sudo sed -i 's/^shimmerInxPoiStatusCounter=.*/shimmerInxPoiStatusCounter='$shimmerInxPoiStatusCounter'/' $swarmConfigs/watchdog.cfg
else
    if [ $shimmerInxPoiStatusCounter -gt 0 ] 2>/dev/null; then
        let shimmerInxPoiStatusCounter=$shimmerInxPoiStatusCounter-1
        sudo sed -i 's/^shimmerInxPoiStatusCounter=.*/shimmerInxPoiStatusCounter='$shimmerInxPoiStatusCounter'/' $swarmConfigs/watchdog.cfg
    fi
fi