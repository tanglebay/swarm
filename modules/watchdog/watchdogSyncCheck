#!/bin/bash

source $swarmConfigs/watchdog.cfg

if [ -n "$hornetSyncCounter" ]; then
    if [ $hornetSyncCounter -ne $hornetSyncCounter ] 2>/dev/null; then
        hornetSyncCounter=0
        sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    hornetSyncCounter=0
    sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$hornetShimmerSyncCounter" ]; then
    if [ $hornetShimmerSyncCounter -ne $hornetShimmerSyncCounter ] 2>/dev/null; then
        hornetShimmerSyncCounter=0
        sudo sed -i 's/^hornetShimmerSyncCounter=.*/hornetShimmerSyncCounter='$hornetShimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    hornetShimmerSyncCounter=0
    sudo sed -i 's/^hornetShimmerSyncCounter=.*/hornetShimmerSyncCounter='$hornetShimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$beeSyncCounter" ]; then
    if [ $beeSyncCounter -ne $beeSyncCounter ] 2>/dev/null; then
        beeSyncCounter=0
        sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    beeSyncCounter=0
    sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -n "$goshimmerSyncCounter" ]; then
    if [ $goshimmerSyncCounter -ne $goshimmerSyncCounter ] 2>/dev/null; then
        goshimmerSyncCounter=0
        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
    fi
else
    goshimmerSyncCounter=0
    sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
fi

if [ -f "/usr/bin/hornet" ] && [ "$hornetRunAsEntryNode" = "false" ] && [ "$hornetStatus" = "active" ]; then
    # Hornet Sync Check
    hornetSyncStatus="$(curl --max-time 5 -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetJwtToken}"|jq '.data.isHealthy')"
    if [ -z "$hornetSyncStatus" ]; then
        hornetSyncStatus=false
    fi
    if [ "$hornetCheckSync" = "true" ] && [ "$hornetSyncStatus" = "false" ]; then
        latestHornetLatestMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetJwtToken}"|jq '.data.latestMilestoneIndex')"
        latestHornetConfirmedMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetJwtToken}"|jq '.data.confirmedMilestoneIndex')"
        if [ -z "$latestHornetLatestMilestoneIndex" ] && [ -z "$latestHornetConfirmedMilestoneIndex" ]; then
            hornetMilestoneDifferenceIndex=9999999999
            latestHornetConfirmedMilestoneIndex=0
            hornetConfirmedMilestoneIndex=0
            if [ "$killall" = "true" ]; then
                sudo killall -s SIGKILL hornet
            fi
        else
            let hornetMilestoneDifferenceIndex=$latestHornetLatestMilestoneIndex-$latestHornetConfirmedMilestoneIndex
        fi
        if [ $hornetMilestoneDifferenceIndex -gt $hornetMaxMilestones ] && [ $latestHornetConfirmedMilestoneIndex -eq $hornetConfirmedMilestoneIndex ] 2>/dev/null; then
            restartDate=`date '+%d-%m-%Y %H-%M-%S'`
            sudo systemctl stop hornet
            if [ $hornetSyncCounter -gt 5 ]; then
                if [ "$hornetAllowDbReset" = "true" ]; then
                    sudo killall -s SIGKILL hornet
                    sudo rm -rf $hornetHome/${hornetNetwork}db $hornetHome/snapshots/${hornetNetwork}/*.bin
                    echo "$restartDate [WACHTDOG] HORNET ${hornetNetwork}DB was deleted because too many milestones behind." >> $swarmLogs/swarm.log
                    telegramText="[$HOSTNAME] HORNET ${hornetNetwork}DB was deleted because too many milestones behind."
                    source $watchdogModules/watchdogTelegram
                fi
                hornetSyncCounter=0
            else
                let hornetSyncCounter=$hornetSyncCounter+1
            fi
            sudo systemctl start hornet
            echo "$restartDate [WACHTDOG] HORNET node restarted because max milestones difference reached." >> $swarmLogs/swarm.log
            telegramText="[$HOSTNAME] HORNET node restarted because max milestones difference reached."
            source $watchdogModules/watchdogTelegram
            sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $swarmConfigs/watchdog.cfg
        else
            sudo sed -i 's/^hornetConfirmedMilestoneIndex=.*/hornetConfirmedMilestoneIndex='$latestHornetConfirmedMilestoneIndex'/' $swarmConfigs/watchdog.cfg
        fi
    else
        if [ "$hornetSyncCounter" -gt "0" ]; then
            let hornetSyncCounter=$hornetSyncCounter-1
            sudo sed -i 's/^hornetSyncCounter=.*/hornetSyncCounter='$hornetSyncCounter'/' $swarmConfigs/watchdog.cfg
        fi
    fi
fi

if [ -f "/usr/bin/hornet-shimmer" ] && [ "$hornetShimmerRunAsEntryNode" = "false" ] && [ "$hornetShimmerStatus" = "active" ]; then
    # Hornet Sync Check
    hornetShimmerSyncStatus="$(curl --max-time 5 -s -X GET "http://localhost:14267/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetShimmerJwtToken}"|jq '.data.isHealthy')"
    if [ -z "$hornetShimmerSyncStatus" ]; then
        hornetShimmerSyncStatus=false
    fi
    if [ "$hornetShimmerCheckSync" = "true" ] && [ "$hornetShimmerSyncStatus" = "false" ]; then
        latestHornetShimmerLatestMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14267/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetShimmerJwtToken}"|jq '.data.latestMilestoneIndex')"
        latestHornetShimmerConfirmedMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14267/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetShimmerJwtToken}"|jq '.data.confirmedMilestoneIndex')"
        if [ -z "$latestHornetShimmerLatestMilestoneIndex" ] && [ -z "$latestHornetShimmerConfirmedMilestoneIndex" ]; then
            hornetShimmerMilestoneDifferenceIndex=9999999999
            latestHornetShimmerConfirmedMilestoneIndex=0
            hornetShimmerConfirmedMilestoneIndex=0
            if [ "$killall" = "true" ]; then
                sudo killall -s SIGKILL hornet-shimmer
            else
                sudo systemctl stop hornet-shimmer
            fi
        else
            let hornetShimmerMilestoneDifferenceIndex=$latestHornetShimmerLatestMilestoneIndex-$latestHornetShimmerConfirmedMilestoneIndex
        fi
        if [ $hornetShimmerMilestoneDifferenceIndex -gt $hornetShimmerMaxMilestones ] && [ $latestHornetShimmerConfirmedMilestoneIndex -eq $hornetShimmerConfirmedMilestoneIndex ] 2>/dev/null; then
            restartDate=`date '+%d-%m-%Y %H-%M-%S'`
            sudo systemctl stop hornet-shimmer
            if [ $hornetShimmerSyncCounter -gt 5 ]; then
                if [ "$hornetShimmerAllowDbReset" = "true" ]; then
                    if [ "$killall" = "true" ]; then
                        sudo killall -s SIGKILL hornet-shimmer
                    else
                        sudo systemctl stop hornet-shimmer
                    fi
                    sudo rm -rf $hornetShimmerHome/${hornetShimmerNetwork}db $hornetShimmerHome/snapshots/${hornetShimmerNetwork}/*.bin
                    echo "$restartDate [WACHTDOG] HORNET-Shimmer ${hornetShimmerNetwork}DB was deleted because too many milestones behind." >> $swarmLogs/swarm.log
                    telegramText="[$HOSTNAME] HORNET-Shimmer ${hornetShimmerNetwork}DB was deleted because too many milestones behind."
                    source $watchdogModules/watchdogTelegram
                fi
                hornetShimmerSyncCounter=0
            else
                let hornetShimmerSyncCounter=$hornetShimmerSyncCounter+1
            fi
            sudo systemctl start hornet-shimmer
            echo "$restartDate [WACHTDOG] HORNET-Shimmer node restarted because max milestones difference reached." >> $swarmLogs/swarm.log
            telegramText="[$HOSTNAME] HORNET-Shimmer node restarted because max milestones difference reached."
            source $watchdogModules/watchdogTelegram
            sudo sed -i 's/^hornetShimmerSyncCounter=.*/hornetShimmerSyncCounter='$hornetShimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
        else
            sudo sed -i 's/^hornetShimmerConfirmedMilestoneIndex=.*/hornetShimmerConfirmedMilestoneIndex='$latestHornetShimmerConfirmedMilestoneIndex'/' $swarmConfigs/watchdog.cfg
        fi
    else
        if [ "$hornetShimmerSyncCounter" -gt "0" ]; then
            let hornetShimmerSyncCounter=$hornetShimmerSyncCounter-1
            sudo sed -i 's/^hornetShimmerSyncCounter=.*/hornetShimmerSyncCounter='$hornetShimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
        fi
    fi
fi

if [ -f "/usr/bin/bee" ] && [ "$beeRunAsEntryNode" = "false" ] && [ "$beeStatus" = "active" ]; then
    # Bee Sync Check
    beeSyncStatus="$(curl --max-time 5 -s -X GET "http://localhost:14266/api/v1/info" -H  "accept: application/json"|jq '.data.isHealthy')"
    if [ -z "$beeSyncStatus" ]; then
        beeSyncStatus=false
    fi
    if [ "$beeCheckSync" = "true" ] && [ "$beeSyncStatus" = "false" ]; then
        latestBeeLatestMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14266/api/v1/info" -H  "accept: application/json"|jq '.data.latestMilestoneIndex')"
        latestBeeConfirmedMilestoneIndex="$(curl --max-time 5 -s -X GET "http://localhost:14266/api/v1/info" -H  "accept: application/json"|jq '.data.confirmedMilestoneIndex')"
        if [ -z "$latestBeeLatestMilestoneIndex" ] && [ -z "$latestBeeConfirmedMilestoneIndex" ]; then
            beeMilestoneDifferenceIndex=9999999999
            latestBeeConfirmedMilestoneIndex=0
            beeConfirmedMilestoneIndex=0
            if [ "$killall" = "true" ]; then
                sudo killall -s SIGKILL bee
            fi
        else
            let beeMilestoneDifferenceIndex=$latestBeeLatestMilestoneIndex-$latestBeeConfirmedMilestoneIndex
        fi
        if [ $beeMilestoneDifferenceIndex -gt $beeMaxMilestones ] && [ $latestBeeConfirmedMilestoneIndex -eq $beeConfirmedMilestoneIndex ] 2>/dev/null; then
            restartDate=`date '+%d-%m-%Y %H-%M-%S'`
            sudo systemctl stop bee
            if [ $beeSyncCounter -gt 5 ] 2>/dev/null; then
                if [ "$beeAllowDbReset" = "true" ]; then
                    sudo killall -s SIGKILL bee
                    sudo rm -rf $beeHome/storage/$beeNetwork $beeHome/snapshots/$beeNetwork
                    echo "$restartDate [WACHTDOG] BEE database deleted because too many milestones behind." >> $swarmLogs/swarm.log
                    telegramText="[$HOSTNAME] BEE database deleted because too many milestones behind."
                    source $watchdogModules/watchdogTelegram
                fi
                beeSyncCounter=0
            else
                let beeSyncCounter=$beeSyncCounter+1
            fi
            sudo systemctl start bee
            echo "$restartDate [WACHTDOG] BEE node restarted because max milestones difference reached." >> $swarmLogs/swarm.log
            telegramText="[$HOSTNAME] BEE node restarted because max milestones difference reached."
            source $watchdogModules/watchdogTelegram
            sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $swarmConfigs/watchdog.cfg
        else
            sudo sed -i 's/^beeConfirmedMilestoneIndex=.*/beeConfirmedMilestoneIndex='$latestBeeConfirmedMilestoneIndex'/' $swarmConfigs/watchdog.cfg
        fi
    else
        if [ $beeSyncCounter -gt 0 ] 2>/dev/null; then
            let beeSyncCounter=$beeSyncCounter-1
            sudo sed -i 's/^beeSyncCounter=.*/beeSyncCounter='$beeSyncCounter'/' $swarmConfigs/watchdog.cfg
        fi
    fi
fi

if [ "$timeFrame" = "00" ] || [ "$timeFrame" = "15" ] || [ "$timeFrame" = "30" ] || [ "$timeFrame" = "45" ]; then
    if [ -f "/usr/bin/goshimmer" ] && [ ! -f "/tmp/goshimmer.lock" ] && [ "$goshimmerRunAsEntryNode" = "false" ] && [ "$goshimmerStatus" = "active" ]; then
        # GoShimmer Sync Check
        goshimmerSyncStatus="$(curl --max-time 5 -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq '.tangleTime.synced')"
        if [ -z "$goshimmerSyncStatus" ]; then
            goshimmerSyncStatus=false
        fi
        if [ "$goshimmerCheckSync" = "true" ] && [ "$goshimmerSyncStatus" = "false" ]; then
                getGoshimmerTangleTime=$(curl --max-time 5 -s -X GET "http://localhost:8080/info" -H  "accept: application/json"|jq '.tangleTime.time')
                if [ -z "$getGoshimmerTangleTime" ]; then
                    getGoshimmerTangleTime=0
                    goshimmerTangleTime=0
                    if [ "$killall" = "true" ]; then
                        sudo killall -s SIGKILL goshimmer
                    fi
                fi
                if [ "$getGoshimmerTangleTime" = "$goshimmerTangleTime" ]; then
                    restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                    if [ $goshimmerSyncCounter -gt 4 ] 2>/dev/null; then
                        sudo systemctl stop goshimmer
                        if [ "$goshimmerAllowDbReset" = "true" ]; then
                            sudo killall -s SIGKILL goshimmer
                            sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb
                            source $goshimmerModules/goshimmerDbDownload
                            echo "$restartDate [WACHTDOG] GOSHIMMER database deleted because node was not synced." >> $swarmLogs/swarm.log
                            telegramText="[$HOSTNAME] GOSHIMMER database deleted because node was not synced."
                            source $watchdogModules/watchdogTelegram
                        fi
                        goshimmerSyncCounter=0
                        sudo systemctl start goshimmer
                        echo "$restartDate [WACHTDOG] GOSHIMMER restarted because node was not sync." >> $swarmLogs/swarm.log
                        telegramText="[$HOSTNAME] GOSHIMMER restarted because node was not sync."
                        source $watchdogModules/watchdogTelegram
                    else
                        let goshimmerSyncCounter=$goshimmerSyncCounter+1
                    fi
                else
                    if [ "$goshimmerSyncCounter" -gt "0" ]; then
                        let goshimmerSyncCounter=$goshimmerSyncCounter-1
                        sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
                    fi
                fi
                sudo sed -i 's/^goshimmerTangleTime=.*/goshimmerTangleTime='$getGoshimmerTangleTime'/' $swarmConfigs/watchdog.cfg
                sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
        else
            if [ "$goshimmerSyncCounter" -gt "0" ]; then
                let goshimmerSyncCounter=$goshimmerSyncCounter-1
                sudo sed -i 's/^goshimmerSyncCounter=.*/goshimmerSyncCounter='$goshimmerSyncCounter'/' $swarmConfigs/watchdog.cfg
            fi
        fi
    fi
fi