#!/bin/bash
source $swarmConfigs/latest-versions.cfg

if [ "$timeFrame" = "$watchdogUpdateNumber" ] || [ "$timeFrame" = "$watchdogUpdateNumber2" ]; then
    if [ "$iotaInxDashboardAutoUpdate" = "true" ] && [ -f "/usr/bin/iota-inx-dashboard" ]; then
        source $iotaInxDashboardModules/iotaInxDashboardVersion
        currentIotaInxDashboardVersion="$iotaInxDashboardVersion"
        if [ "$latestIotaInxDashboardVersion" != "$iotaInxDashboardVersion" ]; then
            source $iotaInxDashboardModules/iotaInxDashboardInstaller
            source $iotaInxDashboardModules/iotaInxDashboardVersion
            if [ "$currentIotaInxDashboardVersion" != "$iotaInxDashboardVersion" ] || [ "$iotaInxDashboardUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $iotaInxDashboardModules/iotaInxDashboardParser
                if [ "$restartIotaInxDashboard" = "true" ]; then
                    sudo systemctl restart iota-inxinx-dashboard > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestIotaInxDashboardVersion) of IOTA-INX-Dashboard installed. Checksum: $iotaInxDashboardChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestIotaInxDashboardVersion) of IOTA-INX-Dashboard installed. Checksum: $iotaInxDashboardChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentIotaInxDashboardVersion iotaInxDashboardUpdated iotaInxDashboardChecksum
    fi

    if [ "$iotaInxIndexerAutoUpdate" = "true" ] && [ -f "/usr/bin/iotaInx-indexer" ]; then
        source $iotaInxIndexerModules/iotaInxIndexerVersion
        currentIotaInxIndexerVersion="$iotaInxIndexerVersion"
        if [ "$latestIotaInxIndexerVersion" != "$iotaInxIndexerVersion" ]; then
            source $iotaInxIndexerModules/iotaInxIndexerInstaller
            source $iotaInxIndexerModules/iotaInxIndexerVersion
            if [ "$currentIotaInxIndexerVersion" != "$iotaInxIndexerVersion" ] || [ "$iotaInxIndexerUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $iotaInxIndexerModules/iotaInxIndexerParser
                if [ "$restartIotaInxIndexer" = "true" ]; then
                    sudo systemctl restart iota-inx-indexer > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestIotaInxIndexerVersion) of IOTA-INX-Indexer installed. Checksum: $iotaInxIndexerChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestIotaInxIndexerVersion) of IOTA-INX-Indexer installed. Checksum: $iotaInxIndexerChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentIotaInxIndexerVersion iotaInxIndexerUpdated iotaInxIndexerChecksum
    fi

    if [ "$iotaInxMqttAutoUpdate" = "true" ] && [ -f "/usr/bin/iota-inx-mqtt" ]; then
        source $iotaInxMqttModules/iotaInxMqttVersion
        currentIotaInxMqttVersion="$iotaInxMqttVersion"
        if [ "$latestIotaInxMqttVersion" != "$iotaInxMqttVersion" ]; then
            source $iotaInxMqttModules/iotaInxMqttInstaller
            source $iotaInxMqttModules/iotaInxMqttVersion
            if [ "$currentIotaInxMqttVersion" != "$iotaInxMqttVersion" ] || [ "$iotaInxMqttUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $iotaInxMqttModules/iotaInxMqttParser
                if [ "$restartIotaInxMqtt" = "true" ]; then
                    sudo systemctl restart iota-inx-mqtt > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestIotaInxMqttVersion) of IOTA-INX-MQTT installed. Checksum: $iotaInxMqttChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestIotaInxMqttVersion) of IOTA-INX-MQTT installed. Checksum: $iotaInxMqttChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentIotaInxMqttVersion iotaInxMqttUpdated iotaInxMqttChecksum
    fi

    if [ "$iotaInxParticipationAutoUpdate" = "true" ] && [ -f "/usr/bin/iota-Inx-participation" ]; then
        source $iotaInxParticipationModules/iotaInxParticipationVersion
        currentIotaInxParticipationVersion="$iotaInxParticipationVersion"
        if [ "$latestIotaInxParticipationVersion" != "$iotaInxParticipationVersion" ]; then
            source $iotaInxParticipationModules/iotaInxParticipationInstaller
            source $iotaInxParticipationModules/iotaInxParticipationVersion
            if [ "$currentIotaInxParticipationVersion" != "$iotaInxParticipationVersion" ] || [ "$iotaInxParticipationUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $iotaInxParticipationModules/iotaInxParticipationParser
                if [ "$restartIotaInxParticipation" = "true" ]; then
                    sudo systemctl restart iota-inx-participation > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestIotaInxParticipationVersion) of IOTA-INX-Participation installed. Checksum: $iotaInxParticipationChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestIotaInxParticipationVersion) of IOTA-INX-Participation installed. Checksum: $iotaInxParticipationChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentIotaInxParticipationVersion iotaInxParticipationUpdated iotaInxParticipationChecksum
    fi

#####################################################################################################################################################################################################

    if [ "$shimmerInxDashboardAutoUpdate" = "true" ] && [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
        source $shimmerInxDashboardModules/shimmerInxDashboardVersion
        currentshimmerInxDashboardVersion="$shimmerInxDashboardVersion"
        if [ "$latestShimmerInxDashboardVersion" != "$shimmerInxDashboardVersion" ]; then
            source $shimmerInxDashboardModules/shimmerInxDashboardInstaller
            source $shimmerInxDashboardModules/shimmerInxDashboardVersion
            if [ "$currentshimmerInxDashboardVersion" != "$shimmerInxDashboardVersion" ] || [ "$shimmerInxDashboardUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $shimmerInxDashboardModules/shimmerInxDashboardParser
                if [ "$restartshimmerInxDashboard" = "true" ]; then
                    sudo systemctl restart shimmer-inx-dashboard > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestShimmerInxDashboardVersion) of Shimmer-INX-Dashboard installed. Checksum: $shimmerInxDashboardChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestShimmerInxDashboardVersion) of Shimmer-INX-Dashboard installed. Checksum: $shimmerInxDashboardChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentshimmerInxDashboardVersion shimmerInxDashboardUpdated shimmerInxDashboardChecksum
    fi

    if [ "$shimmerInxIndexerAutoUpdate" = "true" ] && [ -f "/usr/bin/shimmer-inx-indexer" ]; then
        source $shimmerInxIndexerModules/shimmerInxIndexerVersion
        currentshimmerInxIndexerVersion="$shimmerInxIndexerVersion"
        if [ "$latestShimmerInxIndexerVersion" != "$shimmerInxIndexerVersion" ]; then
            source $shimmerInxIndexerModules/shimmerInxIndexerInstaller
            source $shimmerInxIndexerModules/shimmerInxIndexerVersion
            if [ "$currentshimmerInxIndexerVersion" != "$shimmerInxIndexerVersion" ] || [ "$shimmerInxIndexerUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $shimmerInxIndexerModules/shimmerInxIndexerParser
                if [ "$restartshimmerInxIndexer" = "true" ]; then
                    sudo systemctl restart shimmer-inx-indexer > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestShimmerInxIndexerVersion) of Shimmer-INX-Indexer installed. Checksum: $shimmerInxIndexerChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestShimmerInxIndexerVersion) of Shimmer-INX-Indexer installed. Checksum: $shimmerInxIndexerChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentshimmerInxIndexerVersion shimmerInxIndexerUpdated shimmerInxIndexerChecksum
    fi

    if [ "$shimmerInxMqttAutoUpdate" = "true" ] && [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
        source $shimmerInxMqttModules/shimmerInxMqttVersion
        currentshimmerInxMqttVersion="$shimmerInxMqttVersion"
        if [ "$latestShimmerInxMqttVersion" != "$shimmerInxMqttVersion" ]; then
            source $shimmerInxMqttModules/shimmerInxMqttInstaller
            source $shimmerInxMqttModules/shimmerInxMqttVersion
            if [ "$currentshimmerInxMqttVersion" != "$shimmerInxMqttVersion" ] || [ "$shimmerInxMqttUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $shimmerInxMqttModules/shimmerInxMqttParser
                if [ "$restartshimmerInxMqtt" = "true" ]; then
                    sudo systemctl restart shimmer-inx-mqtt > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestShimmerInxMqttVersion) of Shimmer-INX-MQTT installed. Checksum: $shimmerInxMqttChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestShimmerInxMqttVersion) of Shimmer-INX-MQTT installed. Checksum: $shimmerInxMqttChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentshimmerInxMqttVersion shimmerInxMqttUpdated shimmerInxMqttChecksum
    fi

    if [ "$shimmerInxParticipationAutoUpdate" = "true" ] && [ -f "/usr/bin/shimmer-Inx-participation" ]; then
        source $shimmerInxParticipationModules/shimmerInxParticipationVersion
        currentshimmerInxParticipationVersion="$shimmerInxParticipationVersion"
        if [ "$latestShimmerInxParticipationVersion" != "$shimmerInxParticipationVersion" ]; then
            source $shimmerInxParticipationModules/shimmerInxParticipationInstaller
            source $shimmerInxParticipationModules/shimmerInxParticipationVersion
            if [ "$currentshimmerInxParticipationVersion" != "$shimmerInxParticipationVersion" ] || [ "$shimmerInxParticipationUpdated" = "true" ]; then
                restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                # CALL MODULE CONFIGPARSER
                source $shimmerInxParticipationModules/shimmerInxParticipationParser
                if [ "$restartshimmerInxParticipation" = "true" ]; then
                    sudo systemctl restart shimmer-inx-participation > /dev/null 2>&1
                    sleep 5
                fi
                echo "$restartDate [AUTOUPDATE] New Version ($latestShimmerInxParticipationVersion) of Shimmer-INX-Participation installed. Checksum: $shimmerInxParticipationChecksum" >> $swarmLogs/swarm.log
                telegramText="[$HOSTNAME] New Version ($latestShimmerInxParticipationVersion) of Shimmer-INX-Participation installed. Checksum: $shimmerInxParticipationChecksum"
                source $watchdogModules/watchdogTelegram
            fi
        fi
        unset currentshimmerInxParticipationVersion shimmerInxParticipationUpdated shimmerInxParticipationChecksum
    fi

fi
