#!/bin/bash
source $swarmConfigs/latest-versions.cfg

# SET TIME
timeFrame=`date '+%M'`

# GET LATEST VERSIONS
if [ "$timeFrame" = "07" ] || [ "$timeFrame" = "22" ] || [ "$timeFrame" = "37" ] || [ "$timeFrame" = "52" ]; then
    # Latest SWARM version
    latestSwarmVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/TangleBay/swarm-releases/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    latestSwarmVersion=$(echo $latestSwarmVersion | tr -d 'v')
    sudo sed -i 's~^latestSwarmVersion=.*~latestSwarmVersion="'$latestSwarmVersion'"~' $swarmConfigs/latest-versions.cfg
fi

if [ "$timeFrame" = "15" ]; then
    if [ -f "/usr/bin/hornet" ]; then
        # Latest Hornet version
        if [ "$hornetRelease" = "stable" ]; then
            latestHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestHornetVersion=$(echo $latestHornetVersion | tr -d 'v')
        fi
        if [ "$hornetRelease" = "beta" ]; then
            latestHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestHornetVersion=$(echo $latestHornetVersion | tr -d 'v')
        fi
        if [ "$hornetRelease" = "alpha" ]; then
            latestHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetReleaseVersion | head -n 1)
            latestHornetVersion=$(echo $latestHornetVersion | tr -d 'v')
        fi
        if [ "$latestHornetVersion" = "\"\"" ] || [ -z "$latestHornetVersion" ] || [ "$latestHornetVersion" = "null" ]; then
            if [ -f "/usr/bin/hornet" ]; then
                latestHornetVersion=$(/usr/bin/hornet -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestHornetVersion=.*~latestHornetVersion="'$latestHornetVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/hornet-shimmer" ]; then
        # Latest Hornet-Shimmer version
        if [ "$hornetShimmerRelease" = "stable" ]; then
            latestHornetShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetShimmerReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestHornetShimmerVersion=$(echo $latestHornetShimmerVersion | tr -d 'v')
        fi
        if [ "$hornetShimmerRelease" = "beta" ]; then
            latestHornetShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetShimmerReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestHornetShimmerVersion=$(echo $latestHornetShimmerVersion | tr -d 'v')
        fi
        if [ "$hornetShimmerRelease" = "alpha" ]; then
            latestHornetShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $hornetShimmerReleaseVersion | head -n 1)
            latestHornetShimmerVersion=$(echo $latestHornetShimmerVersion | tr -d 'v')
        fi
        if [ "$latestHornetShimmerVersion" = "\"\"" ] || [ -z "$latestHornetShimmerVersion" ] || [ "$latestHornetShimmerVersion" = "null" ]; then
            if [ -f "/usr/bin/hornet-shimmer" ]; then
                latestHornetShimmerVersion=$(/usr/bin/hornet-shimmer -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestHornetShimmerVersion=.*~latestHornetShimmerVersion="'$latestHornetShimmerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi

if [ "$timeFrame" = "30" ]; then
    if [ -f "/usr/bin/bee" ]; then
        # Latest Bee version
        if [ "$beeRelease" = "stable" ]; then
            latestBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestBeeVersion=$(echo $latestBeeVersion | tr -d 'v')
        fi
        if [ "$beeRelease" = "beta" ]; then
            latestBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestBeeVersion=$(echo $latestBeeVersion | tr -d 'v')
        fi
        if [ "$beeRelease" = "alpha" ]; then
            latestBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeReleaseVersion | head -n 1)
            latestBeeVersion=$(echo $latestBeeVersion | tr -d 'v')
        fi
        if [ "$latestBeeVersion" = "\"\"" ] || [ -z "$latestBeeVersion" ] || [ "$latestBeeVersion" = "null" ]; then
            if [ -f "/usr/bin/bee-shimmer" ]; then
                latestBeeVersion=$(/usr/bin/bee -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestBeeVersion=.*~latestBeeVersion="'$latestBeeVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/bee-shimmer" ]; then
        # Latest Bee-Shimmer version
        if [ "$beeShimmerRelease" = "stable" ]; then
            latestBeeShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeShimmerReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestBeeShimmerVersion=$(echo $latestBeeShimmerVersion | tr -d 'v')
        fi
        if [ "$beeShimmerRelease" = "beta" ]; then
            latestBeeShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeShimmerReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestBeeShimmerVersion=$(echo $latestBeeShimmerVersion | tr -d 'v')
        fi
        if [ "$beeShimmerRelease" = "alpha" ]; then
            latestBeeShimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $beeShimmerReleaseVersion | head -n 1)
            latestBeeShimmerVersion=$(echo $latestBeeShimmerVersion | tr -d 'v')
        fi
        if [ "$latestBeeShimmerVersion" = "\"\"" ] || [ -z "$latestBeeShimmerVersion" ] || [ "$latestBeeShimmerVersion" = "null" ]; then
            if [ -f "/usr/bin/bee-shimmer" ]; then
                latestBeeShimmerVersion=$(/usr/bin/bee-shimmer -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestBeeShimmerVersion=.*~latestBeeShimmerVersion="'$latestBeeShimmerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi


if [ "$timeFrame" = "45" ]; then
    if [ -f "/usr/bin/goshimmer" ]; then
        # Latest GoShimmer version
        latestGoshimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/goshimmer/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
        latestGoshimmerVersion=$(echo $latestGoshimmerVersion | tr -d 'v')
        if [ "$latestGoshimmerVersion" = "\"\"" ] || [ -z "$latestGoshimmerVersion" ] || [ "$latestGoshimmerVersion" = "null" ]; then
            if [ -f "/usr/bin/goshimmer" ]; then
                latestGoshimmerVersion=$(cd $goshimmerHome ; /usr/bin/goshimmer -v | awk '{print $2}' | tr -d 'v')
            fi
        fi
        sudo sed -i 's~^latestGoshimmerVersion=.*~latestGoshimmerVersion="'$latestGoshimmerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/wasp" ]; then
        # Latest WASP version
        latestWaspVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/wasp/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
        latestWaspVersion=$(echo $latestWaspVersion | tr -d 'v')
        if [ "$latestWaspVersion" = "\"\"" ] || [ -z "$latestWaspVersion" ] || [ "$latestWaspVersion" = "null" ]; then
            if [ -f "/usr/bin/wasp" ]; then
                latestWaspVersion=$(cd $waspHome ; /usr/bin/wasp -v | awk '{print $2}' | tr -d 'v')
            fi
        fi
        sudo sed -i 's~^latestWaspVersion=.*~latestWaspVersion="'$latestWaspVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi

if [ "$timeFrame" = "00" ]; then
    if [ -f "/usr/bin/inx-indexer" ]; then
        # Latest INX-Indexer version
        if [ "$inxIndexerRelease" = "stable" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$inxIndexerRelease" = "beta" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$inxIndexerRelease" = "alpha" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$latestInxIndexerVersion" = "\"\"" ] || [ -z "$latestInxIndexerVersion" ] || [ "$latestInxIndexerVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-indexer" ]; then
                latestInxIndexerVersion=$(/usr/bin/inx-indexer -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxIndexerVersion=.*~latestInxIndexerVersion="'$latestInxIndexerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/inx-mqtt" ]; then
        # Latest INX-MQTT version
        if [ "$inxMqttRelease" = "stable" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$inxMqttRelease" = "beta" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$inxMqttRelease" = "alpha" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$latestInxMqttVersion" = "\"\"" ] || [ -z "$latestInxMqttVersion" ] || [ "$latestInxMqttVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-mqtt" ]; then
                latestInxMqttVersion=$(/usr/bin/inx-mqtt -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxMqttVersion=.*~latestInxMqttVersion="'$latestInxMqttVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/inx-participation" ]; then
        # Latest INX-Participation version
        if [ "$inxParticipationRelease" = "stable" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$inxParticipationRelease" = "beta" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$inxParticipationRelease" = "alpha" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$latestInxParticipationVersion" = "\"\"" ] || [ -z "$latestInxParticipationVersion" ] || [ "$latestInxParticipationVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-participation" ]; then
                latestInxParticipationVersion=$(/usr/bin/inx-participation -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxParticipationVersion=.*~latestInxParticipationVersion="'$latestInxParticipationVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi
