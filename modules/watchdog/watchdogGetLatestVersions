#!/bin/bash
source $swarmConfigs/latest-versions.cfg

# SET TIME
timeFrame=`date '+%M'`

# GET LATEST VERSIONS
if [ "$timeFrame" = "07" ] || [ "$timeFrame" = "22" ] || [ "$timeFrame" = "37" ] || [ "$timeFrame" = "52" ]; then
    # Latest SWARM version
    latestSwarmVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/TangleBay/swarm-releases/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
    latestSwarmVersion=$(echo $latestSwarmVersion | tr -d 'v')
    sudo sed -i 's~^latestSwarmVersion=.*~latestSwarmVersion="'$latestSwarmVersion'"~' $swarmConfigs/latest-versions.cfg
fi

if [ "$timeFrame" = "15" ]; then
    if [ -f "/usr/bin/iota-hornet" ]; then
        # Latest Hornet version
        if [ "$iotaHornetRelease" = "stable" ]; then
            latestIotaHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaHornetReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestIotaHornetVersion=$(echo $latestIotaHornetVersion | tr -d 'v')
        fi
        if [ "$iotaHornetRelease" = "beta" ]; then
            latestIotaHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaHornetReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestIotaHornetVersion=$(echo $latestIotaHornetVersion | tr -d 'v')
        fi
        if [ "$iotaHornetRelease" = "alpha" ]; then
            latestIotaHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaHornetReleaseVersion | head -n 1)
            latestIotaHornetVersion=$(echo $latestIotaHornetVersion | tr -d 'v')
        fi
        if [ "$latestIotaHornetVersion" = "\"\"" ] || [ -z "$latestIotaHornetVersion" ] || [ "$latestIotaHornetVersion" = "null" ]; then
            if [ -f "/usr/bin/hornet" ]; then
                latestIotaHornetVersion=$(/usr/bin/iota-hornet -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestIotaHornetVersion=.*~latestIotaHornetVersion="'$latestIotaHornetVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/shimmer-hornet" ]; then
        # Latest Hornet-Shimmer version
        if [ "$shimmerHornetRelease" = "stable" ]; then
            latestShimmerHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerHornetReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestShimmerHornetVersion=$(echo $latestShimmerHornetVersion | tr -d 'v')
        fi
        if [ "$shimmerHornetRelease" = "beta" ]; then
            latestShimmerHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerHornetReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestShimmerHornetVersion=$(echo $latestShimmerHornetVersion | tr -d 'v')
        fi
        if [ "$shimmerHornetRelease" = "alpha" ]; then
            latestShimmerHornetVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/hornet/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerHornetReleaseVersion | head -n 1)
            latestShimmerHornetVersion=$(echo $latestShimmerHornetVersion | tr -d 'v')
        fi
        if [ "$latestShimmerHornetVersion" = "\"\"" ] || [ -z "$latestShimmerHornetVersion" ] || [ "$latestShimmerHornetVersion" = "null" ]; then
            if [ -f "/usr/bin/shimmer-hornet" ]; then
                latestShimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestShimmerHornetVersion=.*~latestShimmerHornetVersion="'$latestShimmerHornetVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi

if [ "$timeFrame" = "30" ]; then
    if [ -f "/usr/bin/iota-bee" ]; then
        # Latest Bee version
        if [ "$iotaBeeRelease" = "stable" ]; then
            latestIotaBeeeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaBeeReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestIotaBeeVersion=$(echo $latestIotaBeeVersion | tr -d 'v')
        fi
        if [ "$iotaBeeeeRelease" = "beta" ]; then
            latestIotaBeeeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaBeeReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestIotaBeeVersion=$(echo $latestIotaBeeVersion | tr -d 'v')
        fi
        if [ "$iotaBeeRelease" = "alpha" ]; then
            latestIotaBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $iotaBeeReleaseVersion | head -n 1)
            latestIotaBeeVersion=$(echo $latestIotaBeeeeVersion | tr -d 'v')
        fi
        if [ "$latestIotaBeeVersion" = "\"\"" ] || [ -z "$latestIotaBeeVersion" ] || [ "$latestIotaBeeVersion" = "null" ]; then
            if [ -f "/usr/bin/iota-bee" ]; then
                latestBeeVersion=$(/usr/bin/iota-bee -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestIotaBeeVersion=.*~latestIotaBeeVersion="'$latestIotaBeeVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/shimmer-bee" ]; then
        # Latest Bee-Shimmer version
        if [ "$shimmerBeeRelease" = "stable" ]; then
            latestShimmerBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerBeeReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestShimmerBeeVersion=$(echo $latestShimmerBeeVersion | tr -d 'v')
        fi
        if [ "$shimmerBeeRelease" = "beta" ]; then
            latestShimmerBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerBeeReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestShimmerBeeVersion=$(echo $latestShimmerBeeVersion | tr -d 'v')
        fi
        if [ "$shimmerBeeRelease" = "alpha" ]; then
            latestShimmerBeeVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/bee/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $shimmerBeeReleaseVersion | head -n 1)
            latestShimmerBeeVersion=$(echo $latestShimmerBeeVersion | tr -d 'v')
        fi
        if [ "$latestShimmerBeeVersion" = "\"\"" ] || [ -z "$latestShimmerBeeVersion" ] || [ "$latestShimmerBeeVersion" = "null" ]; then
            if [ -f "/usr/bin/shimmer-bee" ]; then
                latestShimmerBeeVersion=$(/usr/bin/shimmer-bee -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestShimmerBeeVersion=.*~latestShimmerBeeVersion="'$latestShimmerBeeVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi


if [ "$timeFrame" = "45" ]; then
    if [ -f "/usr/bin/goshimmer" ]; then
        # Latest GoShimmer version
        latestGoshimmerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/goshimmer/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
        latestGoshimmerVersion=$(echo $latestGoshimmerVersion | tr -d 'v')
        if [ "$latestGoshimmerVersion" = "\"\"" ] || [ -z "$latestGoshimmerVersion" ] || [ "$latestGoshimmerVersion" = "null" ]; then
            if [ -f "/usr/bin/goshimmer" ]; then
                latestGoshimmerVersion=$(cd $goshimmerHome ; /usr/bin/goshimmer -v | awk '{print $2}' | tr -d 'v')
            fi
        fi
        sudo sed -i 's~^latestGoshimmerVersion=.*~latestGoshimmerVersion="'$latestGoshimmerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/wasp" ]; then
        # Latest WASP version
        latestWaspVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/wasp/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
        latestWaspVersion=$(echo $latestWaspVersion | tr -d 'v')
        if [ "$latestWaspVersion" = "\"\"" ] || [ -z "$latestWaspVersion" ] || [ "$latestWaspVersion" = "null" ]; then
            if [ -f "/usr/bin/wasp" ]; then
                latestWaspVersion=$(cd $waspHome ; /usr/bin/wasp -v | awk '{print $2}' | tr -d 'v')
            fi
        fi
        sudo sed -i 's~^latestWaspVersion=.*~latestWaspVersion="'$latestWaspVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/inx-dashboard" ]; then
        # Latest INX-Dashboard version
        if [ "$inxDashboardRelease" = "stable" ]; then
            latestInxDashboardVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-dashboard/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxDashboardReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxDashboardVersion=$(echo $latestInxDashboardVersion | tr -d 'v')
        fi
        if [ "$inxDashboardRelease" = "beta" ]; then
            latestInxDashboardVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-dashboard/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxDashboardReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxDashboardVersion=$(echo $latestInxDashboardVersion | tr -d 'v')
        fi
        if [ "$inxDashboardRelease" = "alpha" ]; then
            latestInxDashboardVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-dashboard/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxDashboardReleaseVersion | head -n 1)
            latestInxDashboardVersion=$(echo $latestInxDashboardVersion | tr -d 'v')
        fi
        if [ "$latestInxDashboardVersion" = "\"\"" ] || [ -z "$latestInxDashboardVersion" ] || [ "$latestInxDashboardVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-dashboard" ]; then
                latestInxDashboardVersion=$(/usr/bin/inx-dashboard -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxDashboardVersion=.*~latestInxDashboardVersion="'$latestInxDashboardVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi

if [ "$timeFrame" = "00" ]; then
    if [ -f "/usr/bin/inx-indexer" ]; then
        # Latest INX-Indexer version
        if [ "$inxIndexerRelease" = "stable" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$inxIndexerRelease" = "beta" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$inxIndexerRelease" = "alpha" ]; then
            latestInxIndexerVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-indexer/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxIndexerReleaseVersion | head -n 1)
            latestInxIndexerVersion=$(echo $latestInxIndexerVersion | tr -d 'v')
        fi
        if [ "$latestInxIndexerVersion" = "\"\"" ] || [ -z "$latestInxIndexerVersion" ] || [ "$latestInxIndexerVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-indexer" ]; then
                latestInxIndexerVersion=$(/usr/bin/inx-indexer -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxIndexerVersion=.*~latestInxIndexerVersion="'$latestInxIndexerVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/inx-mqtt" ]; then
        # Latest INX-MQTT version
        if [ "$inxMqttRelease" = "stable" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$inxMqttRelease" = "beta" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$inxMqttRelease" = "alpha" ]; then
            latestInxMqttVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-mqtt/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxMqttReleaseVersion | head -n 1)
            latestInxMqttVersion=$(echo $latestInxMqttVersion | tr -d 'v')
        fi
        if [ "$latestInxMqttVersion" = "\"\"" ] || [ -z "$latestInxMqttVersion" ] || [ "$latestInxMqttVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-mqtt" ]; then
                latestInxMqttVersion=$(/usr/bin/inx-mqtt -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxMqttVersion=.*~latestInxMqttVersion="'$latestInxMqttVersion'"~' $swarmConfigs/latest-versions.cfg
    fi

    if [ -f "/usr/bin/inx-participation" ]; then
        # Latest INX-Participation version
        if [ "$inxParticipationRelease" = "stable" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | awk '!/(-rc|-alpha)/' | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$inxParticipationRelease" = "beta" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | awk '!/-alpha/' | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$inxParticipationRelease" = "alpha" ]; then
            latestInxParticipationVersion=$(curl --max-time 5 -Ls https://api.github.com/repos/iotaledger/inx-participation/releases | grep -oP '"tag_name": "\K(.*)(?=")' | grep $inxParticipationReleaseVersion | head -n 1)
            latestInxParticipationVersion=$(echo $latestInxParticipationVersion | tr -d 'v')
        fi
        if [ "$latestInxParticipationVersion" = "\"\"" ] || [ -z "$latestInxParticipationVersion" ] || [ "$latestInxParticipationVersion" = "null" ]; then
            if [ -f "/usr/bin/inx-participation" ]; then
                latestInxParticipationVersion=$(/usr/bin/inx-participation -v | awk '{ print $2 }')
            fi
        fi
        sudo sed -i 's~^latestInxParticipationVersion=.*~latestInxParticipationVersion="'$latestInxParticipationVersion'"~' $swarmConfigs/latest-versions.cfg
    fi
fi
