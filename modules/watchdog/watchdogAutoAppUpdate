#!/bin/bash
source $swarmConfigs/latest-versions.cfg

if [ "$timeFrame" = "$watchdogUpdateNumber" ] || [ "$timeFrame" = "$watchdogUpdateNumber2" ]; then
    for swarmApp in ${swarmApps[@]}
    do
        if [ -f "/usr/bin/$swarmApp" ]; then
            if [ "$swarmApp" = "iota-hornet" ]; then
                swarmAppName="Hornet (IOTA)"
                swarmAppPrefix="iotaHornet"
            fi
            if [ "$swarmApp" = "shimmer-hornet" ]; then
                swarmAppName="Hornet (Shimmer)"
                swarmAppPrefix="shimmerHornet"
            fi
            if [ "$swarmApp" = "goshimmer" ]; then
                swarmAppName="GoShimmer"
                swarmAppPrefix="goshimmer"
            fi
            if [ "$swarmApp" = "wasp" ]; then
                swarmAppName="Wasp"
                swarmAppPrefix="wasp"
            fi
            if [ "$swarmApp" = "shimmer-inx-dashboard" ]; then
                swarmAppName="INX-Dashboard (Shimmer)"
                swarmAppPrefix="shimmerInxDashboard"
            fi
            if [ "$swarmApp" = "shimmer-inx-indexer" ]; then
                swarmAppName="INX-Indexer (Shimmer)"
                swarmAppPrefix="shimmerInxIndexer"
            fi
            if [ "$swarmApp" = "shimmer-inx-mqtt" ]; then
                swarmAppName="INX-MQTT (Shimmer)"
                swarmAppPrefix="shimmerInxMqtt"
            fi
            if [ "$swarmApp" = "shimmer-inx-participation" ]; then
                swarmAppName="INX-Participation (Shimmer)"
                swarmAppPrefix="shimmerInxParticipation"
            fi
            if [ "$swarmApp" = "shimmer-inx-poi" ]; then
                swarmAppName="INX-POI (Shimmer)"
                swarmAppPrefix="shimmerInxPoi"
            fi

            swarmAppModules=${swarmAppPrefix}Modules
            swarmAppAutoUpdate=${swarmAppPrefix}AutoUpdate

            if [ "${!swarmAppAutoUpdate}" = "true" ] && [ ! -f "/tmp/$swarmApp.lock" ]; then
                source ${!swarmAppModules}/${swarmAppPrefix}Version
                swarmAppVersion=${swarmAppPrefix}Version
                swarmAppLatestVersion=latest${swarmAppPrefix^}Version
                if [ "$(printf '%s\n' "${!swarmAppLatestVersion}" "${!swarmAppVersion}" | sort -V | head -n1)" != "${!swarmAppLatestVersion}" ] && [ ! -z "${!swarmAppLatestVersion}" ]; then
                    if [ "$swarmApp" = "goshimmer" ]; then
                        goshimmerAllowDbDownload=false
                        sudo rm -rf $goshimmerHome/mainnetdb $goshimmerHome/peerdb
                    fi
                    swarmAppCurrentVersion=${!swarmAppVersion}
                    source ${!swarmAppModules}/${swarmAppPrefix}Installer
                    source ${!swarmAppModules}/${swarmAppPrefix}Version
                    swarmAppVersion=${swarmAppPrefix}Version
                    swarmAppUpdated=${swarmAppPrefix}Updated
                    if [ "$swarmAppCurrentVersion" != "${!swarmAppVersion}" ] || [ "${!swarmAppUpdated}" = "true" ]; then
                        restartDate=`date '+%d-%m-%Y %H-%M-%S'`
                        # CALL MODULE CONFIGPARSER
                        source ${!swarmAppModules}/${swarmAppPrefix}Parser
                        swarmAppRestart=restart${swarmAppPrefix^}
                        if [ "${!swarmAppRestart}" = "true" ]; then
                            sudo systemctl restart $swarmApp > /dev/null 2>&1
                            if [ "$swarmApp" = "shimmer-hornet" ]; then
                                for shimmerInxPlugin in ${shimmerInxPlugins[@]}
                                do
                                    if [ -f "/usr/bin/shimmer-inx-$shimmerInxPlugin" ]; then
                                        sudo systemctl restart shimmer-inx-$shimmerInxPlugin 2>/dev/null
                                    fi
                                done
                                unset shimmerInxPlugin
                            fi
                        fi
                        swarmAppChecksum=${swarmAppPrefix}Checksum
                        echo "$restartDate [AUTOUPDATE] New Version (${!swarmAppLatestVersion}) of $swarmAppName installed. Checksum: ${!swarmAppChecksum}" >> $swarmLogs/swarm.log
                        telegramText="Host: $HOSTNAME%0AApp: $swarmAppName%0A%0AAction: New Version <b>${!swarmAppLatestVersion}</b> installed.%0A%0AChecksum: ${!swarmAppChecksum}"
                        source $watchdogModules/watchdogTelegram
                    fi
                fi
            fi
            unset swarmAppName swarmAppPrefix swarmAppVersion swarmAppLatestVersion swarmAppCurrentVersion swarmAppUpdated restartDate swarmAppRestart swarmAppChecksum telegramText
        fi
    done
    unset swarmApp
fi