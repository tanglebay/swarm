#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/shimmer-hornet.cfg
    source $shimmerHornetModules/shimmerHornetConfigs
    if [ "$shimmerHornetUpdateCheck" = "true" ]; then
        menuShimmerHornetUpdateCheck="Disable"
    else
        menuShimmerHornetUpdateCheck="Enable"
    fi
    CHOICE=$(
        whiptail --title "Hornet [SHIMMER] Configurations" --menu "\nChoose an option" 24 65 0 \
        "1)" "API & JWT" \
        "2)" "INX Interface" \
        "3)" "Autopeering" \
        "4)" "DB Pruning" \
        "5)" "Proof of Work" \
        "6)" "Local Snapshots" \
        "7)" "P2P Identity" \
        "8)" "Gossip (Peering)" \
        "9)" "Node Alias" \
        "10)" "Shimmer Network" \
        "11)" "Hornet release Channel" \
        "12)" "$menuShimmerHornetUpdateCheck update check" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartShimmerHornet" = "true" ] && [ -f "/usr/bin/shimmer-hornet" ]; then
            if (whiptail --title "Hornet [SHIMMER] Menu" --yesno "Would you like to apply the changes and restart hornet?" 8 65); then
                {
                    echo 0
                    echo 33
                    source $shimmerHornetModules/shimmerHornetParser
                    echo 50
                    sudo systemctl restart shimmer-hornet > /dev/null 2>&1
                    sleep 0.25
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and Hornet is restarted..." 8 65 0
                unset restartShimmerHornet
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                if [ "$shimmerHornetApiEnabled" = "true" ]; then
                    menuShimmerHornetApiEnabled="Disable"
                else
                    menuShimmerHornetApiEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] API & JWT" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$menuShimmerHornetApiEnabled API" \
                    "2)" "API Routes" \
                    "3)" "Generate new JWT token" \
                    "4)" "Show all JWT token" \
                    "5)" "Revoke all JWT token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        if [ "$shimmerHornetApiEnabled" = "true" ]; then
                            shimmerHornetApiEnabled=false
                            menuShimmerHornetApiEnabled="disabled"
                        else
                            shimmerHornetApiEnabled=false
                            menuShimmerHornetApiEnabled="disabled"
                        fi
                        sudo sed -i 's~^shimmerHornetApiEnabled=.*~shimmerHornetApiEnabled='$shimmerHornetApiEnabled'~' $swarmConfigs/shimmer-hornet.cfg
                        whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Hornet API $menuShimmerHornetApiEnabled." 8 65
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        shimmerHornetApiRoutes=$shimmerHornetApiPublicRoutes
                        source $shimmerHornetModules/shimmerHornetApiRoutes
                        shimmerHornetApiRoutes=$(whiptail --title "Hornet [SHIMMER] API routes" --checklist "\nSelect (spacebar) routes you want to protect." 24 65 16 \
                            "/health" "" $shimmerHornetApiRoutesHealth \
                            "/api/routes" "" $shimmerHornetApiRoutesRoutes \
                            "/api/core/v2/info" "" $shimmerHornetApiRoutesInfo \
                            "/api/core/v2/tips" "" $shimmerHornetApiRoutesTips \
                            "/api/core/v2/blocks*" "" $shimmerHornetApiRoutesBlocks \
                            "/api/core/v2/transactions*" "" $shimmerHornetApiRoutesTransactions \
                            "/api/core/v2/milestones*" "" $shimmerHornetApiRoutesMilestones \
                            "/api/core/v2/outputs*" "" $shimmerHornetApiRoutesOutputs \
                            "/api/core/v2/treasury" "" $shimmerHornetApiRoutesTreasury \
                            "/api/core/v2/receipts*" "" $shimmerHornetApiRoutesReceipts \
                            "/api/debug/v1/*" "" $shimmerHornetApiRoutesDebug \
                            "/api/indexer/v1/*" "" $shimmerHornetApiRoutesIndexer \
                            "/api/mqtt/v1" "" $shimmerHornetApiRoutesMqtt \
                            "/api/participation/v1/events*" "" $shimmerHornetApiRoutesParticipationEvents \
                            "/api/participation/v1/outputs*" "" $shimmerHornetApiRoutesParticipationOutputs \
                            "/api/participation/v1/addresses*" "" $shimmerHornetApiRoutesParticipationAddresses 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        shimmerHornetApiRoutes=$(echo $shimmerHornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            shimmerHornetUpdateApiRoutes=true
                            source $shimmerHornetModules/shimmerHornetApiRoutes
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetConfigParsers/shimmerHornetApiPublicRoutes
                            fi
                            unset shimmerHornetUpdateApiRoutes
                        fi
                        unset shimmerHornetApiRoutes
                    ;;
                    "3)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] API & JWT" --yesno --defaultno "Are you sure you want to generate a new JWT token?" 8 65); then
                                shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api | awk '{ print $5 }')
                                if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                    sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    echo $shimmerHornetApiJwtToken >> $swarmLogs/shimmerHornetJwtToken.log
                                    clear
                                    echo ""
                                    echo $shimmerHornetApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Error generating JWT token, please try again later." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Please install Hornet first." 8 65
                        fi
                    ;;
                    "4)")
                        if [ -f "$swarmLogs/shimmerHornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/shimmerHornetJwtToken.log
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "No JWT token log found, please generate one first." 8 65
                        fi
                    ;;
                    "5)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] API & JWT" --yesno --defaultno "Are you sure you want to revoke all JWT tokens?" 8 65); then
                                shimmerHornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sudo sed -i 's~^shimmerHornetApiJwtSalt=.*~shimmerHornetApiJwtSalt="'$shimmerHornetApiJwtSalt'"~' $swarmConfigs/shimmer-hornet.cfg
                                {
                                    echo 0
                                    echo 15
                                    source $shimmerHornetConfigParsers/shimmerHornetApiJwtSalt
                                    echo 30
                                    sudo rm -rf $swarmLogs/shimmerHornetJwt.log
                                    echo 45
                                    source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                    echo 60
                                    sudo systemctl restart shimmer-hornet 2>/dev/null
                                    echo 75
                                    shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                        sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all JWT tokens will be revoked..." 8 65 0
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Please install Hornet first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg

                if [ "$shimmmerHornetInxEnabled" = "true" ]; then
                    menuShimmerHornetInxEnabled="Disable"
                else
                    menuShimmerHornetInxEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] INX" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$menuShimmerHornetInxEnabled INX interface" \
                    "2)" "INX pow worker count" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        if [ "$shimmerHornetInxEnabled" = "true" ]; then
                            shimmerHornetInxEnabled=false
                            menuShimmerHornetInxEnabled="disabled"
                            sudo sed -i 's/^shimmerHornetInxEnabled=.*/shimmerHornetInxEnabled='$shimmerHornetInxEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                        else
                            shimmerHornetInxEnabled=true
                            menuShimmerHornetInxEnabled="enabled"
                            sudo sed -i 's/^shimmerHornetInxEnabled=.*/shimmerHornetInxEnabled='$shimmerHornetInxEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                        fi
                        whiptail --title "Hornet [SHIMMER] INX" --msgbox "INX interface $menuShimmerHornetInxEnabled." 8 65
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetInxPowWorkerCount=$shimmerHornetInxPowWorkerCount
                        shimmerHornetInxPowWorkerCount=$(whiptail --inputbox "\nSet the numbers of cores for INX pow." 10 65 $shimmerHornetInxPowWorkerCount --title "Hornet [SHIMMER] INX" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetInxPowWorkerCount" ] && [ "$currentShimmerHornetInxPowWorkerCount" != "$shimmerHornetInxPowWorkerCount" ] && [ $shimmerHornetInxPowWorkerCount -eq $shimmerHornetInxPowWorkerCount ] 2>/dev/null; then
                                sudo sed -i 's/^shimmerHornetInxPowWorkerCount=.*/shimmerHornetInxPowWorkerCount='$shimmerHornetInxPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                            fi
                        fi
                        whiptail --title "Hornet [SHIMMER] INX" --msgbox "INX pow worker counter set to $shimmerHornetInxPowWorkerCount." 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg

                if [ "$shimmmerHornetAutopeeringEnabled" = "true" ]; then
                    menuShimmerHornetAutopeeringEnabled="Disable"
                else
                    menuShimmerHornetAutopeeringEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Autopeering" --menu "\nChoose an option" 24 65 0 \
                    "1)" "$menuShimmerHornetAutopeeringEnabled autopeering" \
                    "2)" "Autopeering port (UDP)" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        if [ "$shimmmerHornetAutopeeringEnabled" = "true" ]; then
                            shimmmerHornetAutopeeringEnabled=false
                            menuShimmerHornetAutopeeringEnabled="disabled"
                            sudo sed -i 's/^shimmerHornetAutopeeringEnabled=.*/shimmerHornetAutopeeringEnabled='$shimmerHornetAutopeeringEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                        else
                            shimmmerHornetAutopeeringEnabled=true
                            menuShimmerHornetAutopeeringEnabled="enabled"
                            sudo sed -i 's/^shimmerHornetAutopeeringEnabled=.*/shimmerHornetAutopeeringEnabled='$shimmerHornetAutopeeringEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                        fi
                        whiptail --title "Hornet [SHIMMER] Autopeering" --msgbox "Autopeering $menuShimmerHornetAutopeeringEnabled." 8 65
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetAutopeeringPort=$shimmerHornetAutopeeringPort
                        shimmerHornetAutopeeringPort=$(whiptail --inputbox "\nSet the autopeering port for the automatic neighbors detection." 10 65 $shimmerHornetAutopeeringPort --title "Hornet [SHIMMER] Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetAutopeeringPort" ] && [ "$currentShimmerHornetAutopeeringPort" != "$shimmerHornetAutopeeringPort" ] && [ $shimmerHornetAutopeeringPort -eq $shimmerHornetAutopeeringPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentShimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                        sudo ufw allow $shimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                    fi
                                    source $shimmerHornetConfigParsers/shimmerHornetAutopeeringPort
                                fi
                                sudo sed -i 's/^shimmerHornetAutopeeringPort=.*/shimmerHornetAutopeeringPort='$shimmerHornetAutopeeringPort'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Autopeering" --msgbox "Autopeering port set to \"$shimmerHornetAutopeeringPort/udp\"." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet Pruning
                if [ "$shimmerHornetPruningEnabled" = "true" ]; then
                    shimmerHornetPruningEnabledStatus=enabled
                else
                    shimmerHornetPruningEnabledStatus=disabled
                fi
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Pruning" --menu "\nStatus: $shimmerHornetPruningEnabledStatus\n\nChoose an option" 24 65 0 \
                    "1)" "Enable/Disable pruning" \
                    "2)" "Set database size" \
                    "3)" "Set pruning cooldown" \
                    "4)" "Set pruning percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ "$shimmerHornetPruning" = "true" ]; then
                            shimmerHornetPruningStatus=enabled
                        else
                            shimmerHornetPruningStatus=disabled
                        fi
                        CHOICE=$(
                            whiptail --title "Hornet [SHIMMER] Pruning" --menu "\nStatus: $shimmerHornetPruningEnabledStatus\n\nChoose an option" 24 65 0 \
                            "1)" "Enable pruning" \
                            "2)" "Disable pruning" 3>&2 2>&1 1>&3
                        )
                        case $CHOICE in
                            "1)")
                                shimmerHornetPruningEnabled=true
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningEnabled
                                fi
                                sudo sed -i 's/^shimmerHornetPruningEnabeld=.*/shimmerHornetPruningEnabled='$shimmerHornetPruningEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning was successfully activated." 8 65
                            ;;
                            "2)")
                                shimmerHornetPruningEnabled=false
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningEnabled
                                fi
                                sudo sed -i 's/^shimmerHornetPruningEnabled=.*/shimmerHornetPruningEnabled='$shimmerHornetPruningEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning was successfully deactivated." 8 65
                            ;;
                        esac
                    ;;
                    "2)")
                        shimmerHornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the database in gigabyte." 10 65 $shimmerHornetPruningDatabaseSize --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningDatabaseSize=${shimmerHornetPruningDatabaseSize//[!0-9]/}
                            if [ ! -z "$shimmerHornetPruningDatabaseSize" ] && [ $shimmerHornetPruningDatabaseSize -eq $shimmerHornetPruningDatabaseSize ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningDatabaseSize
                                fi
                                sudo sed -i 's/^shimmerHornetPruningDatabaseSize=.*/shimmerHornetPruningDatabaseSize='$shimmerHornetPruningDatabaseSize'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning of the database set to ${shimmerHornetPruningDatabaseSize}GB." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentShimmerHornetPruningCooldownTime=$shimmerHornetPruningCooldownTime
                        shimmerHornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum DB size is reached." 10 65 $shimmerHornetPruningCooldownTime --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningCooldownTime=${shimmerHornetPruningCooldownTime//[!0-9]/}
                            if [ $shimmerHornetPruningCooldownTime -gt 0 ] && [ $shimmerHornetPruningCooldownTime -lt 60 ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningCooldownTime
                                fi
                                sudo sed -i 's/^shimmerHornetPruningCooldownTime=.*/shimmerHornetPruningCooldownTime='$shimmerHornetPruningCooldownTime'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning cooldown time set to ${shimmerHornetPruningCooldownTime} minutes." 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        shimmerHornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the database" 10 65 $shimmerHornetPruningPercentage --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetPruningPercentage" ] && [ $shimmerHornetPruningPercentage -eq $shimmerHornetPruningPercentage ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningPercentage
                                fi
                                sudo sed -i 's/^shimmerHornetPruningPercentage=.*/shimmerHornetPruningPercentage='$shimmerHornetPruningPercentage'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning percentage set to ${shimmerHornetPruningPercentage}%." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            source $swarmConfigs/shimmer-hornet.cfg
            if [ "$shimmerHornetPowEnabled" = "true" ]; then
                shimmerHornetPowEnabledStatus=enabled
            else
                shimmerHornetPowEnabledStatus=disabled
            fi
            CHOICE=$(
                whiptail --title "Hornet [SHIMMER] PoW" --menu "\nPOW: $shimmerHornetPowEnabledStatus\n\nChoose an option" 24 65 0 \
                "1)" "Enable PoW" \
                "2)" "Disable PoW" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    shimmerHornetPowEnabled=true
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/shimmerHornetPowEnabled
                        source $shimmerHornetConfigParsers/shimmerHornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet [SHIMMER] PoW" --msgbox "PoW has been enabled." 8 65
                ;;
                "2)")
                    shimmerHornetPowEnabled=false
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/shimmerHornetPowEnabled
                        source $shimmerHornetConfigParsers/shimmerHornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet [SHIMMER] PoW" --msgbox "PoW has been disabeld." 8 65
                ;;
            esac
        ;;
        "6)")
            source $swarmConfigs/shimmer-hornet.cfg
            currentShimmerHornetSnapshotInterval=$shimmerHornetSnapshotInterval
            shimmerHornetSnapshotInterval=$(whiptail --inputbox "\nDefine after how many milestones your node should take a snapshot" 10 65 $shimmerHornetSnapshotInterval --title "Hornet [SHIMMER] Snapshots" 3>&1 1>&2 2>&3)
            exitStatus=$?
            if [ $exitStatus != 1 ]; then
                if [ ! -z "$shimmerHornetSnapshotInterval" ] && [ $shimmerHornetSnapshotInterval -eq $shimmerHornetSnapshotInterval ] 2>/dev/null; then
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/shimmerHornetSnapshotInterval
                    fi
                    if [ "$currentShimmerHornetSnapshotInterval" != "$shimmerHornetSnapshotInterval" ]; then
                        sudo sed -i 's/^shimmerHornetSnapshotInterval=.*/shimmerHornetSnapshotInterval='$shimmerHornetSnapshotInterval'/' $swarmConfigs/shimmer-hornet.cfg
                        whiptail --title "Hornet [SHIMMER] Snapshots" --msgbox "Snapshot interval changed to $shimmerHornetSnapshotInterval milestones." 8 65
                    else
                        whiptail --title "Hornet [SHIMMER] Snapshots" --msgbox "No new snapshot interval detected." 8 65
                    fi
                fi
            fi
        ;;
        "7)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                shimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Identity" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Set identity" \
                    "2)" "Generate new Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetIdentity=$shimmerHornetIdentity
                        shimmerHornetIdentity=$(whiptail --inputbox "\nSet your own private key for the Identity" 10 65 --title "Hornet [SHIMMER] Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$shimmerHornetIdentity" != "$currentShimmerHornetIdentity" ] && [ ! -z "$shimmerHornetIdentity" ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                fi
                                sudo sed -i 's~^shimmerHornetIdentity=.*~shimmerHornetIdentity="'$shimmerHornetIdentity'"~' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Identity" --msgbox "The following Identity key was set: \n$shimmerHornetIdentity." 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] Identity" --yesno --defaultno "Are you sure you want to generate a new Identity (the existing one will be deleted)?" 8 65); then
                                unset shimmerHornetIdentity
                                sudo rm -rf $shimmerHornetHome/$shimmerHornetNetwork/p2pstore/identity.key 2>/dev/null
                                source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                whiptail --title "Hornet [SHIMMER] Identity" --msgbox "The following p2pIdentity key was set: \n$shimmerHornetIdentity" 12 65
                                source $swarmConfigs/shimmer-hornet.cfg
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] Identity" --msgbox "Please install Hornet (Shimmer) first." 12 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Gossip" --menu "\nChoose an option" 24 65 0 \
                    "1)" "Gossip port" \
                    "2)" "Unknown peers limit" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetGossipPort=$shimmerHornetGossipPort
                        shimmerHornetGossipPort=$(whiptail --inputbox "\nSet the gossip port for the neighbors communication." 10 65 $shimmerHornetGossipPort --title "Hornet [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetGossipPort" ] && [ "$currentShimmerHornetGossipPort" != "$shimmerHornetGossipPort" ] && [ $shimmerHornetGossipPort -eq $shimmerHornetGossipPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentShimmerHornetGossipPort/tcp > /dev/null 2>&1
                                        sudo ufw allow $shimmerHornetGossipPort/tcp > /dev/null 2>&1
                                    fi
                                    source $shimmerHornetConfigParsers/shimmerHornetGossipPort
                                fi
                                sudo sed -i 's/^shimmerHornetGossipPort=.*/shimmerHornetGossipPort='$shimmerHornetGossipPort'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Gossip" --msgbox "Gossip port set to \"$shimmerHornetGossipPort/tcp\"." 8 65
                                restartShimmerHornet=true
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetUnknownPeersLimit=$shimmerHornetUnknownPeersLimit
                        shimmerHornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown neighbors." 10 65 $currentShimmerHornetUnknownPeersLimit --title "Hornet [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$currentShimmerHornetUnknownPeersLimit" != "$shimmerHornetUnknownPeersLimit" ] && [ $shimmerHornetUnknownPeersLimit -eq $shimmerHornetUnknownPeersLimit ] && [ ! -z "$shimmerHornetUnknownPeersLimit" ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetGossipUnknownPeersLimit
                                fi
                                sudo sed -i 's/^shimmerHornetUnknownPeersLimit=.*/shimmerHornetUnknownPeersLimit='$shimmerHornetUnknownPeersLimit'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Gossip" --msgbox "Maximum of unknown neighbors set to \"$shimmerHornetUnknownPeersLimit\"." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            shimmerHornetAlias=$(whiptail --inputbox "\nDefine an alias of your node" 10 65 $shimmerHornetAlias --title "Hornet [SHIMMER] Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$shimmerHornetAlias" ]; then
                sudo sed -i 's~^shimmerHornetAlias=.*~shimmerHornetAlias="'$shimmerHornetAlias'"~' $swarmConfigs/shimmer-hornet.cfg
                if [ -f "/usr/bin/shimmer-hornet" ]; then
                    source $shimmerHornetConfigParsers/shimmerHornetAlias
                    if [ "$newShimmerHornetAlias" = "true" ]; then
                        whiptail --title "Hornet [SHIMMER] Alias" --msgbox "New alias \"$shimmerHornetAlias\" applied." 8 65
                        unset newShimmerHornetAlias
                    else
                        whiptail --title "Hornet [SHIMMER] Alias" --msgbox "No node alias change detected." 8 65
                    fi
                else
                    whiptail --title "Hornet [SHIMMER] Alias" --msgbox "Alias \"$shimmerHornetAlias\" applied." 8 65
                fi
            fi
        ;;
        "10)")
            source $shimmerHornetModules/shimmerHornetConfigs
            # Hornet Networks
            CHOICE=$(
                whiptail --title "Hornet [SHIMMER] Network" --menu "\nCurrent network: $shimmerHornetNetwork\n\nChoose an option" 24 65 0 \
                "1)" "Mainnet (default)" \
                "2)" "Testnet (dev)" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet [SHIMMER] Network" --yesno --defaultno "Are you sure you want to change the network to mainnet (the old database will be deleted)?" 8 65); then
                        currentShimmerHornetNetwork=$shimmerHornetNetwork
                        shimmerHornetNetwork=mainnet
                        sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/shimmerHornetNetwork
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet [SHIMMER] Network" --yesno --defaultno "Are you sure you want to change the network to testnet (the old database will be deleted)?" 8 65); then
                        currentShimmerHornetNetwork=$shimmerHornetNetwork
                        shimmerHornetNetwork=testnet
                        sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/shimmerHornetNetwork
                        fi
                    fi
                ;;
            esac
        ;;
        "11)")
            source $swarmConfigs/shimmer-hornet.cfg
            # Hornet release channel
            CHOICE=$(
                whiptail --title "Hornet [SHIMMER] Release" --menu "\nSet \"stable\" for official release or \"beta\"/\"alpha\" for releases under development\n\nChoose an option" 24 65 0 \
                "1)" "Stable Release Channel (default)" \
                "2)" "Beta Release Channel" \
                "3)" "Alpha Release Channel" 3>&2 2>&1 1>&3
            )
            case $CHOICE in
                "1)")
                    if (whiptail --title "Hornet [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"stable\" (Hornet will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=stable
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/shimmerHornetReleaseChannel
                            source $shimmerHornetModules/shimmerHornetParser
                        fi
                    fi
                ;;
                "2)")
                    if (whiptail --title "Hornet [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"beta\" (Hornet will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=beta
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/shimmerHornetReleaseChannel
                            source $shimmerHornetModules/shimmerHornetParser
                        fi
                    fi
                ;;
                "3)")
                    if (whiptail --title "Hornet [SHIMMER] Release" --yesno --defaultno "Are you sure you want to change the release channel to \"alpha\" (Hornet will be reinstalled)?" 8 65); then
                        currentShimmerHornetRelease=$shimmerHornetRelease
                        shimmerHornetRelease=alpha
                        sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            source $shimmerHornetModules/shimmerHornetReleaseChannel
                            source $shimmerHornetModules/shimmerHornetParser
                        fi
                    fi
                ;;
            esac
        ;;
        "12)")
            source $swarmConfigs/shimmer-hornet.cfg
            if [ "$shimmerHornetUpdateCheck" = "true" ]; then
                shimmerHornetUpdateCheck=false
                menuShimmerHornetUpdateCheck="disabled"
                sudo sed -i 's/^shimmerHornetUpdateCheck=.*/shimmerHornetUpdateCheck='$shimmerHornetUpdateCheck'/' $swarmConfigs/shimmer-hornet.cfg
            else
                shimmerHornetUpdateCheck=true
                menuShimmerHornetUpdateCheck="enabled"
                sudo sed -i 's/^shimmerHornetUpdateCheck=.*/shimmerHornetUpdateCheck='$shimmerHornetUpdateCheck'/' $swarmConfigs/shimmer-hornet.cfg
            fi
            whiptail --title "Hornet [SHIMMER] Update Check" --msgbox "Hornet update check $menuShimmerHornetUpdateCheck." 8 65
        ;;
    esac
done
sudo chown -R hornet:hornet $shimmerHornetHome/*.json