#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    source $swarmConfigs/shimmer-hornet.cfg
    source $shimmerHornetModule/shimmerHornetConfigs
    if [ "$shimmerHornetUpdateCheck" = "true" ]; then
        menuShimmerHornetUpdateCheck="Disable"
    else
        menuShimmerHornetUpdateCheck="Enable"
    fi
    CHOICE=$(
        whiptail --title "Hornet [SHIMMER] Configurations" --menu "\nChoose an option" 24 65 0 \
        "" "" \
        "1)" "API & JWT" \
        "2)" "INX Interface" \
        "3)" "Autopeering" \
        "4)" "Snapshots" \
        "5)" "Database Pruning" \
        "6)" "Proof Of Work" \
        "7)" "P2P Identity" \
        "8)" "Gossip (Peering)" \
        "9)" "Node Alias" \
        "10)" "Shimmer Network" \
        "11)" "Hornet Release Channel" \
        "12)" "[$menuShimmerHornetUpdateCheck] Update Check" 3>&2 2>&1 1>&3
    )

    exitstatus=$?
    if [ "$exitstatus" = "1" ]; then
        exitCode=1
        if [ "$restartShimmerHornet" = "true" ] && [ -f "/usr/bin/shimmer-hornet" ]; then
            if (whiptail --title "Hornet [SHIMMER] Menu" --yesno "Would you like to apply the changes and restart [Shimmer] Hornet?" 8 65); then
                if [ ! -f "/tmp/shimmer-hornet.lock" ]; then
                    sudo touch /tmp/shimmer-hornet.lock > /dev/null 2>&1
                fi
                {
                    echo 0
                    echo 20
                    source $shimmerHornetModule/shimmerHornetParser
                    echo 40
                    for shimmerInxPlugin in ${shimmerInxPlugins[@]}
                    do
                        if [ -f "/usr/bin/shimmer-inx-$shimmerInxPlugin" ]; then
                            if [ ! -f "/tmp/shimmer-inx-$shimmerInxPlugin.lock" ]; then
                                sudo touch /tmp/shimmer-inx-$shimmerInxPlugin.lock > /dev/null 2>&1
                            fi
                            sudo systemctl stop shimmer-inx-$shimmerInxPlugin 2>/dev/null
                        fi
                    done
                    unset shimmerInxPlugin
                    echo 60
                    sudo systemctl restart shimmer-hornet > /dev/null 2>&1
                    echo 80
                    for shimmerInxPlugin in ${shimmerInxPlugins[@]}
                    do
                        if [ -f "/usr/bin/shimmer-inx-$shimmerInxPlugin" ]; then
                            sudo systemctl start shimmer-inx-$shimmerInxPlugin 2>/dev/null
                            if [ -f "/tmp/shimmer-inx-$shimmerInxPlugin.lock" ]; then
                                sudo rm -rf /tmp/shimmer-inx-$shimmerInxPlugin.lock > /dev/null 2>&1
                            fi
                        fi
                    done
                    unset shimmerInxPlugin
                    echo 100
                    sleep 0.25
                } | whiptail --gauge "Please wait while the changes are applied and [Shimmer] Hornet is restarted..." 8 65 0
                unset restartShimmerHornet
                if [ -f "/tmp/shimmer-hornet.lock" ]; then
                    sudo rm -rf /tmp/shimmer-hornet.lock > /dev/null 2>&1
                fi
            fi
        fi
    fi

    case $CHOICE in
        "1)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                if [ "$shimmerHornetApiEnabled" = "true" ]; then
                    menuShimmerHornetApiEnabled="Disable"
                else
                    menuShimmerHornetApiEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] API & JWT" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "[$menuShimmerHornetApiEnabled] API" \
                    "2)" "Set protected API Routes" \
                    "3)" "Generate New JWT Token" \
                    "4)" "Show All JWT Token" \
                    "5)" "Revoke All JWT Token" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        menuShimmerHornetApiEnabled=$(echo $menuShimmerHornetApiEnabled | awk '{print tolower($0)}')
                        if (whiptail --title "Hornet [SHIMMER] API" --yesno --defaultno "Are you sure you want to $menuShimmerHornetApiEnabled the [Shimmer] Hornet API?" 8 65); then
                            source $swarmConfigs/shimmer-hornet.cfg
                            if [ "$shimmerHornetApiEnabled" = "true" ]; then
                                shimmerHornetApiEnabled=false
                                menuShimmerHornetApiEnabled="disabled"
                            else
                                shimmerHornetApiEnabled=true
                                menuShimmerHornetApiEnabled="enabled"
                            fi
                            restartShimmerHornet=true
                            sudo sed -i 's~^shimmerHornetApiEnabled=.*~shimmerHornetApiEnabled='$shimmerHornetApiEnabled'~' $swarmConfigs/shimmer-hornet.cfg
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "[Shimmer] Hornet API $menuShimmerHornetApiEnabled." 8 65
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        shimmerHornetApiRoutes=$shimmerHornetApiPublicRoutes
                        source $shimmerHornetModule/shimmerHornetApiRoutes
                        shimmerHornetApiRoutes=$(whiptail --title "Hornet [SHIMMER] API routes" --checklist "" 24 65 18 \
                            "/health" "" $shimmerHornetApiRoutesHealth \
                            "/api/routes" "" $shimmerHornetApiRoutesRoutes \
                            "/api/core/v2/info" "" $shimmerHornetApiRoutesInfo \
                            "/api/core/v2/tips" "" $shimmerHornetApiRoutesTips \
                            "/api/core/v2/blocks*" "" $shimmerHornetApiRoutesBlocks \
                            "/api/core/v2/transactions*" "" $shimmerHornetApiRoutesTransactions \
                            "/api/core/v2/milestones*" "" $shimmerHornetApiRoutesMilestones \
                            "/api/core/v2/outputs*" "" $shimmerHornetApiRoutesOutputs \
                            "/api/core/v2/treasury" "" $shimmerHornetApiRoutesTreasury \
                            "/api/core/v2/receipts*" "" $shimmerHornetApiRoutesReceipts \
                            "/api/debug/v1/*" "" $shimmerHornetApiRoutesDebug \
                            "/api/indexer/v1/*" "" $shimmerHornetApiRoutesIndexer \
                            "/api/mqtt/v1" "" $shimmerHornetApiRoutesMqtt \
                            "/api/participation/v1/events*" "" $shimmerHornetApiRoutesParticipationEvents \
                            "/api/participation/v1/outputs*" "" $shimmerHornetApiRoutesParticipationOutputs \
                            "/api/participation/v1/addresses*" "" $shimmerHornetApiRoutesParticipationAddresses \
                            "/api/poi/v1/create/*" "" $shimmerHornetApiRoutesPoiCreate \
                            "/api/poi/v1/validate" "" $shimmerHornetApiRoutesPoiValidate 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        shimmerHornetApiRoutes=$(echo $shimmerHornetApiRoutes | tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' ',' | tr -d '"')
                        if [ "$exitStatus" != "1" ]; then
                            shimmerHornetUpdateApiRoutes=true
                            source $shimmerHornetModule/shimmerHornetApiRoutes
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetConfigParsers/shimmerHornetApiPublicRoutes
                            fi
                            unset shimmerHornetUpdateApiRoutes
                        fi
                        unset shimmerHornetApiRoutes
                    ;;
                    "3)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] API & JWT" --yesno --defaultno "Are you sure you want to generate a new [Shimmer] Hornet JWT token?" 8 65); then
                                shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api --salt $shimmerHornetApiJwtSalt | awk '{ print $5 }')
                                if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                    sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    echo $shimmerHornetApiJwtToken >> $swarmLogs/shimmerHornetJwtToken.log
                                    clear
                                    echo ""
                                    echo $shimmerHornetApiJwtToken
                                    echo ""
                                    read -n 1 -s -r -p "Press any key to continue"
                                else
                                    whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Error generating [Shimmer] Hornet JWT token, please try again later." 8 65
                                fi
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Please install [Shimmer] Hornet first." 8 65
                        fi
                    ;;
                    "4)")
                        if [ -f "$swarmLogs/shimmerHornetJwtToken.log" ]; then
                            sudo $swarmCLEditor $swarmLogs/shimmerHornetJwtToken.log
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "No [Shimmer] Hornet JWT token log found, please generate one first." 8 65
                        fi
                    ;;
                    "5)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] API & JWT" --yesno --defaultno "Are you sure you want to revoke all [Shimmer] Hornet JWT tokens?" 8 65); then
                                shimmerHornetApiJwtSalt=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13 ; echo '')
                                sudo sed -i 's~^shimmerHornetApiJwtSalt=.*~shimmerHornetApiJwtSalt="'$shimmerHornetApiJwtSalt'"~' $swarmConfigs/shimmer-hornet.cfg
                                if [ -f "/tmp/shimmer-hornet.lock" ]; then
                                    sudo rm -rf /tmp/shimmer-hornet.lock > /dev/null 2>&1
                                fi
                                for shimmerInxPlugin in ${shimmerInxPlugins[@]}
                                do
                                    if [ -f "/usr/bin/shimmer-inx-$shimmerInxPlugin" ]; then
                                        if [ ! -f "/tmp/shimmer-inx-$shimmerInxPlugin.lock" ]; then
                                            sudo touch /tmp/shimmer-inx-$shimmerInxPlugin.lock > /dev/null 2>&1
                                        fi
                                        sudo systemctl stop shimmer-inx-$shimmerInxPlugin 2>/dev/null
                                    fi
                                done
                                unset shimmerInxPlugin
                                {
                                    echo 0
                                    echo 15
                                    source $shimmerHornetConfigParsers/shimmerHornetApiJwtSalt
                                    echo 30
                                    sudo rm -rf $swarmLogs/shimmerHornetJwt.log
                                    echo 45
                                    source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                    echo 60
                                    sudo systemctl restart shimmer-hornet 2>/dev/null
                                    echo 75
                                    shimmerHornetApiJwtToken=$( cd $shimmerHornetHome/$shimmerHornetNetwork ; /usr/bin/shimmer-hornet tools jwt-api --salt $shimmerHornetApiJwtSalt | awk '{ print $5 }')
                                    echo 90
                                    if [ ! -z "$shimmerHornetApiJwtToken" ]; then
                                        sudo sed -i 's~^shimmerHornetApiJwtToken=.*~shimmerHornetApiJwtToken="'$shimmerHornetApiJwtToken'"~' $swarmConfigs/shimmer-hornet.cfg
                                    fi
                                    echo 100
                                } | whiptail --gauge "Please wait while all [Shimmer] Hornet JWT tokens will be revoked..." 8 65 0
                                for shimmerInxPlugin in ${shimmerInxPlugins[@]}
                                do
                                    if [ -f "/usr/bin/shimmer-inx-$shimmerInxPlugin" ]; then
                                        if [ -f "/tmp/shimmer-inx-$shimmerInxPlugin.lock" ]; then
                                            sudo rm -rf /tmp/shimmer-inx-$shimmerInxPlugin.lock > /dev/null 2>&1
                                        fi
                                        sudo systemctl start shimmer-inx-$shimmerInxPlugin 2>/dev/null
                                    fi
                                done
                                unset shimmerInxPlugin
                                if [ -f "/tmp/shimmer-hornet.lock" ]; then
                                    sudo rm -rf /tmp/shimmer-hornet.lock > /dev/null 2>&1
                                fi
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] API & JWT" --msgbox "Please install [Shimmer] Hornet first." 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                if [ "$shimmerHornetInxEnabled" = "true" ]; then
                    menuShimmerHornetInxEnabled="Disable"
                else
                    menuShimmerHornetInxEnabled="Enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] INX" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "[$menuShimmerHornetInxEnabled] INX Interface" \
                    "2)" "Set INX POW Worker Count" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        menuShimmerHornetInxEnabled=$(echo $menuShimmerHornetInxEnabled | awk '{print tolower($0)}')
                        if (whiptail --title "Hornet [SHIMMER] INX" --yesno --defaultno "Are you sure you want to $menuShimmerHornetInxEnabled [Shimmer] INX interface?" 8 65); then
                            source $swarmConfigs/shimmer-hornet.cfg
                            if [ "$shimmerHornetInxEnabled" = "true" ]; then
                                shimmerHornetInxEnabled=false
                                menuShimmerHornetInxEnabled="disabled"
                            else
                                shimmerHornetInxEnabled=true
                                menuShimmerHornetInxEnabled="enabled"
                            fi
                            restartShimmerHornet=true
                            sudo sed -i 's/^shimmerHornetInxEnabled=.*/shimmerHornetInxEnabled='$shimmerHornetInxEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            whiptail --title "Hornet [SHIMMER] INX" --msgbox "[Shimmer] INX interface $menuShimmerHornetInxEnabled." 8 65
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetInxPowWorkerCount=$shimmerHornetInxPowWorkerCount
                        shimmerHornetInxPowWorkerCount=$(whiptail --inputbox "\nSet the numbers of cores for [Shimmer] INX pow." 10 65 $shimmerHornetInxPowWorkerCount --title "Hornet [SHIMMER] INX" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetInxPowWorkerCount" ] && [ "$currentShimmerHornetInxPowWorkerCount" != "$shimmerHornetInxPowWorkerCount" ] && [ $shimmerHornetInxPowWorkerCount -eq $shimmerHornetInxPowWorkerCount ] 2>/dev/null; then
                                sudo sed -i 's/^shimmerHornetInxPowWorkerCount=.*/shimmerHornetInxPowWorkerCount='$shimmerHornetInxPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                                restartShimmerHornet=true
                            fi
                        fi
                        whiptail --title "Hornet [SHIMMER] INX" --msgbox "[Shimmer] INX pow worker counter set to $shimmerHornetInxPowWorkerCount." 8 65
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg

                if [ "$shimmerHornetAutopeeringEnabled" = "true" ]; then
                    menuShimmerHornetAutopeeringEnabled="disable"
                else
                    menuShimmerHornetAutopeeringEnabled="enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Autopeering" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "[${menuShimmerHornetAutopeeringEnabled^}] Autopeering" \
                    "2)" "Set Autopeering Port (UDP)" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [SHIMMER] Autopeering" --yesno --defaultno "Are you sure you want to ${menuShimmerHornetAutopeeringEnabled} [Shimmer] Hornet autopeering?" 8 65); then
                            source $swarmConfigs/shimmer-hornet.cfg
                            if [ "$shimmerHornetAutopeeringEnabled" = "true" ]; then
                                shimmerHornetAutopeeringEnabled=false
                                menuShimmerHornetAutopeeringEnabled="disabled"
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw delete allow $shimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                sudo sed -i 's/^shimmerHornetAutopeeringEnabled=.*/shimmerHornetAutopeeringEnabled='$shimmerHornetAutopeeringEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            else
                                shimmerHornetAutopeeringEnabled=true
                                menuShimmerHornetAutopeeringEnabled="enabled"
                                if [ "$ufw" = "true" ]; then
                                    sudo ufw allow $shimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                fi
                                sudo sed -i 's/^shimmerHornetAutopeeringEnabled=.*/shimmerHornetAutopeeringEnabled='$shimmerHornetAutopeeringEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            fi
                            restartShimmerHornet=true
                            whiptail --title "Hornet [SHIMMER] Autopeering" --msgbox "[Shimmer] Hornet autopeering $menuShimmerHornetAutopeeringEnabled." 8 65
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetAutopeeringPort=$shimmerHornetAutopeeringPort
                        shimmerHornetAutopeeringPort=$(whiptail --inputbox "\nSet the [Shimmer] Hornet autopeering port for the automatic neighbors detection." 10 65 $shimmerHornetAutopeeringPort --title "Hornet [SHIMMER] Autopeering" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetAutopeeringPort" ] && [ "$currentShimmerHornetAutopeeringPort" != "$shimmerHornetAutopeeringPort" ] && [ $shimmerHornetAutopeeringPort -eq $shimmerHornetAutopeeringPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentShimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                        sudo ufw allow $shimmerHornetAutopeeringPort/udp > /dev/null 2>&1
                                    fi
                                    source $shimmerHornetConfigParsers/shimmerHornetAutopeeringPort
                                fi
                                sudo sed -i 's/^shimmerHornetAutopeeringPort=.*/shimmerHornetAutopeeringPort='$shimmerHornetAutopeeringPort'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Autopeering" --msgbox "[Shimmer] Hornet autopeering port set to \"$shimmerHornetAutopeeringPort/udp\"." 8 65
                            fi
                        fi
                        unset currentShimmerHornetAutopeeringPort
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg

                if [ "$shimmerHornetSnapshotsEnabled" = "true" ]; then
                    menuShimmerHornetSnapshotsEnabled="disable"
                else
                    menuShimmerHornetSnapshotsEnabled="enable"
                fi
                # Hornet JWT
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Snapshots" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "[${menuShimmerHornetSnapshotsEnabled^}] Snapshots" \
                    "2)" "Set Snapshot Interval" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [SHIMMER] Snapshots" --yesno --defaultno "Are you sure you want to $menuShimmerHornetSnapshotsEnabled [Shimmer] Hornet snapshots?" 8 65); then
                            source $swarmConfigs/shimmer-hornet.cfg
                            if [ "$shimmerHornetSnapshotsEnabled" = "true" ]; then
                                shimmerHornetSnapshotsEnabled=false
                                menuShimmerHornetSnapshotsEnabled="disabled"
                                sudo sed -i 's/^shimmerHornetSnapshotsEnabled=.*/shimmerHornetSnapshotsEnabled='$shimmerHornetSnapshotsEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            else
                                shimmerHornetSnapshotsEnabled=true
                                menuShimmerHornetSnapshotsEnabled="enabled"
                                sudo sed -i 's/^shimmerHornetSnapshotsEnabled=.*/shimmerHornetSnapshotsEnabled='$shimmerHornetSnapshotsEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            fi
                            restartShimmerHornet=true
                            whiptail --title "Hornet [SHIMMER] Snapshots" --msgbox "[Shimmer] Hornet snapshots $menuShimmerHornetSnapshotsEnabled." 8 65
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetSnapshotsInterval=$shimmerHornetSnapshotsInterval
                        shimmerHornetSnapshotsInterval=$(whiptail --inputbox "\nSet the snapshot interval for [Shimmer] Hornet." 10 65 $shimmerHornetSnapshotsInterval --title "Hornet [SHIMMER] Snapshots" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetSnapshotsInterval" ] && [ "$currentShimmerHornetSnapshotsInterval" != "$shimmerHornetSnapshotsInterval" ] && [ $shimmerHornetSnapshotsInterval -eq $shimmerHornetSnapshotsInterval ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetSnapshotsInterval
                                fi
                                sudo sed -i 's/^shimmerHornetSnapshotsInterval=.*/shimmerHornetSnapshotsInterval='$shimmerHornetSnapshotsInterval'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Snapshots" --msgbox "[Shimmer] Hornet snapshot interval set to \"$shimmerHornetSnapshotsInterval\"." 8 65
                            fi
                        fi
                        unset currentShimmerHornetSnapshotsInterval
                    ;;
                esac
            done
            exitCode=0
        ;;
        "5)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet Pruning
                if [ "$shimmerHornetPruningEnabled" = "true" ]; then
                    shimmerHornetPruningEnabledStatus="disable"
                else
                    shimmerHornetPruningEnabledStatus="enable"
                fi
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Pruning" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "[${shimmerHornetPruningEnabledStatus^}] Pruning" \
                    "2)" "Set Database Size" \
                    "3)" "Set Pruning Cooldown" \
                    "4)" "Set Pruning Percentage" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [SHIMMER] Pruning" --yesno --defaultno "Are you sure you want to $shimmerHornetPruningEnabledStatus [Shimmer] Hornet pruning?" 8 65); then
                            if [ "$shimmerHornetPruningEnabled" = "true" ]; then
                                shimmerHornetPruningEnabled=false
                                shimmerHornetPruningEnabledStatus="disabled"
                            else
                                shimmerHornetPruningEnabled=true
                                shimmerHornetPruningEnabledStatus="enabled"
                            fi
                            restartShimmerHornet=true
                            sudo sed -i 's/^shimmerHornetPruningEnabled=.*/shimmerHornetPruningEnabled='$shimmerHornetPruningEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                            whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Pruning of the [Shimmer] Hornet database $shimmerHornetPruningEnabledStatus." 8 65
                        fi
                    ;;
                    "2)")
                        if [[ $shimmerHornetPruningDatabaseSize = *-* ]]; then
                            unset shimmerHornetPruningDatabaseSize
                        fi
                        currentShimmerHornetPruningDatabaseSize=$shimmerHornetPruningDatabaseSize
                        shimmerHornetPruningDatabaseSize=$(whiptail --inputbox "\nSet the maximum size of the [Shimmer] Hornet database in gigabytes." 10 65 $currentShimmerHornetPruningDatabaseSize --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningDatabaseSize=${shimmerHornetPruningDatabaseSize//[!0-9]/}
                            if [ $shimmerHornetPruningDatabaseSize -gt 0 ] && [ $currentShimmerHornetPruningDatabaseSize -ne $shimmerHornetPruningDatabaseSize ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningDatabaseSize
                                fi
                                sudo sed -i 's/^shimmerHornetPruningDatabaseSize=.*/shimmerHornetPruningDatabaseSize='$shimmerHornetPruningDatabaseSize'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "The [Shimmer] Hornet database size has been limited to ${shimmerHornetPruningDatabaseSize} GB." 8 65
                            else
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "Aborted - No change was made to the [Shimmer] Hornet database size." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        currentShimmerHornetPruningCooldownTime=$shimmerHornetPruningCooldownTime
                        shimmerHornetPruningCooldownTime=$(whiptail --inputbox "\nSet the interval (minutes) at which pruning is performed when the maximum [Shimmer] Hornet DB size is reached." 10 65 $shimmerHornetPruningCooldownTime --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            shimmerHornetPruningCooldownTime=${shimmerHornetPruningCooldownTime//[!0-9]/}
                            if [ $shimmerHornetPruningCooldownTime -gt 0 ] && [ $shimmerHornetPruningCooldownTime -lt 60 ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningCooldownTime
                                fi
                                sudo sed -i 's/^shimmerHornetPruningCooldownTime=.*/shimmerHornetPruningCooldownTime='$shimmerHornetPruningCooldownTime'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "[Shimmer] Hornet pruning cooldown time set to ${shimmerHornetPruningCooldownTime} minutes." 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        shimmerHornetPruningPercentage=$(whiptail --inputbox "\nSet how much percent of history should be pruned from the [Shimmer] Hornet database" 10 65 $shimmerHornetPruningPercentage --title "Hornet [SHIMMER] Pruning" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetPruningPercentage" ] && [ $shimmerHornetPruningPercentage -eq $shimmerHornetPruningPercentage ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetPruningPercentage
                                fi
                                sudo sed -i 's/^shimmerHornetPruningPercentage=.*/shimmerHornetPruningPercentage='$shimmerHornetPruningPercentage'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Pruning" --msgbox "[Shimmer] Hornet pruning percentage set to ${shimmerHornetPruningPercentage}%." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "6)")
            source $swarmConfigs/shimmer-hornet.cfg
            if [ "$shimmerHornetPowEnabled" = "true" ]; then
                shimmerHornetPowEnabledStatus="disable"
            else
                shimmerHornetPowEnabledStatus="enable"
            fi
            if (whiptail --title "Hornet [SHIMMER] Proof of Work" --yesno --defaultno "Do you really want to $shimmerHornetPowEnabledStatus [Shimmer] Hornet proof of work?" 8 65); then
                if [ "$shimmerHornetPowEnabled" = "true" ]; then
                    shimmerHornetPowEnabled=false
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/shimmerHornetPowEnabled
                        source $shimmerHornetConfigParsers/shimmerHornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet [SHIMMER] PoW" --msgbox "[Shimmer] Hornet PoW has been disabled." 8 65
                else
                    shimmerHornetPowEnabled=true
                    if [ -f "/usr/bin/shimmer-hornet" ]; then
                        source $shimmerHornetConfigParsers/shimmerHornetPowEnabled
                        source $shimmerHornetConfigParsers/shimmerHornetPowWorkerCount
                        sudo sed -i 's/^shimmerHornetPowWorkerCount=.*/shimmerHornetPowWorkerCount='$shimmerHornetPowWorkerCount'/' $swarmConfigs/shimmer-hornet.cfg
                    fi
                    sudo sed -i 's/^shimmerHornetPowEnabled=.*/shimmerHornetPowEnabled='$shimmerHornetPowEnabled'/' $swarmConfigs/shimmer-hornet.cfg
                    whiptail --title "Hornet [SHIMMER] PoW" --msgbox "[Shimmer] Hornet PoW has been enabled." 8 65
                fi
            fi
        ;;
        "7)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                shimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
                # Hornet Dashboard
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Identity" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Set Identity" \
                    "2)" "Generate New Identity" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetIdentity=$shimmerHornetIdentity
                        shimmerHornetIdentity=$(whiptail --inputbox "\nSet your own private key for the [Shimmer] Hornet Identity" 10 65 --title "Hornet [SHIMMER] Identity" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$shimmerHornetIdentity" != "$currentShimmerHornetIdentity" ] && [ ! -z "$shimmerHornetIdentity" ]; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                fi
                                sudo sed -i 's~^shimmerHornetIdentity=.*~shimmerHornetIdentity="'$shimmerHornetIdentity'"~' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Identity" --msgbox "The following [Shimmer] Hornet Identity key was set: \n$shimmerHornetIdentity." 10 65
                            fi
                        fi
                    ;;
                    "2)")
                        if [ -f "/usr/bin/shimmer-hornet" ]; then
                            if (whiptail --title "Hornet [SHIMMER] Identity" --yesno --defaultno "Are you sure you want to generate a new [Shimmer] Hornet Identity (the existing one will be deleted)?" 8 65); then
                                unset shimmerHornetIdentity
                                if [ -f "$shimmerHornetHome/$shimmerHornetNetwork/p2pstore/identity.key" ]; then
                                    sudo rm -rf $shimmerHornetHome/$shimmerHornetNetwork/p2pstore/identity.key 2>/dev/null
                                fi
                                source $shimmerHornetConfigParsers/shimmerHornetIdentity
                                whiptail --title "Hornet [SHIMMER] Identity" --msgbox "The following [Shimmer] Hornet Identity key was set: \n$shimmerHornetIdentity" 12 65
                                source $swarmConfigs/shimmer-hornet.cfg
                            fi
                        else
                            whiptail --title "Hornet [SHIMMER] Identity" --msgbox "Please install [Shimmer] Hornet first." 12 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "8)")
            while [ $exitCode -lt 1 ]; do
                clear
                source $swarmConfigs/shimmer-hornet.cfg
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Gossip" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Set Hossip Port" \
                    "2)" "Set Unknown Peers Limit" 3>&2 2>&1 1>&3
                )
                exitstatus=$?
                if [ "$exitstatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetGossipPort=$shimmerHornetGossipPort
                        shimmerHornetGossipPort=$(whiptail --inputbox "\nSet the [Shimmer] Hornet gossip port for the neighbors communication." 10 65 $shimmerHornetGossipPort --title "Hornet [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ ! -z "$shimmerHornetGossipPort" ] && [ "$currentShimmerHornetGossipPort" != "$shimmerHornetGossipPort" ] && [ $shimmerHornetGossipPort -eq $shimmerHornetGossipPort ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    if [ "$ufw" = "true" ]; then
                                        sudo ufw delete allow $currentShimmerHornetGossipPort/tcp > /dev/null 2>&1
                                        sudo ufw allow $shimmerHornetGossipPort/tcp > /dev/null 2>&1
                                    fi
                                    source $shimmerHornetConfigParsers/shimmerHornetGossipPort
                                fi
                                sudo sed -i 's/^shimmerHornetGossipPort=.*/shimmerHornetGossipPort='$shimmerHornetGossipPort'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Gossip" --msgbox "[Shimmer] Hornet gossip port set to \"$shimmerHornetGossipPort/tcp\"." 8 65
                                restartShimmerHornet=true
                            fi
                        fi
                    ;;
                    "2)")
                        source $swarmConfigs/shimmer-hornet.cfg
                        currentShimmerHornetUnknownPeersLimit=$shimmerHornetUnknownPeersLimit
                        shimmerHornetUnknownPeersLimit=$(whiptail --inputbox "\nSet the maximum amount of unknown [Shimmer] Hornet neighbors." 10 65 $currentShimmerHornetUnknownPeersLimit --title "Hornet [SHIMMER] Gossip" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ $exitStatus != 1 ]; then
                            if [ "$currentShimmerHornetUnknownPeersLimit" != "$shimmerHornetUnknownPeersLimit" ] && [ $shimmerHornetUnknownPeersLimit -eq $shimmerHornetUnknownPeersLimit ] && [ ! -z "$shimmerHornetUnknownPeersLimit" ] 2>/dev/null; then
                                if [ -f "/usr/bin/shimmer-hornet" ]; then
                                    source $shimmerHornetConfigParsers/shimmerHornetGossipUnknownPeersLimit
                                fi
                                sudo sed -i 's/^shimmerHornetUnknownPeersLimit=.*/shimmerHornetUnknownPeersLimit='$shimmerHornetUnknownPeersLimit'/' $swarmConfigs/shimmer-hornet.cfg
                                whiptail --title "Hornet [SHIMMER] Gossip" --msgbox "Maximum of unknown [Shimmer] Hornet neighbors set to \"$shimmerHornetUnknownPeersLimit\"." 8 65
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "9)")
            shimmerHornetAlias=$(whiptail --inputbox "\nDefine an alias of your [Shimmer] Hornet node" 10 65 $shimmerHornetAlias --title "Hornet [SHIMMER] Alias" 3>&1 1>&2 2>&3)
            if [ ! -z "$shimmerHornetAlias" ]; then
                sudo sed -i 's~^shimmerHornetAlias=.*~shimmerHornetAlias="'$shimmerHornetAlias'"~' $swarmConfigs/shimmer-hornet.cfg
                if [ -f "/usr/bin/shimmer-hornet" ]; then
                    source $shimmerHornetConfigParsers/shimmerHornetAlias
                    if [ "$newShimmerHornetAlias" = "true" ]; then
                        whiptail --title "Hornet [SHIMMER] Alias" --msgbox "New [Shimmer] Hornet alias \"$shimmerHornetAlias\" applied." 8 65
                        unset newShimmerHornetAlias
                    else
                        whiptail --title "Hornet [SHIMMER] Alias" --msgbox "No [Shimmer] Hornet alias change detected." 8 65
                    fi
                else
                    whiptail --title "Hornet [SHIMMER] Alias" --msgbox "[Shimmer] Hornet alias \"$shimmerHornetAlias\" applied." 8 65
                fi
            fi
        ;;
        "10)")
            while [ $exitCode -lt 1 ]; do
                source $shimmerHornetModule/shimmerHornetConfigs
                # Hornet Networks
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Network" --menu "\nCurrent network: $shimmerHornetNetwork\n\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Select Shimmer Mainnet (Default)" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [SHIMMER] Network" --yesno --defaultno "Are you sure you want to change the network to [Shimmer] mainnet (the old database will be deleted)?" 8 65); then
                            currentShimmerHornetNetwork=$shimmerHornetNetwork
                            shimmerHornetNetwork=mainnet
                            sudo sed -i 's/^shimmerHornetNetwork=.*/shimmerHornetNetwork='$shimmerHornetNetwork'/' $swarmConfigs/shimmer-hornet.cfg
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetModule/shimmerHornetNetwork
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "11)")
            while [ $exitCode -lt 1 ]; do
                source $swarmConfigs/shimmer-hornet.cfg
                # Hornet release channel
                CHOICE=$(
                    whiptail --title "Hornet [SHIMMER] Releases" --menu "\nSet \"rc\" for official [Shimmer] Hornet releases or \"beta\"/\"alpha\" for [Shimmer] Hornet releases under development\n\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Select Release Candidate Channel (Default)" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if (whiptail --title "Hornet [SHIMMER] Releases" --yesno --defaultno "Are you sure you want to change the [Shimmer] Hornet release channel to \"rc\" (Hornet will be reinstalled)?" 8 65); then
                            currentShimmerHornetRelease=$shimmerHornetRelease
                            shimmerHornetRelease="rc"
                            sudo sed -i 's/^shimmerHornetRelease=.*/shimmerHornetRelease='$shimmerHornetRelease'/' $swarmConfigs/shimmer-hornet.cfg
                            if [ -f "/usr/bin/shimmer-hornet" ]; then
                                source $shimmerHornetModule/shimmerHornetReleaseChannel
                                source $shimmerHornetModule/shimmerHornetParser
                            fi
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
        "12)")
            menuShimmerHornetUpdateCheck=$(echo $menuShimmerHornetUpdateCheck | awk '{print tolower($0)}')
            if (whiptail --title "Hornet [SHIMMER] Update Check" --yesno --defaultno "Are you sure you want to $menuShimmerHornetUpdateCheck the [Shimmer] Hornet update check?" 8 65); then
                source $swarmConfigs/shimmer-hornet.cfg
                if [ "$shimmerHornetUpdateCheck" = "true" ]; then
                    shimmerHornetUpdateCheck=false
                    menuShimmerHornetUpdateCheck="disabled"
                    sudo sed -i 's/^shimmerHornetUpdateCheck=.*/shimmerHornetUpdateCheck='$shimmerHornetUpdateCheck'/' $swarmConfigs/shimmer-hornet.cfg
                else
                    shimmerHornetUpdateCheck=true
                    menuShimmerHornetUpdateCheck="enabled"
                    sudo sed -i 's/^shimmerHornetUpdateCheck=.*/shimmerHornetUpdateCheck='$shimmerHornetUpdateCheck'/' $swarmConfigs/shimmer-hornet.cfg
                fi
                restartShimmerHornet=true
                whiptail --title "Hornet [SHIMMER] Update Check" --msgbox "[Shimmer] Hornet update check $menuShimmerHornetUpdateCheck." 8 65
            fi
        ;;
    esac
done
sudo chown -R hornet:hornet $shimmerHornetHome/*.json