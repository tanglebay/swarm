#!/bin/bash
if [ -f "/usr/bin/shimmer-hornet" ]; then

    source $swarmConfigs/shimmer-hornet.cfg
    source $swarmConfigs/latest-versions.cfg

    shimmerHornetStatus=$(systemctl show -p ActiveState --value shimmer-hornet)

    shimmerHornetVersion=$(/usr/bin/shimmer-hornet -v | awk '{ print $2 }')
    if [ -z "$shimmerHornetVersion" ]; then
        shimmerHornetVersion="N/A"
    else
        if [ "$shimmerHornetVersion" != "$latestShimmerHornetVersion" ] && [ ! -z "$latestShimmerHornetVersion" ]; then
            shimmerHornetVersion="$shimmerHornetVersion (new version \"v$latestShimmerHornetVersion\" available!)"
        fi
    fi

    if [ "$shimmerHornetStatus" = "active" ]; then
        shimmerHornetHealthy="$(curl --max-time 2 -s -X GET "http://localhost:14266/api/core/v2/info" -H  "accept: application/json" -H "Authorization: Bearer ${shimmerHornetApiJwtToken}"|jq -r '.status.isHealthy' 2> /dev/null)"
        if [ -z "$shimmerHornetHealthy" ]; then
            shimmerHornetHealthy="N/A"
        else
            if [ "$shimmerHornetHealthy" = "true" ]; then
                shimmerHornetHealthy="✓"
            else
                shimmerHornetHealthy="X"
            fi
        fi
    else
        shimmerHornetHealthy="N/A"
    fi

    # DB size
    if [ -d "$shimmerHornetHome/$shimmerHornetNetwork/database" ]; then
        getCurrentDbSize="$(du -sb $shimmerHornetHome/$shimmerHornetNetwork/database | cut -f1)"
        let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
        if [ $getCurrentDbSizeInMb -gt 999 ]; then
            let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
            currentShimmerHornetDbSize="${getCurrentDbSizeInGb} GB"
        else
            currentShimmerHornetDbSize="${getCurrentDbSizeInMb} MB"
        fi
    else
        currentShimmerHornetDbSize="N/A"
    fi

    if [ "$shimmerHornetPruningEnabled" = "true" ]; then
        shimmerHornetPruningEnabledStatus="✓"
    else
        shimmerHornetPruningEnabledStatus="X"
    fi

    if [ "$shimmerHornetInxEnabled" = "true" ]; then
        shimmerHornetInxEnabledStatus="✓"
    else
        shimmerHornetInxEnabledStatus="X"
    fi

    if [ "$shimmerHornetAutopeeringEnabled" = "true" ]; then
        shimmerHornetAutopeeringEnabledStatus="✓"
    else
        shimmerHornetAutopeeringEnabledStatus="X"
    fi

    if [ "$shimmerHornetPowEnabled" = "true" ]; then
        shimmerHornetPowEnabledStatus="✓"
    else
        shimmerHornetPowEnabledStatus="X"
    fi

    if [ -f "/etc/nginx/sites-enabled/shimmer-hornet" ]; then
        shimmerHornetProxyStatus="✓"
    else
        shimmerHornetProxyStatus="X"
    fi

    # OUTPUT
    whiptail --scrolltext --title "Hornet [SHIMMER] Info" --msgbox "Hornet: $shimmerHornetStatus\nVersion: v$shimmerHornetVersion\nNetwork: $shimmerHornetNetwork\nDB size: $currentShimmerHornetDbSize\nHealthy: $shimmerHornetHealthy\nProxy: $shimmerHornetProxyStatus\n\nAlias: $shimmerHornetAlias\nINX: $shimmerHornetInxEnabledStatus\nAutopeering: $shimmerHornetAutopeeringEnabledStatus\nPoW: $shimmerHornetPowEnabledStatus\nLS Interval: $shimmerHornetSnapshotInterval milestones\nGossip Port: ${shimmerHornetGossipPort}/tcp\nAutopeering Port: ${shimmerHornetAutopeeringPort}/udp\n\nPruning: $shimmerHornetPruningEnabledStatus\nMax DB size: ${shimmerHornetPruningDatabaseSize} GB\nPruning percentage: ${shimmerHornetPruningPercentage}%\nPruning Cooldown: $shimmerHornetPruningCooldownTime minutes" 24 65
else
    # OUTPUT
    whiptail --title "Hornet [SHIMMER] Info" --msgbox "Hornet not installed!" 8 65
fi
