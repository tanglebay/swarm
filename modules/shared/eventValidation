#!/bin/bash

eventDataLog="/tmp/participation-event.log"

if [ "$eventNetwork" = "iota" ]; then
    nodeJwtToken="$iotaNodeApiJwtToken"
fi

if [ "$eventNetwork" = "shimmer" ]; then
    nodeJwtToken="$shimmerNodeApiJwtToken"
fi

if [ "$TRAEFIK_PROTOCOL" = "https" ]; then
    TRAEFIK_PORT=$TRAEFIK_HTTPS_PORT
else
    TRAEFIK_PORT=$TRAEFIK_HTTP_PORT
fi

##################################################################################################################################

if [ ! -z "$nodeJwtToken" ] && [ "$eventType" = "staking" ]; then
    if [ "$eventNetwork" = "iota" ]; then
        eventStatus=$(curl -Ls ${TRAEFIK_PROTOCOL}://${IOTA_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.status')
    fi
    if [ "$eventNetwork" = "shimmer" ]; then
        eventStatus=$(curl -Ls ${TRAEFIK_PROTOCOL}://${SHIMMER_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.status')
    fi

    if [ -z "$eventStatus" ] || [ "$eventStatus" = "null" ] || [ "$eventStatus" = "\"null\"" ]; then
        whiptail --title "SWARM - Events" --msgbox "The event could not be found in the database." 8 70
    else
        if [[ $eventStatus = *ended* ]]; then
            while [ $exitCode -lt 1 ]; do
                if [ "$eventNetwork" = "iota" ]; then
                    sudo curl -Ls ${TRAEFIK_PROTOCOL}://${IOTA_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/admin/events/${eventId}/rewards --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq > $eventDataLog
                fi
                if [ "$eventNetwork" = "shimmer" ]; then
                    sudo curl -Ls ${TRAEFIK_PROTOCOL}://${SHIMMER_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/admin/events/${eventId}/rewards --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq > $eventDataLog
                fi
                if [ -f "$eventDataLog" ]; then
                    eventResult=$(cat $eventDataLog)
                fi
                if [[ $eventResult = *"missing or malformed jwt"* ]]; then
                    if [ "$eventNetwork" = "iota" ]; then
                        nodeJwtToken="$(cd $iotaNodeHome ; /usr/bin/iota-hornet tools jwt-api --salt $iotaNodeApiJwtSalt | awk '{print $NF}')"
                        sudo sed -i 's~^iotaNodeApiJwtToken=.*~iotaNodeApiJwtToken="'"$nodeJwtToken"'"~' $swarmConfigs/iota-hornet.cfg
                    fi
                    if [ "$eventNetwork" = "shimmer" ]; then
                        nodeJwtToken="$(cd $shimmerNodeHome/$shimmerNodeNetwork ; /usr/bin/shimmer-hornet tools jwt-api --salt $shimmerNodeApiJwtSalt | awk '{print $NF}')"
                        sudo sed -i 's~^shimmerNodeApiJwtToken=.*~shimmerNodeApiJwtToken="'"$nodeJwtToken"'"~' $swarmConfigs/shimmer-hornet.cfg
                    fi
                else
                    unset eventResult
                    exitCode=1
                fi
            done
            exitCode=0
            eventSymbol=$(printf "Symbol:          %s\n" "$(jq '.symbol' ${eventDataLog})")
            eventMilestone=$(printf "Milestone index: %s\n" "$(jq '.milestoneIndex' ${eventDataLog})")
            eventTotalRewards=$(printf "Total rewards:   %s\n" "$(jq '.totalRewards' ${eventDataLog})")
            eventChecksum=$(printf "Checksum:        %s\n" "$(jq '.checksum' ${eventDataLog})")
            echo $eventSymbol > $eventDataLog
            echo $eventMilestone >> $eventDataLog
            echo $eventTotalRewards >> $eventDataLog
            echo $eventChecksum >> $eventDataLog

            whiptail --title "SWARM - Events" --msgbox "\nEvent ID: \"$eventId\"\n\n$eventSymbol\n$eventMilestone\n$eventTotalRewards\n\n$eventChecksum" 24 70

            if (whiptail --title "SWARM - Events" --yesno --defaultno "Do you want to validate the event against Tangle Bay now?" 8 70); then
                if [ "$eventNetwork" = "iota" ]; then
                    eventChecksum=$(curl -Ls ${TRAEFIK_PROTOCOL}://${IOTA_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.checksum')
                    eventTangleBayChecksum=$(curl -Ls https://iota-node.tanglebay.com/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' | jq '.checksum')
                fi
                if [ "$eventNetwork" = "shimmer" ]; then
                    eventChecksum=$(curl -Ls ${TRAEFIK_PROTOCOL}://${SHIMMER_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.checksum')
                    eventTangleBayChecksum=$(curl -Ls https://shimmer-node.tanglebay.com/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' | jq '.checksum')
                fi
                if [ ! -z "$eventChecksum" ] && [ ! -z "$eventTangleBayChecksum" ]; then
                    if [ "$eventTangleBayChecksum" = "$eventChecksum" ]; then
                        whiptail --title "SWARM - Events" --msgbox "The event was successfully validated against Tangle Bay.\n\nNode checksum:\n$eventChecksum\n\nTangleBay checksum:\n$eventTangleBayChecksum" 24 70
                    else
                        whiptail --title "SWARM - Events" --msgbox "The event was not successfully validated against Tangle Bay.\n\nNode checksum:\n$eventChecksum\n\nTangleBay checksum:\n$eventTangleBayChecksum" 24 70
                    fi
                else
                    whiptail --title "SWARM - Events" --msgbox "Unfortunately, an error occurred while processing the request." 8 70
                fi
                unset eventTangleBayChecksum
            fi
        else
            whiptail --title "SWARM - Events" --msgbox "The event is not yet completed and therefore cannot be validated." 8 70
        fi
    fi
fi

if [ ! -z "$nodeJwtToken" ] && [ "$eventType" = "ballot" ]; then
    if [ "$eventNetwork" = "iota" ]; then
        eventStatus=$(curl -Ls ${TRAEFIK_PROTOCOL}://${IOTA_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.status')
    fi
    if [ "$eventNetwork" = "shimmer" ]; then
        eventStatus=$(curl -Ls ${TRAEFIK_PROTOCOL}://${SHIMMER_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.status')
    fi

    if [ -z "$eventStatus" ] || [ "$eventStatus" = "null" ] || [ "$eventStatus" = "\"null\"" ]; then
        whiptail --title "SWARM - Events" --msgbox "The event could not be found in the database." 8 70
    else
        if [[ $eventStatus = *ended* ]]; then
            while [ $exitCode -lt 1 ]; do
                if [ "$eventNetwork" = "iota" ]; then
                    ballotChecksum=$(curl -Ls ${TRAEFIK_PROTOCOL}://${IOTA_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.checksum')
                fi
                if [ "$eventNetwork" = "shimmer" ]; then
                    ballotChecksum=$(curl -Ls ${TRAEFIK_PROTOCOL}://${SHIMMER_NODE_ADDRESS}:${TRAEFIK_PORT}/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' -H "Authorization: Bearer ${nodeJwtToken}" | jq '.checksum')
                fi
                if [[ $ballotChecksum = *"missing or malformed jwt"* ]]; then
                    if [ "$eventNetwork" = "iota" ]; then
                        nodeJwtToken="$(cd $iotaNodeHome ; /usr/bin/iota-hornet tools jwt-api --salt $iotaNodeApiJwtSalt | awk '{print $NF}')"
                        sudo sed -i 's~^iotaNodeApiJwtToken=.*~iotaNodeApiJwtToken="'"$nodeJwtToken"'"~' $swarmConfigs/iota-hornet.cfg
                    fi
                    if [ "$eventNetwork" = "shimmer" ]; then
                        nodeJwtToken="$(cd $shimmerNodeHome/$shimmerNodeNetwork ; /usr/bin/shimmer-hornet tools jwt-api --salt $shimmerNodeApiJwtSalt | awk '{print $NF}')"
                        sudo sed -i 's~^shimmerNodeApiJwtToken=.*~shimmerNodeApiJwtToken="'"$nodeJwtToken"'"~' $swarmConfigs/shimmer-hornet.cfg
                    fi
                else
                    exitCode=1
                fi
            done
            exitCode=0
            echo "Ballot ID: \"$eventId\"" > $eventDataLog
            echo "Checksum: $ballotChecksum" >> $eventDataLog
            whiptail --title "SWARM - Events" --msgbox "\nVoting ID: \"$eventId\"\n\nChecksum: $ballotChecksum" 24 70

            if (whiptail --title "SWARM - Events" --yesno --defaultno "Do you want to validate the event against Tangle Bay now?" 8 70); then
                if [ "$eventNetwork" = "iota" ]; then
                    ballotTangleBayChecksum=$(curl -Ls https://iota-node.tanglebay.com/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' | jq '.checksum')
                fi
                if [ "$eventNetwork" = "shimmer" ]; then
                    ballotTangleBayChecksum=$(curl -Ls https://shimmer-node.tanglebay.com/api/participation/v1/events/${eventId}/status --max-time 5 -H 'Content-Type: application/json' | jq '.checksum')
                fi
                if [ ! -z "$ballotTangleBayChecksum" ]; then
                    if [ "$ballotTangleBayChecksum" = "$ballotChecksum" ]; then
                        whiptail --title "SWARM - Events" --msgbox "The event was successfully validated against Tangle Bay.\n\nNode checksum:\n$ballotChecksum\n\nTangleBay checksum:\n$ballotTangleBayChecksum" 24 70
                    else
                        whiptail --title "SWARM - Events" --msgbox "The event was not successfully validated against Tangle Bay.\n\nNode checksum:\n$ballotChecksum\n\nTangleBay checksum:\n$ballotTangleBayChecksum" 24 70
                    fi
                else
                    whiptail --title "SWARM - Events" --msgbox "Unfortunately, an error occurred while processing the request." 8 70
                fi
                unset ballotTangleBayChecksum
            fi
        else
            whiptail --title "SWARM - Events" --msgbox "The event is not yet completed and therefore cannot be validated." 8 70
        fi
    fi
fi

unset nodeId nodeApiPort nodeJwtToken eventId eventStatus eventData eventSymbol eventMilestone eventTotalRewards eventChecksum eventChecksum eventType ballotChecksum TRAEFIK_PORT
