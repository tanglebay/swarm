#!/bin/bash
if [ -f "/usr/bin/hornet" ]; then

    source $swarmConfigs/hornet.cfg

    hornetStatus=$(systemctl show -p ActiveState --value hornet)

    hornetVersion=$(/usr/bin/hornet -v | awk '{ print $2 }')
    if [ -z "$hornetVersion" ]; then
        hornetVersion="N/A"
    else
        if [ "$hornetVersion" != "$latestHornetVersion" ] && [ ! -z "$latestHornetVersion" ]; then
            hornetVersion="$hornetVersion (new version \"v$latestHornetVersion\" available!)"
        fi
    fi
    fi

    if [ "$hornetStatus" = "active" ]; then
        hornetHealthy="$(curl --max-time 2 -s -X GET "http://localhost:14265/api/v1/info" -H  "accept: application/json" -H "Authorization: Bearer ${hornetApiJwtToken}"|jq -r '.data.isHealthy' 2> /dev/null)"
        if [ -z "$hornetHealthy" ]; then
            hornetHealthy="N/A"
        else
            if [ "$hornetHealthy" = "true" ]; then
                hornetHealthy="Yes"
            else
                hornetHealthy="No"
            fi
        fi
    else
        hornetHealthy="N/A"
    fi

    # DB size
    if [ -d "$hornetHome/${hornetNetwork}db" ]; then
        getCurrentDbSize="$(du -sb $hornetHome/${hornetNetwork}db | cut -f1)"
        let getCurrentDbSizeInMb=$getCurrentDbSize/1000000
        if [ $getCurrentDbSizeInMb -gt 999 ]; then
            let getCurrentDbSizeInGb=$getCurrentDbSize/1000000000
            currentHornetDbSize="${getCurrentDbSizeInGb} GB"
        else
            currentHornetDbSize="${getCurrentDbSizeInMb} MB"
        fi
    else
        currentHornetDbSize="N/A"
    fi

    if [ "$hornetAutoRevalidation" = "true" ]; then
        hornetAutoRevalidationStatus=enabled
    else
        hornetAutoRevalidationStatus=disabled
    fi

    if [ "$hornetPruningEnabled" = "true" ]; then
        hornetPruningEnabledStatus=enabled
    else
        hornetPruningEnabledStatus=disabled
    fi

    if [ "$hornetPowEnabled" = "true" ]; then
        hornetPowEnabledStatus=active
    else
        hornetPowEnabledStatus=inactive
    fi

    if [ -f "/etc/nginx/sites-enabled/hornet" ]; then
        hornetProxyStatus=active
    else
        hornetProxyStatus=inactive
    fi

    # OUTPUT
    whiptail --title "Hornet Info" --msgbox "Hornet: $hornetStatus\nVersion: v$hornetVersion\nNetwork: $hornetNetwork\nHealthy: $hornetHealthy\nDB size: $currentHornetDbSize\nProxy: $hornetProxyStatus\n\nAlias: $hornetAlias\nPoW: $hornetPowEnabledStatus\nLS Interval: $hornetSnapshotInterval milestones\nGossip Port: ${hornetGossipPort}/tcp\nAutopeering Port: ${hornetAutopeeringPort}/udp\nDB Revalidation: $hornetAutoRevalidation\n\nPruning: $hornetPruningEnabledStatus\nMax DB size: ${hornetPruningDatabaseSize} GB\nPruning percentage: ${hornetPruningPercentage}%\nPruning Cooldown: $hornetPruningCooldownTime minutes\n\nEnabled Plugins: \"$hornetEnablePlugins\"\nDisabled Plugins: \"$hornetDisablePlugins\"" 32 68
else
    # OUTPUT
    whiptail --title "Hornet Info" --msgbox "Hornet not installed!" 8 65
fi
