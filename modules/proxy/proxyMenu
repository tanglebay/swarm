#!/bin/bash
while [ $exitCode -lt 1 ]; do
    clear
    CHOICE=$(
        whiptail --title "Proxy Menu" --menu "\nChoose an option" 24 65 0 \
        "" "" \
        "1)" "Proxy Info" \
        "2)" "Proxy Configuration" \
        "3)" "Proxy Debugging" \
        "4)" "Proxy Installer" 3>&2 2>&1 1>&3
    )

    exitStatus=$?
    if [ "$exitStatus" = "1" ]; then
        exitCode=1
    fi

    case $CHOICE in
        "1)")
            source $proxyModule/proxyInfo
        ;;
        "2)")
            while [ $exitCode -lt 1 ]; do
                clear
                if [ "$proxySwarmEndpoint" = "true" ]; then
                    menuProxySwarmEndpoint="Disable"
                else
                    menuProxySwarmEndpoint="Enable"
                fi
                CHOICE=$(
                    whiptail --title "Proxy Menu" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "$menuProxySwarmEndpoint SWARM Endpoint" \
                    "2)" "Hornet [IOTA] proxy settings" \
                    "3)" "Hornet [SHIMMER] proxy settings" \
                    "4)" "INX-Dashboard [SHIMMER] proxy settings" \
                    "5)" "GoShimmer proxy settings" \
                    "6)" "Advanced Settings" 3>&2 2>&1 1>&3
                )

                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi

                case $CHOICE in
                    "1)")
                        if [ "$proxySwarmEndpoint" = "true" ]; then
                            proxySwarmEndpoint=false
                            proxySwarmEndpointMenu="disabled"
                        else
                            proxySwarmEndpoint=true
                            proxySwarmEndpointMenu="enabled"
                        fi
                        sudo sed -i 's/^proxySwarmEndpoint=.*/proxySwarmEndpoint='$proxySwarmEndpoint'/' $swarmConfigs/proxy.cfg
                        source $proxyModule/proxySwarmEndpoint
                        whiptail --title "Proxy - SWARM" --msgbox "SWARM endpoint $proxySwarmEndpointMenu." 8 65
                    ;;
                    "2)")
                        source $swarmConfigs/proxy.cfg
                        currentProxyIotaHornetUrl="$proxyIotaHornetUrl"
                        if [ -z "$proxyIotaHornetUrl" ]; then
                            proxyIotaHornetUrl="my.example.com:443"
                        fi
                        proxyUrl=$(whiptail --inputbox "\nSet your domain and port for Hornet" 10 65 $proxyIotaHornetUrl --title "Proxy [IOTA] Hornet" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$proxyUrl" = "my.example.com:443" ]; then
                            unset proxyUrl
                        fi
                        if [ "$exitStatus" != "1" ]; then
                            source $proxyModule/proxyUrlValidation
                            if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                if [ "$currentProxyIotaHornetUrl" != "$proxyUrl" ]; then
                                    sudo sed -i 's/^proxyIotaHornetUrl=.*/proxyIotaHornetUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                    whiptail --title "Proxy [IOTA] Hornet" --msgbox "URL for Hornet proxy set to \"$proxyUrl\"." 8 65
                                else
                                    whiptail --title "Proxy [IOTA] Hornet" --msgbox "No Hornet url change detected." 8 65
                                fi
                                unset proxyUrl proxyUrlValid
                            else
                                whiptail --title "Proxy [IOTA] Hornet" --msgbox "No valid Hornet url." 8 65
                            fi
                        fi
                    ;;
                    "3)")
                        source $swarmConfigs/proxy.cfg
                        currentProxyShimmerHornetUrl="$proxyShimmerHornetUrl"
                        if [ -z "$proxyShimmerHornetUrl" ]; then
                            proxyShimmerHornetUrl="my.example.com:443"
                        fi
                        proxyUrl=$(whiptail --inputbox "\nSet your domain and port for Hornet-Shimmer" 10 65 $proxyShimmerHornetUrl --title "Proxy [Shimmer] Hornet" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$proxyUrl" = "my.example.com:443" ]; then
                            unset proxyUrl
                        fi
                        if [ "$exitStatus" != "1" ]; then
                            source $proxyModule/proxyUrlValidation
                            if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                if [ "$currentProxyShimmerHornetUrl" != "$proxyUrl" ]; then
                                    sudo sed -i 's/^proxyShimmerHornetUrl=.*/proxyShimmerHornetUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                    whiptail --title "Proxy [Shimmer] Hornet" --msgbox "URL for Hornet-Shimmer proxy set to \"$proxyUrl\"." 8 65
                                else
                                    whiptail --title "Proxy [Shimmer] Hornet" --msgbox "No Hornet-Shimmer url change detected." 8 65
                                fi
                                unset proxyUrl proxyUrlValid
                            else
                                whiptail --title "Proxy [Shimmer] Hornet" --msgbox "No valid Hornet-Shimmer url." 8 65
                            fi
                        fi
                    ;;
                    "4)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/proxy.cfg
                            clear
                            if [ "$proxyShimmerInxDashboardSingle" = "true" ]; then
                                proxyShimmerInxDashboardSingleMenu="Disable"
                            else
                                proxyShimmerInxDashboardSingleMenu="Enable"
                            fi
                            CHOICE=$(
                                whiptail --title "Proxy [SHIMMER] INX-Dashboard" --menu "\nChoose an option" 24 65 0 \
                                "" "" \
                                "1)" "$proxyShimmerInxDashboardSingleMenu INX-Dashboard as single endpoint" \
                                "2)" "Set INX-Dashboard url" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    source $swarmConfigs/proxy.cfg
                                    if [ ! -z "$proxyShimmerInxDashboardUrl" ]; then
                                        if [ "$proxyShimmerInxDashboardSingle" = "true" ]; then
                                            proxyShimmerInxDashboardSingle=false
                                            sudo sed -i 's/^proxyShimmerInxDashboardSingle=.*/proxyShimmerInxDashboardSingle='$proxyShimmerInxDashboardSingle'/' $swarmConfigs/proxy.cfg
                                            whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "INX-Dashboard as single endpoint disabled successfully." 8 65
                                        else
                                            if (whiptail --title "Proxy [SHIMMER] INX-Dashboard" --yesno --defaultno "Before you change the settings, are you sure you want to separate the INX dashboard from the Hornet (Shimmer) proxy endpoint (its own subdomain)?\n\nAre you sure you want to continue?" 16 65); then
                                                proxyShimmerInxDashboardSingle=true
                                                sudo sed -i 's/^proxyShimmerInxDashboardSingle=.*/proxyShimmerInxDashboardSingle='$proxyShimmerInxDashboardSingle'/' $swarmConfigs/proxy.cfg
                                                whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "INX-Dashboard as single endpoint enabled successfully." 8 65
                                            fi
                                        fi
                                    else
                                        proxyShimmerInxDashboardSingle=false
                                        sudo sed -i 's/^proxyShimmerInxDashboardSingle=.*/proxyShimmerInxDashboardSingle='$proxyShimmerInxDashboardSingle'/' $swarmConfigs/proxy.cfg
                                        whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "Aborted - To change this setting please set the url first." 8 65
                                    fi
                                ;;
                                "2)")
                                    source $swarmConfigs/proxy.cfg
                                    currentProxyShimmerInxDashboardUrl="$proxyShimmerInxDashboardUrl"
                                    if [ -z "$proxyShimmerInxDashboardUrl" ]; then
                                        proxyUrl="my.example.com:443"
                                    fi
                                    proxyUrl=$(whiptail --inputbox "\nSet your domain and port for Goshimmer" 10 65 $proxyShimmerInxDashboardUrl --title "Proxy [SHIMMER] INX-Dashboard" 3>&1 1>&2 2>&3)
                                    exitStatus=$?
                                    if [ "$proxyUrl" = "my.example.com:443" ]; then
                                        unset proxyUrl
                                    fi
                                    if [ "$exitStatus" != "1" ]; then
                                        source $proxyModule/proxyUrlValidation
                                        if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                            if [ "$currentProxyShimmerInxDashboardUrl" != "$proxyUrl" ]; then
                                                sudo sed -i 's/^proxyShimmerInxDashboardUrl=.*/proxyShimmerInxDashboardUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                                whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "URL for INX-Dashboard (Shimmer) proxy set to \"$proxyUrl\"." 8 65
                                            else
                                                whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "No INX-Dashboard (Shimmer) url change detected." 8 65
                                            fi
                                            unset proxyUrl proxyUrlValid
                                        else
                                            whiptail --title "Proxy [SHIMMER] INX-Dashboard" --msgbox "No valid INX-Dashboard (Shimmer) url." 8 65
                                        fi
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "5)")
                        source $swarmConfigs/proxy.cfg
                        currentProxyGoshimmerUrl="$proxyGoshimmerUrl"
                        if [ -z "$proxyGoshimmerUrl" ]; then
                            proxyUrl="my.example.com:443"
                        fi
                        proxyUrl=$(whiptail --inputbox "\nSet your domain and port for Goshimmer" 10 65 $proxyGoshimmerUrl --title "Proxy - Goshimmer" 3>&1 1>&2 2>&3)
                        exitStatus=$?
                        if [ "$proxyUrl" = "my.example.com:443" ]; then
                            unset proxyUrl
                        fi
                        if [ "$exitStatus" != "1" ]; then
                            source $proxyModule/proxyUrlValidation
                            if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                if [ "$currentProxyGoshimmerUrl" != "$proxyUrl" ]; then
                                    sudo sed -i 's/^proxyGoshimmerUrl=.*/proxyGoshimmerUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                    whiptail --title "Proxy - Goshimmer" --msgbox "URL for Goshimmer proxy set to \"$proxyUrl\"." 8 65
                                else
                                    whiptail --title "Proxy - Goshimmer" --msgbox "No Goshimmer url change detected." 8 65
                                fi
                                unset proxyUrl proxyUrlValid
                            else
                                whiptail --title "Proxy - Goshimmer" --msgbox "No valid Goshimmer url." 8 65
                            fi
                        fi
                    ;;
                    "X)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/proxy.cfg
                            clear
                            CHOICE=$(
                                whiptail --title "Proxy [SHIMMER] WASP" --menu "\nChoose an option" 24 65 0 \
                                "" "" \
                                "1)" "WASP Dashboard" \
                                "2)" "WASP API" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    source $swarmConfigs/proxy.cfg
                                    currentProxyShimmerWaspDashboardUrl="$proxyShimmerWaspDashboardUrl"
                                    if [ -z "$proxyShimmerWaspDashboardUrl" ]; then
                                        proxyUrl="my.example.com:443"
                                    fi
                                    proxyUrl=$(whiptail --inputbox "\nSet your domain and port for the WASP dashboard" 10 65 $proxyShimmerWaspDashboardUrl --title "Proxy [SHIMMER] WASP Dashboard" 3>&1 1>&2 2>&3)
                                    exitStatus=$?
                                    if [ "$proxyUrl" = "my.example.com:443" ]; then
                                        unset proxyUrl
                                    fi
                                    if [ "$exitStatus" != "1" ]; then
                                        source $proxyModule/proxyUrlValidation
                                        if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                            if [ "$currentProxyShimmerWaspDashboardUrl" != "$proxyUrl" ]; then
                                                sudo sed -i 's/^proxyShimmerWaspDashboardUrl=.*/proxyShimmerWaspDashboardUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                                whiptail --title "Proxy [SHIMMER] WASP Dashboard" --msgbox "URL for WASP dashboard proxy set to \"$proxyUrl\"." 8 65
                                            else
                                                whiptail --title "Proxy [SHIMMER] WASP Dashboard" --msgbox "No WASP dashboard url change detected." 8 65
                                            fi
                                            unset proxyUrl proxyUrlValid
                                        else
                                            whiptail --title "Proxy [SHIMMER] WASP Dashboard" --msgbox "No valid WASP dashboard url." 8 65
                                        fi
                                    fi
                                ;;
                                "2)")
                                    source $swarmConfigs/proxy.cfg
                                    currentProxyShimmerWaspApiUrl="$proxyShimmerWaspApiUrl"
                                    if [ -z "$proxyShimmerWaspApiUrl" ]; then
                                        proxyUrl="my.example.com:443"
                                    fi
                                    proxyUrl=$(whiptail --inputbox "\nSet your domain and port for the WASP API" 10 65 $proxyShimmerWaspApiUrl --title "Proxy [SHIMMER] WASP API" 3>&1 1>&2 2>&3)
                                    exitStatus=$?
                                    if [ "$proxyUrl" = "my.example.com:443" ]; then
                                        unset proxyUrl
                                    fi
                                    if [ "$exitStatus" != "1" ]; then
                                        source $proxyModule/proxyUrlValidation
                                        if [ "$proxyUrlValid" = "true" ] || [ -z $proxyUrl ]; then
                                            if [ "$currentProxyShimmerWaspApiUrl" != "$proxyUrl" ]; then
                                                sudo sed -i 's/^proxyShimmerWaspApiUrl=.*/proxyShimmerWaspApiUrl="'$proxyUrl'"/' $swarmConfigs/proxy.cfg
                                                whiptail --title "Proxy [SHIMMER] WASP API" --msgbox "URL for WASP API proxy set to \"$proxyUrl\"." 8 65
                                            else
                                                whiptail --title "Proxy [SHIMMER] WASP API" --msgbox "No WASP API url change detected." 8 65
                                            fi
                                            unset proxyUrl proxyUrlValid
                                        else
                                            whiptail --title "Proxy [SHIMMER] WASP API" --msgbox "No valid WASP API url." 8 65
                                        fi
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                    "6)")
                        while [ $exitCode -lt 1 ]; do
                            source $swarmConfigs/proxy.cfg
                            clear
                            if [ "$proxyAutomaticDeployment" = "true" ]; then
                                proxyAutomaticDeploymentMenu="Disable"
                            else
                                proxyAutomaticDeploymentMenu="Enable"
                            fi
                            CHOICE=$(
                                whiptail --title "Proxy - Advanced Settings" --menu "\nChoose an option" 24 65 0 \
                                "" "" \
                                "1)" "$proxyAutomaticDeploymentMenu automatic proxy deployment" 3>&2 2>&1 1>&3
                            )
                            exitStatus=$?
                            if [ "$exitStatus" = "1" ]; then
                                exitCode=1
                            fi
                            case $CHOICE in
                                "1)")
                                    source $swarmConfigs/proxy.cfg
                                    if [ "$proxyAutomaticDeployment" = "true" ]; then
                                        proxyAutomaticDeployment=false
                                        sudo sed -i 's/^proxyAutomaticDeployment=.*/proxyAutomaticDeployment='$proxyAutomaticDeployment'/' $swarmConfigs/proxy.cfg
                                        whiptail --title "Proxy - Advanced Settings" --msgbox "Automatic proxy deployment disabled successfully." 8 65
                                    else
                                        proxyAutomaticDeployment=true
                                        sudo sed -i 's/^proxyAutomaticDeployment=.*/proxyAutomaticDeployment='$proxyAutomaticDeployment'/' $swarmConfigs/proxy.cfg
                                        whiptail --title "Proxy - Advanced Settings" --msgbox "Automatic proxy deployment enabled successfully." 8 65
                                    fi
                                ;;
                            esac
                        done
                        exitCode=0
                    ;;
                esac
            done
            exitCode=0
        ;;
        "3)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "Proxy Menu" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Show proxy status" \
                    "2)" "Start/stop proxy" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        proxyStatus="$(sudo systemctl status nginx)"
                        whiptail --title "Proxy Status" --msgbox "$proxyStatus" 15 65
                    ;;
                    "2)")
                        CHOICE=$(
                            whiptail --title "Proxy Menu" --menu "\nChoose your option" 24 65 0 \
                            "" "" \
                            "1)" "Restart Proxy" \
                            "2)" "Start Proxy" \
                            "3)" "Stop Proxy" 3>&2 2>&1 1>&3
                        )
                        exitStatus=$?
                        if [ "$exitStatus" = "1" ]; then
                            exitCode=1
                        fi
                        case $CHOICE in
                            "1)")
                                {
                                    echo 0
                                    sleep 0.25
                                    echo 66
                                    sudo systemctl restart nginx
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while re-starting the proxy..." 6 65 0
                                whiptail --scrolltext --title "Proxy Menu" --msgbox "Proxy restarted successfully!" 8 65
                            ;;
                            "2)")
                                {
                                    echo 0
                                    sleep 0.25
                                    echo 66
                                    sudo systemctl start nginx
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while starting the proxy..." 6 65 0
                                whiptail --title "Proxy Menu" --msgbox "Proxy started successfully!" 8 65
                            ;;
                            "3)")
                                {
                                    echo 0
                                    sleep 0.25
                                    echo 66
                                    sudo systemctl stop nginx
                                    echo 100
                                    sleep 0.25
                                } | whiptail --gauge "Please wait while stopping the proxy..." 6 65 0
                                whiptail --title "Proxy Menu" --msgbox "Proxy stopped successfully!" 8 65
                            ;;
                        esac
                    ;;
                esac
            done
            exitCode=0
        ;;
        "4)")
            while [ $exitCode -lt 1 ]; do
                CHOICE=$(
                    whiptail --title "Proxy Menu" --menu "\nChoose an option" 24 65 0 \
                    "" "" \
                    "1)" "Install/Deploy the proxy" \
                    "2)" "Remove the proxy" \
                    "3)" "Renew SSL certificate" 3>&2 2>&1 1>&3
                )
                exitStatus=$?
                if [ "$exitStatus" = "1" ]; then
                    exitCode=1
                fi
                case $CHOICE in
                    "1)")
                        if [ -f "/usr/bin/iota-hornet" ] || [ -f "/usr/bin/shimmer-hornet" ] || [ -f "/usr/bin/iota-bee" ] || [ -f "/usr/bin/shimmer-bee" ] || [ -f "/usr/bin/goshimmer" ] || [ -f "/usr/bin/wasp" ]; then
                            source $swarmConfigs/proxy.cfg
                            if (whiptail --title "Proxy - Deployment" --yesno --defaultno "Before deploying the proxy, please make sure that the domain and port are set for all nodes to be installed. If you use one domain for multiple nodes, please use different ports.\n\n\nAre you sure you want to continue?" 16 65); then
                                source $proxyModule/proxyDeployment
                                clear
                            fi
                        else
                            whiptail --title "Proxy - Deployment" --msgbox "No node software found on the system, please install a node first before you can install the proxy." 8 65
                        fi
                    ;;
                    "2)")
                        if (whiptail --title "Proxy - Removal" --yesno --defaultno "Do you really want to remove the proxy?" 8 65); then
                            {
                                echo 0
                                if [ "$ufw" = "true" ]; then
                                    source $proxyModule/proxyParser
                                    sudo ufw delete allow 80/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxySwarmDashboardPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyIotaHornetPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyShimmerHornetPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyShimmerInxDashboardPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyIotaBeePort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyShimmerBeePort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyGoshimmerPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyWaspDashboardPort/tcp > /dev/null 2>&1
                                    sudo ufw delete allow $proxyWaspApiPort/tcp > /dev/null 2>&1
                                fi
                                echo 20
                                sudo apt -qq purge software-properties-common certbot python3-certbot-nginx nginx* -y > /dev/null 2>&1
                                echo 40
                                sudo apt -qq autoremove -y > /dev/null 2>&1
                                echo 60
                                if [ -d "/etc/nginx" ]; then
                                    sudo rm -rf /etc/nginx > /dev/null 2>&1
                                fi
                                if [ -d "/etc/letsencrypt" ]; then
                                    sudo rm -rf /etc/letsencrypt > /dev/null 2>&1
                                fi
                                sudo sed -i 's/^proxyIotaHornetUrl=.*/proxyIotaHornetDomain=""/' $swarmConfigs/proxy.cfg
                                sudo sed -i 's/^proxyShimmerHornetUrl=.*/proxyShimmerHornetDomain=""/' $swarmConfigs/proxy.cfg
                                sudo sed -i 's/^proxyShimmerInxDashboardUrl=.*/proxyShimmerInxDashboardDomain=""/' $swarmConfigs/proxy.cfg
                                sudo sed -i 's/^proxyGoshimmerUrl=.*/proxyGoshimmerUrl=""/' $swarmConfigs/proxy.cfg
                                sudo sed -i 's/^proxyWaspDashboardUrl=.*/proxyWaspDashboardUrl=/' $swarmConfigs/proxy.cfg
                                sudo sed -i 's/^proxyWaspApiUrl=.*/proxyWaspApiUrl=/' $swarmConfigs/proxy.cfg
                                echo 100
                                sleep 0.25
                            } | whiptail --gauge "Please wait while removing the proxy..." 6 65 0
                            whiptail --title "Proxy - Removal" --msgbox "Proxy removed successfully!" 8 65
                        fi
                    ;;
                    "3)")
                        # Manual renew certificate if installed
                        source $proxyModule/proxyParser
                        if [ -f "/etc/letsencrypt/live/$proxyIotaHornetDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyShimmerHornetDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyWaspDashboardDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ]; then
                            sudo certbot renew --force-renewal
                            echo ""
                            echo ""
                            echo "#############################################################"
                            read -p "Press any key to continue..."
                        else
                            whiptail --title "Proxy Menu" --msgbox "Error! No SSL Certificate installed!" 8 65
                        fi
                    ;;
                esac
            done
            exitCode=0
        ;;
    esac
done
exitCode=0