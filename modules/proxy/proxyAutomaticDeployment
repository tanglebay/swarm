#!/bin/bash
if [ "$proxyAutomaticDeployment" = "true" ] && [ -f "/usr/sbin/nginx" ]; then
    # LOAD DOMAIN AND PORT
    source $proxyModules/proxyParser
    if [ ! -d "/etc/nginx/swarm" ]; then
        sudo mkdir -p /etc/nginx/swarm
    fi

    # TANGLEBAY stuff
    if [ -f "/etc/nginx/tb-lbs.conf" ]; then
        sudo mv /etc/nginx/tb-lbs.conf /etc/nginx/tb-srv.conf
        sudo chmod 644 /etc/nginx/tb-srv.conf
    fi
    if [ -f "/etc/nginx/tb-srv.conf" ]; then
        sudo mv /etc/nginx/tb-srv.conf /etc/nginx/swarm/tb-srv.conf
    fi
    if [ -f "/etc/nginx/extended-proxy.conf" ]; then
        sudo mv /etc/nginx/extended-proxy.conf /etc/nginx/swarm/extended-proxy.conf
    fi
    if [ ! -f "/etc/nginx/swarm/tb-srv.conf" ]; then
        sudo touch /etc/nginx/swarm/tb-srv.conf
        sudo chmod 644 /etc/nginx/swarm/tb-srv.conf
    fi
    if [ ! -f "/etc/nginx/swarm/extended-proxy.conf" ]; then
        sudo touch /etc/nginx/swarm/extended-proxy.conf
        sudo chmod 644 /etc/nginx/swarm/extended-proxy.conf
    fi

    if [ -f "/etc/letsencrypt/live/$proxyIotaHornetDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyShimmerHornetDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyIotaBeeDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyShimmerBeeDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyWaspDashboardDomain/fullchain.pem" ] || [ -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ]; then
        if [ -d "/var/www/html/swarm-dashboard" ]; then
            sudo rm -rf /var/www/html/swarm-dashboard
        fi
        if [ -d "/var/www/html/swarm-nodes" ]; then
            sudo rm -rf /var/www/html/swarm-nodes > /dev/null 2>&1
        fi

        if [ -f "/etc/nginx/sites-available/default > /dev/null 2>&1" ]; then
            sudo rm -rf /etc/nginx/sites-available/default > /dev/null 2>&1
        fi
        sudo rm -rf /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/iota* /etc/nginx/sites-enabled/goshimmer /etc/nginx/sites-enabled/wasp* /etc/nginx/sites-enabled/shimmer* /etc/nginx/sites-enabled/landing > /dev/null 2>&1
        sudo cp -rf $swarmTemplates/proxy/nginx_default.template /etc/nginx/sites-enabled/default

        #################################################################################################
        if [ -f "/etc/nginx/sites-enabled/swarm-dashboard" ]; then
            sudo rm -rf /etc/nginx/sites-enabled/swarm-dashboard > /dev/null 2>&1
        fi
        #################################################################################################
        if [ -f "/usr/bin/iota-hornet" ] && [ -f "/etc/letsencrypt/live/$proxyIotaHornetDomain/fullchain.pem" ] && [ ! -z "$proxyIotaHornetDomain" ] && [ ! -z "$proxyIotaHornetPort" ]; then
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyIotaHornetDomain"
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_iota-hornet.template /etc/nginx/sites-enabled/iota-hornet
            sudo sed -i 's/domain.tld/'$proxyIotaHornetDomain'/g' /etc/nginx/sites-enabled/iota-hornet
            sudo sed -i 's/443/'$proxyIotaHornetPort'/g' /etc/nginx/sites-enabled/iota-hornet
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyIotaHornetPort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/shimmer-hornet" ] && [ -f "/etc/letsencrypt/live/$proxyShimmerHornetDomain/fullchain.pem" ] && [ ! -z "$proxyShimmerHornetDomain" ] && [ ! -z "$proxyShimmerHornetPort" ]; then
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyShimmerHornetDomain"
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_shimmer-hornet.template /etc/nginx/sites-enabled/shimmer-hornet
            sudo sed -i 's/domain.tld/'$proxyShimmerHornetDomain'/g' /etc/nginx/sites-enabled/shimmer-hornet
            sudo sed -i 's/443/'$proxyShimmerHornetPort'/g' /etc/nginx/sites-enabled/shimmer-hornet
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyShimmerHornetPort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/iota-bee" ] && [ -f "/etc/letsencrypt/live/$proxyIotaBeeDomain/fullchain.pem" ] && [ ! -z "$proxyIotaBeeDomain" ] && [ ! -z "$proxyIotaBeePort" ]; then
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyIotaBeeDomain"
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_iota-bee.template /etc/nginx/sites-enabled/iota-bee
            sudo sed -i 's/domain.tld/'$proxyIotaBeeDomain'/g' /etc/nginx/sites-enabled/iota-bee
            sudo sed -i 's/443/'$proxyIotaBeePort'/g' /etc/nginx/sites-enabled/iota-bee
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyIotaBeePort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/shimmer-bee" ] && [ -f "/etc/letsencrypt/live/$proxyShimmerBeeDomain/fullchain.pem" ] && [ ! -z "$proxyShimmerBeeDomain" ] && [ ! -z "$proxyShimmerBeePort" ]; then
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyShimmerBeeDomain"
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_shimmer-bee.template /etc/nginx/sites-enabled/shimmer-bee
            sudo sed -i 's/domain.tld/'$proxyShimmerBeeDomain'/g' /etc/nginx/sites-enabled/shimmer-bee
            sudo sed -i 's/443/'$proxyShimmerBeePort'/g' /etc/nginx/sites-enabled/shimmer-bee
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyShimmerBeePort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/goshimmer" ] && [ -f "/etc/letsencrypt/live/$proxyGoshimmerDomain/fullchain.pem" ] && [ ! -z "$proxyGoshimmerDomain" ] && [ ! -z "$proxyGoshimmerPort" ]; then
            source $swarmConfigs/goshimmer.cfg
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyGoshimmerDomain"
            fi
            if [ -d "/etc/nginx/goshimmer" ]; then
                sudo mv /etc/nginx/goshimmer /etc/nginx/swarm/goshimmer
            fi
            if [ ! -d "/etc/nginx/swarm/goshimmer" ]; then
                sudo mkdir -p /etc/nginx/swarm/goshimmer
            fi
            if [ -f "/etc/nginx/swarm/goshimmer/dashboardauth.conf" ]; then
                sudo echo "" > /etc/nginx/swarm/goshimmer/dashboardauth.conf > /dev/null 2>&1
            fi
            if [ ! -f "/etc/nginx/swarm/goshimmer/webapiauth.conf" ]; then
                sudo echo "" > /etc/nginx/swarm/goshimmer/webapiauth.conf > /dev/null 2>&1
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_goshimmer.template /etc/nginx/sites-enabled/goshimmer
            sudo sed -i 's/domain.tld/'$proxyGoshimmerDomain'/g' /etc/nginx/sites-enabled/goshimmer
            sudo sed -i 's/443/'$proxyGoshimmerPort'/g' /etc/nginx/sites-enabled/goshimmer
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyGoshimmerPort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/wasp" ] && [ -f "/etc/letsencrypt/live/$proxyWaspDashboardDomain/fullchain.pem" ] && [ ! -z "$proxyWaspDashboardDomain" ] && [ ! -z "$proxyWaspDashboardPort" ]; then
            source $swarmConfigs/wasp.cfg
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyWaspDashboardDomain"
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_wasp-dashboard.template /etc/nginx/sites-enabled/wasp-dashboard
            sudo sed -i 's/domain.tld/'$proxyWaspDashboardDomain'/g' /etc/nginx/sites-enabled/wasp-dashboard
            sudo sed -i 's/443/'$proxyWaspDashboardPort'/g' /etc/nginx/sites-enabled/wasp-dashboard
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyWaspDashboardPort/tcp > /dev/null 2>&1
            fi
        fi
        if [ -f "/usr/bin/wasp" ] && [ -f "/etc/letsencrypt/live/$proxyWaspApiDomain/fullchain.pem" ] && [ ! -z "$proxyWaspApiDomain" ] && [ ! -z "$proxyWaspApiPort" ]; then
            source $swarmConfigs/wasp.cfg
            if [ -z "$defaultDomain" ]; then
                defaultDomain="$proxyWaspApiDomain"
            fi
            if [ -d "/etc/nginx/wasp" ]; then
                sudo mkdir -p /etc/nginx/swarm/
                sudo mv /etc/nginx/wasp /etc/nginx/swarm/wasp
            fi
            if [ ! -d "/etc/nginx/swarm/wasp" ]; then
                sudo mkdir -p /etc/nginx/swarm/wasp
            fi
            if [ ! -f "/etc/nginx/swarm/wasp/webapiauth.conf" ]; then
                sudo echo "" > /etc/nginx/wasp/swarm/webapiauth.conf > /dev/null 2>&1
            fi
            sudo cp -rf $swarmTemplates/proxy/nginx_wasp-api.template /etc/nginx/sites-enabled/wasp-api
            sudo sed -i 's/domain.tld/'$proxyWaspApiDomain'/g' /etc/nginx/sites-enabled/wasp-api
            sudo sed -i 's/443/'$proxyWaspApiPort'/g' /etc/nginx/sites-enabled/wasp-api
            if [ "$ufw" = "true" ]; then
                sudo ufw allow $proxyWaspApiPort/tcp > /dev/null 2>&1
            fi
        fi
        #########################################################################################################################################################################################################
        sudo sed -i 's/# server_tokens off;/server_tokens off;/g' /etc/nginx/nginx.conf
        sudo sed -i 's/# server_names_hash_bucket_size 64;/server_names_hash_bucket_size 64;/g' /etc/nginx/nginx.conf
        sudo sed -i 's/domain.tld/'$defaultDomain'/g' /etc/nginx/sites-enabled/default
        if [ -f /etc/nginx/swarm.conf ]; then
            sudo mv /etc/nginx/swarm.conf /etc/nginx/swarm/swarm.conf
        else
            if [ ! -f "/etc/nginx/swarm/swarm.conf" ]; then
                sudo touch /etc/nginx/swarm/swarm.conf > /dev/null 2>&1
            fi
        fi
        source $proxyModules/proxyShimmerDashboard
        source $proxyModules/proxyShimmerMqtt
        source $proxyModules/proxySwarmEndpoint
        sudo systemctl restart nginx > /dev/null 2>&1
    fi
fi