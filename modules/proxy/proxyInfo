#!/bin/bash
source $swarmConfigs/proxy.cfg

source $proxyModule/proxyParser

if [ -f "/usr/sbin/nginx" ]; then
    proxyStatus=$(systemctl show -p ActiveState --value nginx)
    if [ "$proxySwarmEndpoint" = "true" ]; then
        proxySwarmEndpointVersion=$(head -n 1 /etc/nginx/swarm/swarm.conf | awk '{ print $3 }')
        proxySwarmEndpointStatus="✓ (v$proxySwarmEndpointVersion)"

    else
        proxySwarmEndpointStatus="X"
    fi

    hr="\n\n#############################################################"

    if [ ! -z "$proxyIotaHornetUrl" ] && [ -d "/etc/letsencrypt/live/$proxyIotaHornetDomain" ] && [ -f "/usr/bin/iota-hornet" ] && [ -f "/etc/nginx/sites-enabled/iota-hornet" ]; then
        proxyIotaHornetVersion=$(head -n 1 /etc/nginx/sites-enabled/iota-hornet | awk '{ print $3 }')
        proxyIotaHornetInfo="\n\n${proxyInfoHornetDashboard}Hornet [IOTA] Dashboard/API (v$proxyIotaHornetVersion)\nhttps://$proxyIotaHornetUrl"
    else
        unset proxyIotaHornetVersion proxyIotaHornetInfo
    fi
    if [ ! -z "$proxyShimmerHornetUrl" ] && [ -d "/etc/letsencrypt/live/$proxyShimmerHornetDomain" ] && [ -f "/usr/bin/shimmer-hornet" ] && [ -f "/etc/nginx/sites-enabled/shimmer-hornet" ]; then
        proxyShimmerHornetVersion=$(head -n 1 /etc/nginx/sites-enabled/shimmer-hornet | awk '{ print $3 }')
        proxyShimmerHornetInfo="\n\n${proxyInfoShimmerHornetDashboard}Hornet [Shimmer] Dashboard/API (v$proxyShimmerHornetVersion)\nhttps://$proxyShimmerHornetUrl"
    else
        unset proxyShimmerHornetVersion proxyShimmerHornetInfo
    fi
    if [ ! -z "$proxyGoshimmerUrl" ] && [ -d "/etc/letsencrypt/live/$proxyGoshimmerDomain" ] && [ -f "/usr/bin/goshimmer" ] && [ -f "/etc/nginx/sites-enabled/goshimmer" ]; then
        proxyGoshimmerVersion=$(head -n 1 /etc/nginx/sites-enabled/goshimmer | awk '{ print $3 }')
        proxyGoshimmerInfo="\n\n${proxyInfoGoshimmerDashboard}GoShimmer Dashboard/API (v$proxyGoshimmerVersion)\nhttps://$proxyGoshimmerUrl"
    else
        unset proxyGoshimmerVersion proxyGoshimmerInfo
    fi
    if [ ! -z "$proxyShimmerWaspDashboardUrl" ] && [ -d "/etc/letsencrypt/live/$proxyShimmerWaspDashboardDomain" ] && [ -f "/usr/bin/shimmer-wasp" ] && [ -f "/etc/nginx/sites-enabled/shimmer-wasp-dashboard" ]; then
        proxyShimmerWaspDashboardVersion=$(head -n 1 /etc/nginx/sites-enabled/shimmer-wasp-dashboard | awk '{ print $3 }')
        proxyShimmerWaspDashboardInfo="\n\nWASP [Shimmer] Dashboard (v$proxyShimmerWaspDashboardVersion)\nhttps://$proxyShimmerWaspDashboardUrl"
    else
        unset roxyShimmerWaspDashboardVersion proxyShimmerWaspDashboardInfo
    fi
    if [ ! -z "$proxyShimmerWaspApiUrl" ] && [ -d "/etc/letsencrypt/live/$proxyShimmerWaspApiDomain" ] && [ -f "/usr/bin/shimmer-wasp" ] && [ -f "/etc/nginx/sites-enabled/shimmer-wasp-api" ]; then
        proxyShimmerWaspApiVersion=$(head -n 1 /etc/nginx/sites-enabled/shimmer-wasp-api | awk '{ print $3 }')
        proxyShimmerWaspApiInfo="\n\nWASP [SHIMMER] API (v$proxyShimmerWaspApiVersion)\nhttps://$proxyShimmerWaspApiUrl"
    else
        unset proxyShimmerWaspApiVersion proxyShimmerWaspApiInfo
    fi

    if [ "$proxyAutomaticDeployment" = "true" ]; then
        proxyAutomaticDeploymentInfo="Proxy Auto-Deploy: ✓"
    else
        proxyAutomaticDeploymentInfo="Proxy Auto-Deploy: X"
    fi

    # OUTPUT
    whiptail --scrolltext --title "Proxy Info [v$version]" --msgbox "Webserver: ${proxyStatus}\n${proxyAutomaticDeploymentInfo}\nSWARM Endpoint: ${proxySwarmEndpointStatus}${hr}${proxyIotaHornetInfo}${proxyShimmerHornetInfo}${proxyGoshimmerInfo}${proxyShimmerWaspDashboardInfo}${proxyShimmerWaspApiInfo}" 24 65
else
    whiptail --title "Proxy Info [v$version]" --msgbox "Reverse proxy not installed!" 8 65
fi
