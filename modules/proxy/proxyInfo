#!/bin/bash
source $swarmConfigs/proxy.cfg

source $proxyModule/proxyParser

if [ -f "/usr/sbin/nginx" ]; then
    proxyStatus=$(systemctl show -p ActiveState --value nginx)
    if [ "$proxySwarmEndpoint" = "true" ]; then
        proxySwarmEndpointVersion=$(head -n 1 /etc/nginx/swarm/swarm.conf | awk '{ print $3 }')
        proxySwarmEndpointStatus="✓ (v$proxySwarmEndpointVersion)"

    else
        proxySwarmEndpointStatus="X"
    fi

    hr="\n\n#############################################################"

    if [ ! -z "$proxyIotaHornetUrl" ] && [ -d "/etc/letsencrypt/live/$proxyIotaHornetDomain" ] && [ -f "/usr/bin/iota-hornet" ] && [ -f "/etc/nginx/sites-enabled/iota-hornet" ]; then
        proxyIotaHornetVersion=$(head -n 1 /etc/nginx/sites-enabled/iota-hornet | awk '{ print $3 }')
        if [ "$proxyIotaInxDashboardEnabled" = "true" ]; then
            proxyIotaHornetInfo="\n\nHornet [IOTA] API (v$proxyIotaHornetVersion)\nhttps://$proxyIotaHornetUrl"
        else
            proxyIotaHornetInfo="\n\nHornet [IOTA] Dashboard/API (v$proxyIotaHornetVersion)\nhttps://$proxyIotaHornetUrl"
        fi
    else
        unset proxyIotaHornetVersion proxyIotaHornetInfo
    fi
    if [ ! -z "$proxyIotaInxDashboardUrl" ] && [ -d "/etc/letsencrypt/live/$proxyIotaInxDashboardDomain" ] && [ -f "/usr/bin/iota-inx-dashboard" ] && [ -f "/etc/nginx/sites-enabled/iota-inx-dashboard" ] && [ "$proxyIotaInxDashboardEnabled" = "true" ]; then
        proxyIotaInxDashboardVersion=$(head -n 1 /etc/nginx/sites-enabled/iota-inx-dashboard | awk '{ print $3 }')
        proxyIotaInxDashboardInfo="\n\nINX [IOTA] Dashboard (v$proxyIotaInxDashboardVersion)\nhttps://$proxyIotaInxDashboardUrl"
    else
        unset proxyShimmerInxDashboardVersion proxyShimmerInxDashboardInfo
    fi
    if [ ! -z "$proxyShimmerHornetUrl" ] && [ -d "/etc/letsencrypt/live/$proxyShimmerHornetDomain" ] && [ -f "/usr/bin/shimmer-hornet" ] && [ -f "/etc/nginx/sites-enabled/shimmer-hornet" ]; then
        proxyShimmerHornetVersion=$(head -n 1 /etc/nginx/sites-enabled/shimmer-hornet | awk '{ print $3 }')
        if [ "$proxyShimmerInxDashboardEnabled" = "true" ]; then
            proxyShimmerHornetEndpointInfo=" API"
        else
            proxyShimmerHornetEndpointInfo=" Dashboard/API"
        fi
        proxyShimmerHornetInfo="\n\nHornet [Shimmer]$proxyShimmerHornetEndpointInfo (v$proxyShimmerHornetVersion)\nhttps://$proxyShimmerHornetUrl"
    else
        unset proxyShimmerHornetVersion proxyShimmerHornetEndpointInfo proxyShimmerHornetInfo
    fi
    if [ ! -z "$proxyShimmerInxDashboardUrl" ] && [ -d "/etc/letsencrypt/live/$proxyShimmerInxDashboardDomain" ] && [ -f "/usr/bin/shimmer-inx-dashboard" ] && [ -f "/etc/nginx/sites-enabled/shimmer-inx-dashboard" ] && [ "$proxyShimmerInxDashboardEnabled" = "true" ]; then
        proxyShimmerInxDashboardVersion=$(head -n 1 /etc/nginx/sites-enabled/shimmer-inx-dashboard | awk '{ print $3 }')
        proxyShimmerInxDashboardInfo="\n\nINX [Shimmer] Dashboard (v$proxyShimmerInxDashboardVersion)\nhttps://$proxyShimmerInxDashboardUrl"
    else
        unset proxyShimmerInxDashboardVersion proxyShimmerInxDashboardInfo
    fi

    if [ "$proxyAutomaticDeployment" = "true" ]; then
        proxyAutomaticDeploymentInfo="Proxy Auto-Deploy: ✓"
    else
        proxyAutomaticDeploymentInfo="Proxy Auto-Deploy: X"
    fi

    # OUTPUT
    whiptail --scrolltext --title "Proxy Info [v$version]" --msgbox "Webserver: ${proxyStatus}\n${proxyAutomaticDeploymentInfo}\nSWARM Endpoint: ${proxySwarmEndpointStatus}${hr}${proxyIotaHornetInfo}${proxyIotaInxDashboardInfo}${proxyShimmerHornetInfo}${proxyShimmerInxDashboardInfo}" 24 70
else
    whiptail --title "Proxy Info [v$version]" --msgbox "Reverse proxy not installed!" 8 70
fi
