#!/bin/bash
source $swarmConfigs/proxy.cfg

source $proxyModules/proxyParser

if [ -f "/usr/sbin/nginx" ]; then
    if [ "$proxyHornetExternalDashboard" = "true" ]; then
        proxyInfoHornetDashboard="External"
    else
        proxyInfoHornetDashboard="Internal"
    fi
    if [ "$proxyHornetShimmerExternalDashboard" = "true" ]; then
        proxyInfoHornetShimmerDashboard="External"
    else
        proxyInfoHornetShimmerDashboard="Internal"
    fi
    if [ "$proxyBeeExternalDashboard" = "true" ]; then
        proxyInfoBeeDashboard="External"
    else
        proxyInfoBeeDashboard="Internal"
    fi
    if [ "$proxyGoshimmerExternalDashboard" = "true" ]; then
        proxyInfoGoshimmerDashboard="External"
    else
        proxyInfoGoshimmerDashboard="Internal"
    fi  
    #######
    proxyStatus=$(systemctl show -p ActiveState --value nginx)
    if [ ! -z "$proxySwarmDashboardDomain" ] && [ ! -z "$proxySwarmDashboardPort" ] && [ -d "/etc/letsencrypt/live/$proxySwarmDashboardDomain" ] && [ -f "/var/www/html/swarm-dashboard/index.html" ]; then
        proxySwarmDashboardInfo="\n\nSWARM Dashboard\nhttps://$proxySwarmDashboardUrl"
    fi

    hr="\n\n#############################################################"

    if [ "$proxyHornetExternalDashboard" = "true" ] && [ ! -z "$proxyHornetUrl" ]; then
        proxyHornetInfo="\n\n$proxyInfoHornetDashboard Hornet (Dashboard/API)\nhttps://$proxyHornetUrl"
    else
        if [ ! -z "$proxyHornetUrl" ] && [ -d "/etc/letsencrypt/live/$proxyHornetDomain" ] && [ -f "/usr/bin/hornet" ]; then
            proxyHornetInfo="\n\n$proxyInfoHornetDashboard Hornet (Dashboard/API)\nhttps://$proxyHornetUrl"
        fi
    fi
    if [ "$proxyHornetShimmerExternalDashboard" = "true" ] && [ ! -z "$proxyHornetShimmerUrl" ]; then
        proxyHornetShimmerInfo="\n\n$proxyInfoHornetShimmerDashboard Hornet-Shimmer (Dashboard/API)\nhttps://$proxyHornetShimmerUrl"
    else
        if [ ! -z "$proxyHornetShimmerUrl" ] && [ -d "/etc/letsencrypt/live/$proxyHornetShimmerDomain" ] && [ -f "/usr/bin/hornet-shimmer" ]; then
            proxyHornetShimmerInfo="\n\n$proxyInfoHornetShimmerDashboard Hornet-Shimmer (Dashboard/API)\nhttps://$proxyHornetShimmerUrl"
        fi
    fi
    if [ "$proxyBeeExternalDashboard" = "true" ] && [ ! -z "$proxyBeeUrl" ]; then
        proxyBeeInfo="\n\n$proxyInfoBeeDashboard Bee (Dashboard/API)\nhttps://$proxyBeeUrl"
    else
        if [ ! -z "$proxyBeeUrl" ] && [ -d "/etc/letsencrypt/live/$proxyBeeDomain" ] && [ -f "/usr/bin/bee" ]; then
            proxyBeeInfo="\n\n$proxyInfoBeeDashboard Bee (Dashboard/API)\nhttps://$proxyBeeUrl"
        fi
    fi
    if [ "$proxyGoshimmerExternalDashboard" = "true" ] && [ ! -z "$proxyGoshimmerUrl" ]; then
        proxyGoshimmerInfo="\n\n$proxyInfoGoshimmerDashboard Goshimmer (Dashboard/API)\nhttps://$proxyGoshimmerUrl"
    else
        if [ ! -z "$proxyGoshimmerUrl" ] && [ -d "/etc/letsencrypt/live/$proxyGoshimmerDomain" ] && [ -f "/usr/bin/goshimmer" ]; then
            proxyGoshimmerInfo="\n\n$proxyInfoGoshimmerDashboard GoShimmer (Dashboard/API)\nhttps://$proxyGoshimmerUrl"
        fi
    fi
    if [ ! -z "$proxyWaspDashboardUrl" ] && [ -d "/etc/letsencrypt/live/$proxyWaspDashboardDomain" ] && [ -f "/usr/bin/wasp" ]; then
        proxyWaspDashboardInfo="\n\nWASP (Dashboard)\nhttps://$proxyWaspDashboardUrl"
    fi
    if [ ! -z "$proxyWaspApiUrl" ] && [ -d "/etc/letsencrypt/live/$proxyWaspApiDomain" ] && [ -f "/usr/bin/wasp" ]; then
        proxyWaspApiInfo="\n\nWASP (API)\nhttps://$proxyWaspApiUrl"
    fi

    # OUTPUT
    whiptail --title "Proxy Info [v$version]" --msgbox "Webserver: ${proxyStatus}${proxySwarmDashboardInfo}${hr}${proxyHornetInfo}${proxyHornetShimmerInfo}${proxyBeeInfo}${proxyGoshimmerInfo}${proxyWaspDashboardInfo}${proxyWaspApiInfo}" 27 65
else
    whiptail --title "Proxy Info [v$version]" --msgbox "Reverse proxy not installed!" 8 65
fi
