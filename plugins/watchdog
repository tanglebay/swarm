#!/bin/bash

if [ ! -f "/tmp/watchdog.lock" ]; then
    # Create LOCK file
    sudo touch /tmp/watchdog.lock

    # GLOBAL
    source /var/lib/swarm/environment
    source $swarmConfigs/swarm.cfg
    source $swarmConfigs/proxy.cfg
    source $swarmConfigs/watchdog.cfg

    # NODES
    source $swarmConfigs/iota-hornet.cfg
    source $swarmConfigs/shimmer-hornet.cfg
    source $swarmConfigs/iota-bee.cfg
    source $swarmConfigs/shimmer-bee.cfg
    source $swarmConfigs/goshimmer.cfg
    source $swarmConfigs/wasp.cfg

    # INX (Shimmer)
    source $swarmConfigs/iota-inx-dashboard.cfg
    source $swarmConfigs/iota-inx-indexer.cfg
    source $swarmConfigs/iota-inx-mqtt.cfg
    source $swarmConfigs/iota-inx-participation.cfg

    # INX (Shimmer)
    source $swarmConfigs/shimmer-inx-dashboard.cfg
    source $swarmConfigs/shimmer-inx-indexer.cfg
    source $swarmConfigs/shimmer-inx-mqtt.cfg
    source $swarmConfigs/shimmer-inx-participation.cfg

    # SWARM Auth Check
    source $swarmModules/swarmAuth

    # Get Service Status
    if [ -f "/usr/bin/hornet" ]; then
        hornetStatus="$(systemctl show -p ActiveState --value hornet)"
    fi
    if [ -f "/usr/bin/hornet-shimmer" ]; then
        hornetShimmerStatus="$(systemctl show -p ActiveState --value hornet-shimmer)"
    fi
    if [ -f "/usr/bin/bee" ]; then
        beeStatus="$(systemctl show -p ActiveState --value bee)"
    fi
    if [ -f "/usr/bin/bee-shimmer" ]; then
        beeShimmerStatus="$(systemctl show -p ActiveState --value bee-shimmer)"
    fi
    if [ -f "/usr/bin/goshimmer" ]; then
        goshimmerStatus="$(systemctl show -p ActiveState --value goshimmer)"
    fi
    if [ -f "/usr/bin/wasp" ]; then
        waspStatus="$(systemctl show -p ActiveState --value wasp)"
    fi
    if [ -f "/usr/bin/iota-inx-dashboard" ]; then
        iotaInxDashboardStatus="$(systemctl show -p ActiveState --value iota-inx-dashboard)"
    fi
    if [ -f "/usr/bin/iota-inx-indexer" ]; then
        iotaInxIndexerStatus="$(systemctl show -p ActiveState --value iota-inx-indexer)"
    fi
    if [ -f "/usr/bin/iota-inx-mqtt" ]; then
        iotaInxMqttStatus="$(systemctl show -p ActiveState --value iota-inx-mqtt)"
    fi
    if [ -f "/usr/bin/iota-inx-participation" ]; then
        iotaInxParticipationStatus="$(systemctl show -p ActiveState --value iota-inx-participation)"
    fi
    if [ -f "/usr/bin/shimmer-inx-dashboard" ]; then
        shimmerInxDashboardStatus="$(systemctl show -p ActiveState --value shimmer-inx-dashboard)"
    fi
    if [ -f "/usr/bin/shimmer-inx-indexer" ]; then
        shimmerInxIndexerStatus="$(systemctl show -p ActiveState --value shimmer-inx-indexer)"
    fi
    if [ -f "/usr/bin/shimmer-inx-mqtt" ]; then
        shimmerInxMqttStatus="$(systemctl show -p ActiveState --value shimmer-inx-mqtt)"
    fi
    if [ -f "/usr/bin/shimmer-inx-participation" ]; then
        shimmerInxParticipationStatus="$(systemctl show -p ActiveState --value shimmer-inx-participation)"
    fi

    # Set time frame
    timeFrame=`date '+%M'`

    # Check if FW is installed
    if [ -x "$(command -v ufw)" ] > /dev/null 2>&1; then
        ufw=true
    fi

    # Check if killall is available
    if [ -x "$(command -v killall)" ] > /dev/null 2>&1; then
        killall=true
    fi

    ###########################
    source $watchdogModules/watchdogNumberGenerator
    ###########################

    # Versions Update
    source $watchdogModules/watchdogGetLatestVersions

    # SWARM auto updater
    source $watchdogModules/watchdogSwarmAutoUpdate

    # Node update check
    source $watchdogModules/watchdogAutoNodeUpdate

    # INX update check
    source $watchdogModules/watchdogAutoInxUpdate

    # Service check
    source $watchdogModules/watchdogStatusCheck

    # Check sync
    # source $watchdogModules/watchdogSyncCheck

    # Log Pruning
    source $watchdogModules/watchdogLogPruning

    # Used disk space check
    source $watchdogModules/watchdogUdsCheck

    # Remove LOCK file
    sudo rm -rf /tmp/watchdog.lock
fi

exit 0
